(function(modules){var installedModules={};function __webpack_require__(moduleId){if(installedModules[moduleId]){return installedModules[moduleId].exports}var module=installedModules[moduleId]={i:moduleId,l:false,exports:{}};modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);module.l=true;return module.exports}__webpack_require__.m=modules;__webpack_require__.c=installedModules;__webpack_require__.d=function(exports,name,getter){if(!__webpack_require__.o(exports,name)){Object.defineProperty(exports,name,{configurable:false,enumerable:true,get:getter})}};__webpack_require__.r=function(exports){Object.defineProperty(exports,"__esModule",{value:true})};__webpack_require__.n=function(module){var getter=module&&module.__esModule?function getDefault(){return module["default"]}:function getModuleExports(){return module};__webpack_require__.d(getter,"a",getter);return getter};__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property)};__webpack_require__.p="";return __webpack_require__(__webpack_require__.s=73)})([function(module,exports,__webpack_require__){"use strict";if(true){module.exports=__webpack_require__(71)}else{}},function(module,exports,__webpack_require__){"use strict";var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function")}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return call&&(typeof call==="object"||typeof call==="function")?call:self}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass)}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass}var UtilsCore=__webpack_require__(29);var Input=__webpack_require__(28);var Texture=__webpack_require__(8);var FUNCTION_NAME=/function ([^(]*)/;var STRIP_COMMENTS=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm;var ARGUMENT_NAMES=/([^\s,]+)/g;var _systemEndianness=function(){var b=new ArrayBuffer(4);var a=new Uint32Array(b);var c=new Uint8Array(b);a[0]=3735928559;if(c[0]===239)return"LE";if(c[0]===222)return"BE";throw new Error("unknown endianness")}();var _isFloatReadPixelsSupported=null;var _isFloatReadPixelsSupportedWebGL2=null;var _isMixedIdentifiersSupported=function(){try{new Function("let i = 1; const j = 1;")();return true}catch(e){return false}}();var Utils=function(_UtilsCore){_inherits(Utils,_UtilsCore);function Utils(){_classCallCheck(this,Utils);return _possibleConstructorReturn(this,(Utils.__proto__||Object.getPrototypeOf(Utils)).apply(this,arguments))}_createClass(Utils,null,[{key:"systemEndianness",value:function systemEndianness(){return _systemEndianness}},{key:"isFunction",value:function isFunction(funcObj){return typeof funcObj==="function"}},{key:"isFunctionString",value:function isFunctionString(funcStr){if(funcStr!==null){return funcStr.toString().slice(0,"function".length).toLowerCase()==="function"}return false}},{key:"getFunctionNameFromString",value:function getFunctionNameFromString(funcStr){return FUNCTION_NAME.exec(funcStr)[1]}},{key:"getFunctionBodyFromString",value:function getFunctionBodyFromString(funcStr){return funcStr.substring(funcStr.indexOf("{")+1,funcStr.lastIndexOf("}"))}},{key:"getParamNamesFromString",value:function getParamNamesFromString(func){var fnStr=func.toString().replace(STRIP_COMMENTS,"");var result=fnStr.slice(fnStr.indexOf("(")+1,fnStr.indexOf(")")).match(ARGUMENT_NAMES);if(result===null)result=[];return result}},{key:"clone",value:function clone(obj){if(obj===null||(typeof obj==="undefined"?"undefined":_typeof(obj))!=="object"||obj.hasOwnProperty("isActiveClone"))return obj;var temp=obj.constructor();for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)){obj.isActiveClone=null;temp[key]=Utils.clone(obj[key]);delete obj.isActiveClone}}return temp}},{key:"newPromise",value:function newPromise(executor){var simple=Promise||small_promise;if(simple===null){throw TypeError("Browser is missing Promise implementation. Consider adding small_promise.js polyfill")}return new simple(executor)}},{key:"functionBinder",value:function functionBinder(inFunc,thisObj){if(inFunc.bind){return inFunc.bind(thisObj)}return function(){var args=arguments.length===1?[arguments[0]]:Array.apply(null,arguments);return inFunc.apply(thisObj,args)}}},{key:"isArray",value:function isArray(array){if(isNaN(array.length)){return false}return true}},{key:"getArgumentType",value:function getArgumentType(arg){if(Utils.isArray(arg)){return"Array"}else if(typeof arg==="number"){return"Number"}else if(arg instanceof Texture){return"Texture"}else if(arg instanceof Input){return"Input"}else{return"Unknown"}}},{key:"isFloatReadPixelsSupported",value:function isFloatReadPixelsSupported(){if(_isFloatReadPixelsSupported!==null){return _isFloatReadPixelsSupported}var GPU=__webpack_require__(9);var x=new GPU({mode:"webgl-validator"}).createKernel(function(){return 1},{output:[2],floatTextures:true,floatOutput:true,floatOutputForce:true})();_isFloatReadPixelsSupported=x[0]===1;return _isFloatReadPixelsSupported}},{key:"isFloatReadPixelsSupportedWebGL2",value:function isFloatReadPixelsSupportedWebGL2(){if(_isFloatReadPixelsSupportedWebGL2!==null){return _isFloatReadPixelsSupportedWebGL2}var GPU=__webpack_require__(9);var x=new GPU({mode:"webgl2-validator"}).createKernel(function(){return 1},{output:[2],floatTextures:true,floatOutput:true,floatOutputForce:true})();_isFloatReadPixelsSupportedWebGL2=x[0]===1;return _isFloatReadPixelsSupportedWebGL2}},{key:"isMixedIdentifiersSupported",value:function isMixedIdentifiersSupported(){return _isMixedIdentifiersSupported}},{key:"dimToTexSize",value:function dimToTexSize(opt,dimensions,output){var numTexels=dimensions[0];for(var i=1;i<dimensions.length;i++){numTexels*=dimensions[i]}if(opt.floatTextures&&(!output||opt.floatOutput)){numTexels=Math.ceil(numTexels/4)}var w=Math.ceil(Math.sqrt(numTexels));return[w,w]}},{key:"getDimensions",value:function getDimensions(x,pad){var ret=void 0;if(Utils.isArray(x)){var dim=[];var temp=x;while(Utils.isArray(temp)){dim.push(temp.length);temp=temp[0]}ret=dim.reverse()}else if(x instanceof Texture){ret=x.output}else if(x instanceof Input){ret=x.size}else{throw"Unknown dimensions of "+x}if(pad){ret=Utils.clone(ret);while(ret.length<3){ret.push(1)}}return ret}},{key:"pad",value:function pad(arr,padding){function zeros(n){return Array.apply(null,new Array(n)).map(Number.prototype.valueOf,0)}var len=arr.length+padding*2;var ret=arr.map(function(x){return[].concat(zeros(padding),x,zeros(padding))});for(var i=0;i<padding;i++){ret=[].concat([zeros(len)],ret,[zeros(len)])}return ret}},{key:"flatten2dArrayTo",value:function flatten2dArrayTo(array,target){var offset=0;for(var y=0;y<array.length;y++){target.set(array[y],offset);offset+=array[y].length}}},{key:"flatten3dArrayTo",value:function flatten3dArrayTo(array,target){var offset=0;for(var z=0;z<array.length;z++){for(var y=0;y<array[z].length;y++){target.set(array[z][y],offset);offset+=array[z][y].length}}}},{key:"flattenTo",value:function flattenTo(array,target){if(Utils.isArray(array[0])){if(Utils.isArray(array[0][0])){Utils.flatten3dArrayTo(array,target)}else{Utils.flatten2dArrayTo(array,target)}}else{target.set(array)}}},{key:"splitArray",value:function splitArray(array,part){var result=[];for(var i=0;i<array.length;i+=part){result.push(Array.prototype.slice.call(array,i,i+part))}return result}},{key:"getAstString",value:function getAstString(source,ast){var lines=Array.isArray(source)?source:source.split(/\r?\n/g);var start=ast.loc.start;var end=ast.loc.end;var result=[];result.push(lines[start.line-1].slice(start.column));for(var i=start.line;i<end.line-1;i++){result.push(lines[i])}result.push(lines[end.line-1].slice(0,end.column));return result.join("\n")}},{key:"allPropertiesOf",value:function allPropertiesOf(obj){var props=[];do{props.push.apply(props,Object.getOwnPropertyNames(obj))}while(obj=Object.getPrototypeOf(obj));return props}}]);return Utils}(UtilsCore);Object.assign(Utils,UtilsCore);module.exports=Utils},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);(function(process,global){__webpack_require__.d(__webpack_exports__,"Reaction",function(){return Reaction});__webpack_require__.d(__webpack_exports__,"untracked",function(){return untracked});__webpack_require__.d(__webpack_exports__,"IDerivationState",function(){return IDerivationState});__webpack_require__.d(__webpack_exports__,"createAtom",function(){return createAtom});__webpack_require__.d(__webpack_exports__,"spy",function(){return spy});__webpack_require__.d(__webpack_exports__,"comparer",function(){return comparer});__webpack_require__.d(__webpack_exports__,"isObservableObject",function(){return isObservableObject});__webpack_require__.d(__webpack_exports__,"isBoxedObservable",function(){return isObservableValue});__webpack_require__.d(__webpack_exports__,"isObservableArray",function(){return isObservableArray});__webpack_require__.d(__webpack_exports__,"ObservableMap",function(){return ObservableMap});__webpack_require__.d(__webpack_exports__,"isObservableMap",function(){return isObservableMap});__webpack_require__.d(__webpack_exports__,"transaction",function(){return transaction});__webpack_require__.d(__webpack_exports__,"observable",function(){return observable});__webpack_require__.d(__webpack_exports__,"computed",function(){return computed});__webpack_require__.d(__webpack_exports__,"isObservable",function(){return isObservable});__webpack_require__.d(__webpack_exports__,"isObservableProp",function(){return isObservableProp});__webpack_require__.d(__webpack_exports__,"isComputed",function(){return isComputed});__webpack_require__.d(__webpack_exports__,"isComputedProp",function(){return isComputedProp});__webpack_require__.d(__webpack_exports__,"extendObservable",function(){return extendObservable});__webpack_require__.d(__webpack_exports__,"extendShallowObservable",function(){return extendShallowObservable});__webpack_require__.d(__webpack_exports__,"observe",function(){return observe});__webpack_require__.d(__webpack_exports__,"intercept",function(){return intercept});__webpack_require__.d(__webpack_exports__,"autorun",function(){return autorun});__webpack_require__.d(__webpack_exports__,"reaction",function(){return reaction});__webpack_require__.d(__webpack_exports__,"when",function(){return when});__webpack_require__.d(__webpack_exports__,"action",function(){return action});__webpack_require__.d(__webpack_exports__,"isAction",function(){return isAction});__webpack_require__.d(__webpack_exports__,"runInAction",function(){return runInAction});__webpack_require__.d(__webpack_exports__,"keys",function(){return keys});__webpack_require__.d(__webpack_exports__,"values",function(){return values});__webpack_require__.d(__webpack_exports__,"set",function(){return set});__webpack_require__.d(__webpack_exports__,"remove",function(){return remove});__webpack_require__.d(__webpack_exports__,"has",function(){return has$1});__webpack_require__.d(__webpack_exports__,"get",function(){return get});__webpack_require__.d(__webpack_exports__,"decorate",function(){return decorate});__webpack_require__.d(__webpack_exports__,"configure",function(){return configure});__webpack_require__.d(__webpack_exports__,"onBecomeObserved",function(){return onBecomeObserved});__webpack_require__.d(__webpack_exports__,"onBecomeUnobserved",function(){return onBecomeUnobserved});__webpack_require__.d(__webpack_exports__,"flow",function(){return flow});__webpack_require__.d(__webpack_exports__,"toJS",function(){return toJS});__webpack_require__.d(__webpack_exports__,"trace",function(){return trace});__webpack_require__.d(__webpack_exports__,"getDependencyTree",function(){return getDependencyTree});__webpack_require__.d(__webpack_exports__,"getObserverTree",function(){return getObserverTree});__webpack_require__.d(__webpack_exports__,"_resetGlobalState",function(){return resetGlobalState});__webpack_require__.d(__webpack_exports__,"_getGlobalState",function(){return getGlobalState});__webpack_require__.d(__webpack_exports__,"getDebugName",function(){return getDebugName});__webpack_require__.d(__webpack_exports__,"getAtom",function(){return getAtom});__webpack_require__.d(__webpack_exports__,"_getAdministration",function(){return getAdministration});__webpack_require__.d(__webpack_exports__,"_allowStateChanges",function(){return allowStateChanges});__webpack_require__.d(__webpack_exports__,"isArrayLike",function(){return isArrayLike});__webpack_require__.d(__webpack_exports__,"_isComputingDerivation",function(){return isComputingDerivation});__webpack_require__.d(__webpack_exports__,"onReactionError",function(){return onReactionError});__webpack_require__.d(__webpack_exports__,"_interceptReads",function(){return interceptReads});
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */var extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b}||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p]};function __extends(d,b){extendStatics(d,b);function __(){this.constructor=d}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __)}var __assign=Object.assign||function __assign(t){for(var s,i=1,n=arguments.length;i<n;i++){s=arguments[i];for(var p in s)if(Object.prototype.hasOwnProperty.call(s,p))t[p]=s[p]}return t};function __read(o,n){var m=typeof Symbol==="function"&&o[Symbol.iterator];if(!m)return o;var i=m.call(o),r,ar=[],e;try{while((n===void 0||n-- >0)&&!(r=i.next()).done)ar.push(r.value)}catch(error){e={error:error}}finally{try{if(r&&!r.done&&(m=i["return"]))m.call(i)}finally{if(e)throw e.error}}return ar}function __spread(){for(var ar=[],i=0;i<arguments.length;i++)ar=ar.concat(__read(arguments[i]));return ar}var enumerableDescriptorCache={};var nonEnumerableDescriptorCache={};function createPropertyInitializerDescriptor(prop,enumerable){var cache=enumerable?enumerableDescriptorCache:nonEnumerableDescriptorCache;return cache[prop]||(cache[prop]={configurable:true,enumerable:enumerable,get:function(){initializeInstance(this);return this[prop]},set:function(value){initializeInstance(this);this[prop]=value}})}function initializeInstance(target){if(target.__mobxDidRunLazyInitializers===true)return;var decorators=target.__mobxDecorators;if(decorators){addHiddenProp(target,"__mobxDidRunLazyInitializers",true);for(var key in decorators){var d=decorators[key];d.propertyCreator(target,d.prop,d.descriptor,d.decoratorTarget,d.decoratorArguments)}}}function createPropDecorator(propertyInitiallyEnumerable,propertyCreator){return function decoratorFactory(){var decoratorArguments;var decorator=function decorate(target,prop,descriptor,applyImmediately){if(applyImmediately===true){propertyCreator(target,prop,descriptor,target,decoratorArguments);return null}if(false){}if(!Object.prototype.hasOwnProperty.call(target,"__mobxDecorators")){var inheritedDecorators=target.__mobxDecorators;addHiddenProp(target,"__mobxDecorators",__assign({},inheritedDecorators))}target.__mobxDecorators[prop]={prop:prop,propertyCreator:propertyCreator,descriptor:descriptor,decoratorTarget:target,decoratorArguments:decoratorArguments};return createPropertyInitializerDescriptor(prop,propertyInitiallyEnumerable)};if(quacksLikeADecorator(arguments)){decoratorArguments=EMPTY_ARRAY;return decorator.apply(null,arguments)}else{decoratorArguments=Array.prototype.slice.call(arguments);return decorator}}}function quacksLikeADecorator(args){return(args.length===2||args.length===3)&&typeof args[1]==="string"||args.length===4&&args[3]===true}function isSpyEnabled(){return!!globalState.spyListeners.length}function spyReport(event){if(!globalState.spyListeners.length)return;var listeners=globalState.spyListeners;for(var i=0,l=listeners.length;i<l;i++)listeners[i](event)}function spyReportStart(event){var change=__assign({},event,{spyReportStart:true});spyReport(change)}var END_EVENT={spyReportEnd:true};function spyReportEnd(change){if(change)spyReport(__assign({},change,{spyReportEnd:true}));else spyReport(END_EVENT)}function spy(listener){globalState.spyListeners.push(listener);return once(function(){globalState.spyListeners=globalState.spyListeners.filter(function(l){return l!==listener})})}function createAction(actionName,fn){if(false){}var res=function(){return executeAction(actionName,fn,this,arguments)};res.isMobxAction=true;return res}function executeAction(actionName,fn,scope,args){var runInfo=startAction(actionName,fn,scope,args);try{return fn.apply(scope,args)}finally{endAction(runInfo)}}function startAction(actionName,fn,scope,args){var notifySpy=isSpyEnabled()&&!!actionName;var startTime=0;if(notifySpy){startTime=Date.now();var l=args&&args.length||0;var flattendArgs=new Array(l);if(l>0)for(var i=0;i<l;i++)flattendArgs[i]=args[i];spyReportStart({type:"action",name:actionName,object:scope,arguments:flattendArgs})}var prevDerivation=untrackedStart();startBatch();var prevAllowStateChanges=allowStateChangesStart(true);return{prevDerivation:prevDerivation,prevAllowStateChanges:prevAllowStateChanges,notifySpy:notifySpy,startTime:startTime}}function endAction(runInfo){allowStateChangesEnd(runInfo.prevAllowStateChanges);endBatch();untrackedEnd(runInfo.prevDerivation);if(runInfo.notifySpy)spyReportEnd({time:Date.now()-runInfo.startTime})}function allowStateChanges(allowStateChanges,func){var prev=allowStateChangesStart(allowStateChanges);var res;try{res=func()}finally{allowStateChangesEnd(prev)}return res}function allowStateChangesStart(allowStateChanges){var prev=globalState.allowStateChanges;globalState.allowStateChanges=allowStateChanges;return prev}function allowStateChangesEnd(prev){globalState.allowStateChanges=prev}function dontReassignFields(){fail$1("production"!=="production"&&"@action fields are not reassignable")}function namedActionDecorator(name){return function(target,prop,descriptor){if(descriptor){if(false){}if(descriptor.value){return{value:createAction(name,descriptor.value),enumerable:false,configurable:true,writable:true}}var initializer_1=descriptor.initializer;return{enumerable:false,configurable:true,writable:true,initializer:function(){return createAction(name,initializer_1.call(this))}}}return actionFieldDecorator(name).apply(this,arguments)}}function actionFieldDecorator(name){return function(target,prop,descriptor){Object.defineProperty(target,prop,{configurable:true,enumerable:false,get:function(){return undefined},set:function(value){addHiddenFinalProp(this,prop,action(name,value))}})}}function boundActionDecorator(target,propertyName,descriptor,applyToInstance){if(applyToInstance===true){defineBoundAction(target,propertyName,descriptor.value);return null}if(descriptor){return{configurable:true,enumerable:false,get:function(){defineBoundAction(this,propertyName,descriptor.value||descriptor.initializer.call(this));return this[propertyName]},set:dontReassignFields}}return{enumerable:false,configurable:true,set:function(v){defineBoundAction(this,propertyName,v)},get:function(){return undefined}}}var action=function action(arg1,arg2,arg3,arg4){if(arguments.length===1&&typeof arg1==="function")return createAction(arg1.name||"<unnamed action>",arg1);if(arguments.length===2&&typeof arg2==="function")return createAction(arg1,arg2);if(arguments.length===1&&typeof arg1==="string")return namedActionDecorator(arg1);if(arg4===true){arg1[arg2]=createAction(arg1.name||arg2,arg3.value)}else{return namedActionDecorator(arg2).apply(null,arguments)}};action.bound=boundActionDecorator;function runInAction(arg1,arg2){var actionName=typeof arg1==="string"?arg1:arg1.name||"<unnamed action>";var fn=typeof arg1==="function"?arg1:arg2;if(false){}return executeAction(actionName,fn,this,undefined)}function isAction(thing){return typeof thing==="function"&&thing.isMobxAction===true}function defineBoundAction(target,propertyName,fn){addHiddenProp(target,propertyName,createAction(propertyName,fn.bind(target)))}var toString=Object.prototype.toString;function deepEqual(a,b){return eq(a,b)}function eq(a,b,aStack,bStack){if(a===b)return a!==0||1/a===1/b;if(a==null||b==null)return false;if(a!==a)return b!==b;var type=typeof a;if(type!=="function"&&type!=="object"&&typeof b!="object")return false;return deepEq(a,b,aStack,bStack)}function deepEq(a,b,aStack,bStack){a=unwrap(a);b=unwrap(b);var className=toString.call(a);if(className!==toString.call(b))return false;switch(className){case"[object RegExp]":case"[object String]":return""+a===""+b;case"[object Number]":if(+a!==+a)return+b!==+b;return+a===0?1/+a===1/b:+a===+b;case"[object Date]":case"[object Boolean]":return+a===+b;case"[object Symbol]":return typeof Symbol!=="undefined"&&Symbol.valueOf.call(a)===Symbol.valueOf.call(b)}var areArrays=className==="[object Array]";if(!areArrays){if(typeof a!="object"||typeof b!="object")return false;var aCtor=a.constructor,bCtor=b.constructor;if(aCtor!==bCtor&&!(typeof aCtor==="function"&&aCtor instanceof aCtor&&typeof bCtor==="function"&&bCtor instanceof bCtor)&&("constructor"in a&&"constructor"in b)){return false}}aStack=aStack||[];bStack=bStack||[];var length=aStack.length;while(length--){if(aStack[length]===a)return bStack[length]===b}aStack.push(a);bStack.push(b);if(areArrays){length=a.length;if(length!==b.length)return false;while(length--){if(!eq(a[length],b[length],aStack,bStack))return false}}else{var keys$$1=Object.keys(a),key;length=keys$$1.length;if(Object.keys(b).length!==length)return false;while(length--){key=keys$$1[length];if(!(has$$1(b,key)&&eq(a[key],b[key],aStack,bStack)))return false}}aStack.pop();bStack.pop();return true}function unwrap(a){if(isObservableArray(a))return a.peek();if(isES6Map(a)||isObservableMap(a))return iteratorToArray(a.entries());return a}function has$$1(a,key){return Object.prototype.hasOwnProperty.call(a,key)}function identityComparer(a,b){return a===b}function structuralComparer(a,b){return deepEqual(a,b)}function defaultComparer(a,b){return areBothNaN(a,b)||identityComparer(a,b)}var comparer={identity:identityComparer,structural:structuralComparer,default:defaultComparer};function autorun(view,opts){if(opts===void 0){opts=EMPTY_OBJECT}if(false){}var name=opts&&opts.name||view.name||"Autorun@"+getNextId();var runSync=!opts.scheduler&&!opts.delay;var reaction;if(runSync){reaction=new Reaction(name,function(){this.track(reactionRunner)},opts.onError)}else{var scheduler_1=createSchedulerFromOptions(opts);var isScheduled_1=false;reaction=new Reaction(name,function(){if(!isScheduled_1){isScheduled_1=true;scheduler_1(function(){isScheduled_1=false;if(!reaction.isDisposed)reaction.track(reactionRunner)})}},opts.onError)}function reactionRunner(){view(reaction)}reaction.schedule();return reaction.getDisposer()}var run=function(f){return f()};function createSchedulerFromOptions(opts){return opts.scheduler?opts.scheduler:opts.delay?function(f){return setTimeout(f,opts.delay)}:run}function reaction(expression,effect,opts){if(opts===void 0){opts=EMPTY_OBJECT}if(typeof opts==="boolean"){opts={fireImmediately:opts};deprecated("Using fireImmediately as argument is deprecated. Use '{ fireImmediately: true }' instead")}if(false){}var name=opts.name||"Reaction@"+getNextId();var effectAction=action(name,opts.onError?wrapErrorHandler(opts.onError,effect):effect);var runSync=!opts.scheduler&&!opts.delay;var scheduler=createSchedulerFromOptions(opts);var firstTime=true;var isScheduled=false;var value;var equals=opts.compareStructural?comparer.structural:opts.equals||comparer.default;var r=new Reaction(name,function(){if(firstTime||runSync){reactionRunner()}else if(!isScheduled){isScheduled=true;scheduler(reactionRunner)}},opts.onError);function reactionRunner(){isScheduled=false;if(r.isDisposed)return;var changed=false;r.track(function(){var nextValue=expression(r);changed=firstTime||!equals(value,nextValue);value=nextValue});if(firstTime&&opts.fireImmediately)effectAction(value,r);if(!firstTime&&changed===true)effectAction(value,r);if(firstTime)firstTime=false}r.schedule();return r.getDisposer()}function wrapErrorHandler(errorHandler,baseFn){return function(){try{return baseFn.apply(this,arguments)}catch(e){errorHandler.call(this,e)}}}var ComputedValue=function(){function ComputedValue(options){var _this=this;this.dependenciesState=IDerivationState.NOT_TRACKING;this.observing=[];this.newObserving=null;this.isBeingObserved=false;this.isPendingUnobservation=false;this.observers=[];this.observersIndexes={};this.diffValue=0;this.runId=0;this.lastAccessedBy=0;this.lowestObserverState=IDerivationState.UP_TO_DATE;this.unboundDepsCount=0;this.__mapid="#"+getNextId();this.value=new CaughtException(null);this.isComputing=false;this.isRunningSetter=false;this.isTracing=TraceMode.NONE;if(false){}this.derivation=options.get;this.name=options.name||"ComputedValue@"+getNextId();if(options.set)this.setter=createAction(this.name+"-setter",options.set);this.equals=options.equals||(options.compareStructural||options.struct?comparer.structural:comparer.default);this.scope=options.context;this.requiresReaction=!!options.requiresReaction;if(options.keepAlive===true){autorun(function(){return _this.get()})}}ComputedValue.prototype.onBecomeStale=function(){propagateMaybeChanged(this)};ComputedValue.prototype.onBecomeUnobserved=function(){};ComputedValue.prototype.onBecomeObserved=function(){};ComputedValue.prototype.get=function(){if(this.isComputing)fail$1("Cycle detected in computation "+this.name+": "+this.derivation);if(globalState.inBatch===0){if(shouldCompute(this)){this.warnAboutUntrackedRead();startBatch();this.value=this.computeValue(false);endBatch()}}else{reportObserved(this);if(shouldCompute(this))if(this.trackAndCompute())propagateChangeConfirmed(this)}var result=this.value;if(isCaughtException(result))throw result.cause;return result};ComputedValue.prototype.peek=function(){var res=this.computeValue(false);if(isCaughtException(res))throw res.cause;return res};ComputedValue.prototype.set=function(value){if(this.setter){invariant(!this.isRunningSetter,"The setter of computed value '"+this.name+"' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?");this.isRunningSetter=true;try{this.setter.call(this.scope,value)}finally{this.isRunningSetter=false}}else invariant(false,"production"!=="production"&&"[ComputedValue '"+this.name+"'] It is not possible to assign a new value to a computed value.")};ComputedValue.prototype.trackAndCompute=function(){if(isSpyEnabled()){spyReport({object:this.scope,type:"compute",name:this.name})}var oldValue=this.value;var wasSuspended=this.dependenciesState===IDerivationState.NOT_TRACKING;var newValue=this.computeValue(true);var changed=wasSuspended||isCaughtException(oldValue)||isCaughtException(newValue)||!this.equals(oldValue,newValue);if(changed){this.value=newValue}return changed};ComputedValue.prototype.computeValue=function(track){this.isComputing=true;globalState.computationDepth++;var res;if(track){res=trackDerivedFunction(this,this.derivation,this.scope)}else{if(globalState.disableErrorBoundaries===true){res=this.derivation.call(this.scope)}else{try{res=this.derivation.call(this.scope)}catch(e){res=new CaughtException(e)}}}globalState.computationDepth--;this.isComputing=false;return res};ComputedValue.prototype.suspend=function(){clearObserving(this);this.value=undefined};ComputedValue.prototype.observe=function(listener,fireImmediately){var _this=this;var firstTime=true;var prevValue=undefined;return autorun(function(){var newValue=_this.get();if(!firstTime||fireImmediately){var prevU=untrackedStart();listener({type:"update",object:_this,newValue:newValue,oldValue:prevValue});untrackedEnd(prevU)}firstTime=false;prevValue=newValue})};ComputedValue.prototype.warnAboutUntrackedRead=function(){if(true)return;if(this.requiresReaction===true){fail$1("[mobx] Computed value "+this.name+" is read outside a reactive context")}if(this.isTracing!==TraceMode.NONE){console.log("[mobx.trace] '"+this.name+"' is being read outside a reactive context. Doing a full recompute")}if(globalState.computedRequiresReaction){console.warn("[mobx] Computed value "+this.name+" is being read outside a reactive context. Doing a full recompute")}};ComputedValue.prototype.toJSON=function(){return this.get()};ComputedValue.prototype.toString=function(){return this.name+"["+this.derivation.toString()+"]"};ComputedValue.prototype.valueOf=function(){return toPrimitive(this.get())};return ComputedValue}();ComputedValue.prototype[primitiveSymbol()]=ComputedValue.prototype.valueOf;var isComputedValue=createInstanceofPredicate("ComputedValue",ComputedValue);function hasInterceptors(interceptable){return interceptable.interceptors!==undefined&&interceptable.interceptors.length>0}function registerInterceptor(interceptable,handler){var interceptors=interceptable.interceptors||(interceptable.interceptors=[]);interceptors.push(handler);return once(function(){var idx=interceptors.indexOf(handler);if(idx!==-1)interceptors.splice(idx,1)})}function interceptChange(interceptable,change){var prevU=untrackedStart();try{var interceptors=interceptable.interceptors;if(interceptors)for(var i=0,l=interceptors.length;i<l;i++){change=interceptors[i](change);invariant(!change||change.type,"Intercept handlers should return nothing or a change object");if(!change)break}return change}finally{untrackedEnd(prevU)}}function hasListeners(listenable){return listenable.changeListeners!==undefined&&listenable.changeListeners.length>0}function registerListener(listenable,handler){var listeners=listenable.changeListeners||(listenable.changeListeners=[]);listeners.push(handler);return once(function(){var idx=listeners.indexOf(handler);if(idx!==-1)listeners.splice(idx,1)})}function notifyListeners(listenable,change){var prevU=untrackedStart();var listeners=listenable.changeListeners;if(!listeners)return;listeners=listeners.slice();for(var i=0,l=listeners.length;i<l;i++){listeners[i](change)}untrackedEnd(prevU)}var UNCHANGED={};declareAtom();var ObservableValue=function(_super){__extends(ObservableValue,_super);function ObservableValue(value,enhancer,name,notifySpy){if(name===void 0){name="ObservableValue@"+getNextId()}if(notifySpy===void 0){notifySpy=true}var _this=_super.call(this,name)||this;_this.enhancer=enhancer;_this.hasUnreportedChange=false;_this.value=enhancer(value,undefined,name);if(notifySpy&&isSpyEnabled()){spyReport({type:"create",name:_this.name,newValue:""+_this.value})}return _this}ObservableValue.prototype.dehanceValue=function(value){if(this.dehancer!==undefined)return this.dehancer(value);return value};ObservableValue.prototype.set=function(newValue){var oldValue=this.value;newValue=this.prepareNewValue(newValue);if(newValue!==UNCHANGED){var notifySpy=isSpyEnabled();if(notifySpy){spyReportStart({type:"update",name:this.name,newValue:newValue,oldValue:oldValue})}this.setNewValue(newValue);if(notifySpy)spyReportEnd()}};ObservableValue.prototype.prepareNewValue=function(newValue){checkIfStateModificationsAreAllowed(this);if(hasInterceptors(this)){var change=interceptChange(this,{object:this,type:"update",newValue:newValue});if(!change)return UNCHANGED;newValue=change.newValue}newValue=this.enhancer(newValue,this.value,this.name);return this.value!==newValue?newValue:UNCHANGED};ObservableValue.prototype.setNewValue=function(newValue){var oldValue=this.value;this.value=newValue;this.reportChanged();if(hasListeners(this)){notifyListeners(this,{type:"update",object:this,newValue:newValue,oldValue:oldValue})}};ObservableValue.prototype.get=function(){this.reportObserved();return this.dehanceValue(this.value)};ObservableValue.prototype.intercept=function(handler){return registerInterceptor(this,handler)};ObservableValue.prototype.observe=function(listener,fireImmediately){if(fireImmediately)listener({object:this,type:"update",newValue:this.value,oldValue:undefined});return registerListener(this,listener)};ObservableValue.prototype.toJSON=function(){return this.get()};ObservableValue.prototype.toString=function(){return this.name+"["+this.value+"]"};ObservableValue.prototype.valueOf=function(){return toPrimitive(this.get())};return ObservableValue}(Atom);ObservableValue.prototype[primitiveSymbol()]=ObservableValue.prototype.valueOf;var isObservableValue=createInstanceofPredicate("ObservableValue",ObservableValue);var ObservableObjectAdministration=function(){function ObservableObjectAdministration(target,name,defaultEnhancer){this.target=target;this.name=name;this.defaultEnhancer=defaultEnhancer;this.values={}}ObservableObjectAdministration.prototype.read=function(owner,key){if(this.target!==owner){this.illegalAccess(owner,key);return}return this.values[key].get()};ObservableObjectAdministration.prototype.write=function(owner,key,newValue){var instance=this.target;if(instance!==owner){this.illegalAccess(owner,key);return}var observable=this.values[key];if(observable instanceof ComputedValue){observable.set(newValue);return}if(hasInterceptors(this)){var change=interceptChange(this,{type:"update",object:instance,name:key,newValue:newValue});if(!change)return;newValue=change.newValue}newValue=observable.prepareNewValue(newValue);if(newValue!==UNCHANGED){var notify=hasListeners(this);var notifySpy=isSpyEnabled();var change=notify||notifySpy?{type:"update",object:instance,oldValue:observable.value,name:key,newValue:newValue}:null;if(notifySpy)spyReportStart(__assign({},change,{name:this.name,key:key}));observable.setNewValue(newValue);if(notify)notifyListeners(this,change);if(notifySpy)spyReportEnd()}};ObservableObjectAdministration.prototype.remove=function(key){if(!this.values[key])return;var target=this.target;if(hasInterceptors(this)){var change=interceptChange(this,{object:target,name:key,type:"remove"});if(!change)return}try{startBatch();var notify=hasListeners(this);var notifySpy=isSpyEnabled();var oldValue=this.values[key].get();if(this.keys)this.keys.remove(key);delete this.values[key];delete this.target[key];var change=notify||notifySpy?{type:"remove",object:target,oldValue:oldValue,name:key}:null;if(notifySpy)spyReportStart(__assign({},change,{name:this.name,key:key}));if(notify)notifyListeners(this,change);if(notifySpy)spyReportEnd()}finally{endBatch()}};ObservableObjectAdministration.prototype.illegalAccess=function(owner,propName){return fail$1("Property '"+propName+"' of '"+owner+"' was accessed through the prototype chain. Use 'decorate' instead to declare the prop or access it statically through it's owner")};ObservableObjectAdministration.prototype.observe=function(callback,fireImmediately){"production"!=="production"&&invariant(fireImmediately!==true,"`observe` doesn't support the fire immediately property for observable objects.");return registerListener(this,callback)};ObservableObjectAdministration.prototype.intercept=function(handler){return registerInterceptor(this,handler)};ObservableObjectAdministration.prototype.getKeys=function(){var _this=this;if(this.keys===undefined){this.keys=new ObservableArray(Object.keys(this.values).filter(function(key){return _this.values[key]instanceof ObservableValue}),referenceEnhancer,"keys("+this.name+")",true)}return this.keys.slice()};return ObservableObjectAdministration}();function asObservableObject(target,name,defaultEnhancer){if(name===void 0){name=""}if(defaultEnhancer===void 0){defaultEnhancer=deepEnhancer}var adm=target.$mobx;if(adm)return adm;"production"!=="production"&&invariant(Object.isExtensible(target),"Cannot make the designated object observable; it is not extensible");if(!isPlainObject(target))name=(target.constructor.name||"ObservableObject")+"@"+getNextId();if(!name)name="ObservableObject@"+getNextId();adm=new ObservableObjectAdministration(target,name,defaultEnhancer);addHiddenFinalProp(target,"$mobx",adm);return adm}function defineObservableProperty(target,propName,newValue,enhancer){var adm=asObservableObject(target);assertPropertyConfigurable(target,propName);if(hasInterceptors(adm)){var change=interceptChange(adm,{object:target,name:propName,type:"add",newValue:newValue});if(!change)return;newValue=change.newValue}var observable=adm.values[propName]=new ObservableValue(newValue,enhancer,adm.name+"."+propName,false);newValue=observable.value;Object.defineProperty(target,propName,generateObservablePropConfig(propName));if(adm.keys)adm.keys.push(propName);notifyPropertyAddition(adm,target,propName,newValue)}function defineComputedProperty(target,propName,options){var adm=asObservableObject(target);options.name=adm.name+"."+propName;options.context=target;adm.values[propName]=new ComputedValue(options);Object.defineProperty(target,propName,generateComputedPropConfig(propName))}var observablePropertyConfigs={};var computedPropertyConfigs={};function generateObservablePropConfig(propName){return observablePropertyConfigs[propName]||(observablePropertyConfigs[propName]={configurable:true,enumerable:true,get:function(){return this.$mobx.read(this,propName)},set:function(v){this.$mobx.write(this,propName,v)}})}function getAdministrationForComputedPropOwner(owner){var adm=owner.$mobx;if(!adm){initializeInstance(owner);return owner.$mobx}return adm}function generateComputedPropConfig(propName){return computedPropertyConfigs[propName]||(computedPropertyConfigs[propName]={configurable:true,enumerable:false,get:function(){return getAdministrationForComputedPropOwner(this).read(this,propName)},set:function(v){getAdministrationForComputedPropOwner(this).write(this,propName,v)}})}function notifyPropertyAddition(adm,object,key,newValue){var notify=hasListeners(adm);var notifySpy=isSpyEnabled();var change=notify||notifySpy?{type:"add",object:object,name:key,newValue:newValue}:null;if(notifySpy)spyReportStart(__assign({},change,{name:adm.name,key:key}));if(notify)notifyListeners(adm,change);if(notifySpy)spyReportEnd()}var isObservableObjectAdministration=createInstanceofPredicate("ObservableObjectAdministration",ObservableObjectAdministration);function isObservableObject(thing){if(isObject(thing)){initializeInstance(thing);return isObservableObjectAdministration(thing.$mobx)}return false}function createDecoratorForEnhancer(enhancer){var decorator=createPropDecorator(true,function(target,propertyName,descriptor,_decoratorTarget,decoratorArgs){if(false){}var initialValue=descriptor?descriptor.initializer?descriptor.initializer.call(target):descriptor.value:undefined;defineObservableProperty(target,propertyName,initialValue,enhancer)});var res=typeof process!=="undefined"&&process.env&&"production"!=="production"?function observableDecorator(){if(arguments.length<2)return fail$1("Incorrect decorator invocation. @observable decorator doesn't expect any arguments");return decorator.apply(null,arguments)}:decorator;res.enhancer=enhancer;return res}function _isObservable(value,property){if(value===null||value===undefined)return false;if(property!==undefined){if(false){}if(isObservableObject(value)){var o=value.$mobx;return o.values&&!!o.values[property]}return false}return isObservableObject(value)||!!value.$mobx||isAtom(value)||isReaction(value)||isComputedValue(value)}function isObservable(value){if(arguments.length!==1)fail$1("production"!=="production"&&"isObservable expects only 1 argument. Use isObservableProp to inspect the observability of a property");return _isObservable(value)}function isObservableProp(value,propName){if(typeof propName!=="string")return fail$1("production"!=="production"&&"expected a property name as second argument");return _isObservable(value,propName)}function _isComputed(value,property){if(value===null||value===undefined)return false;if(property!==undefined){if(isObservableObject(value)===false)return false;if(!value.$mobx.values[property])return false;var atom=getAtom(value,property);return isComputedValue(atom)}return isComputedValue(value)}function isComputed(value){if(arguments.length>1)return fail$1("production"!=="production"&&"isComputed expects only 1 argument. Use isObservableProp to inspect the observability of a property");return _isComputed(value)}function isComputedProp(value,propName){if(typeof propName!=="string")return fail$1("production"!=="production"&&"isComputed expected a property name as second argument");return _isComputed(value,propName)}var computedDecorator=createPropDecorator(false,function(instance,propertyName,descriptor,decoratorTarget,decoratorArgs){var get=descriptor.get,set=descriptor.set;var options=decoratorArgs[0]||{};defineComputedProperty(instance,propertyName,__assign({},options,{get:get,set:set}))});var computedStructDecorator=computedDecorator({equals:comparer.structural});var computed=function computed(arg1,arg2,arg3){if(typeof arg2==="string"){return computedDecorator.apply(null,arguments)}if(arg1!==null&&typeof arg1==="object"&&arguments.length===1){return computedDecorator.apply(null,arguments)}if(false){}var opts=typeof arg2==="object"?arg2:{};opts.get=arg1;opts.set=typeof arg2==="function"?arg2:opts.set;opts.name=opts.name||arg1.name||"";return new ComputedValue(opts)};computed.struct=computedStructDecorator;function extendShallowObservable(target,properties,decorators){deprecated("'extendShallowObservable' is deprecated, use 'extendObservable(target, props, { deep: false })' instead");return extendObservable(target,properties,decorators,shallowCreateObservableOptions)}function extendObservable(target,properties,decorators,options){if(false){var key}options=asCreateObservableOptions(options);var defaultDecorator=options.defaultDecorator||(options.deep===false?refDecorator:deepDecorator);asObservableObject(target,options.name,defaultDecorator.enhancer);startBatch();try{for(var key in properties){var descriptor=Object.getOwnPropertyDescriptor(properties,key);if(false){}var decorator=decorators&&key in decorators?decorators[key]:descriptor.get?computedDecorator:defaultDecorator;if(false){}var resultDescriptor=decorator(target,key,descriptor,true);if(resultDescriptor)Object.defineProperty(target,key,resultDescriptor)}}finally{endBatch()}return target}var defaultCreateObservableOptions={deep:true,name:undefined,defaultDecorator:undefined};var shallowCreateObservableOptions={deep:false,name:undefined,defaultDecorator:undefined};Object.freeze(defaultCreateObservableOptions);Object.freeze(shallowCreateObservableOptions);function assertValidOption(key){if(!/^(deep|name|defaultDecorator)$/.test(key))fail$1("invalid option for (extend)observable: "+key)}function asCreateObservableOptions(thing){if(thing===null||thing===undefined)return defaultCreateObservableOptions;if(typeof thing==="string")return{name:thing,deep:true};if(false){}return thing}function getEnhancerFromOptions(options){return options.defaultDecorator?options.defaultDecorator.enhancer:options.deep===false?referenceEnhancer:deepEnhancer}var deepDecorator=createDecoratorForEnhancer(deepEnhancer);var shallowDecorator=createDecoratorForEnhancer(shallowEnhancer);var refDecorator=createDecoratorForEnhancer(referenceEnhancer);var refStructDecorator=createDecoratorForEnhancer(refStructEnhancer);function createObservable(v,arg2,arg3){if(typeof arguments[1]==="string"){return deepDecorator.apply(null,arguments)}if(isObservable(v))return v;var res=isPlainObject(v)?observable.object(v,arg2,arg3):Array.isArray(v)?observable.array(v,arg2):isES6Map(v)?observable.map(v,arg2):v;if(res!==v)return res;fail$1("production"!=="production"&&"The provided value could not be converted into an observable. If you want just create an observable reference to the object use 'observable.box(value)'")}var observableFactories={box:function(value,options){if(arguments.length>2)incorrectlyUsedAsDecorator("box");var o=asCreateObservableOptions(options);return new ObservableValue(value,getEnhancerFromOptions(o),o.name)},shallowBox:function(value,name){if(arguments.length>2)incorrectlyUsedAsDecorator("shallowBox");deprecated("observable.shallowBox","observable.box(value, { deep: false })");return observable.box(value,{name:name,deep:false})},array:function(initialValues,options){if(arguments.length>2)incorrectlyUsedAsDecorator("array");var o=asCreateObservableOptions(options);return new ObservableArray(initialValues,getEnhancerFromOptions(o),o.name)},shallowArray:function(initialValues,name){if(arguments.length>2)incorrectlyUsedAsDecorator("shallowArray");deprecated("observable.shallowArray","observable.array(values, { deep: false })");return observable.array(initialValues,{name:name,deep:false})},map:function(initialValues,options){if(arguments.length>2)incorrectlyUsedAsDecorator("map");var o=asCreateObservableOptions(options);return new ObservableMap(initialValues,getEnhancerFromOptions(o),o.name)},shallowMap:function(initialValues,name){if(arguments.length>2)incorrectlyUsedAsDecorator("shallowMap");deprecated("observable.shallowMap","observable.map(values, { deep: false })");return observable.map(initialValues,{name:name,deep:false})},object:function(props,decorators,options){if(typeof arguments[1]==="string")incorrectlyUsedAsDecorator("object");var o=asCreateObservableOptions(options);return extendObservable({},props,decorators,o)},shallowObject:function(props,name){if(typeof arguments[1]==="string")incorrectlyUsedAsDecorator("shallowObject");deprecated("observable.shallowObject","observable.object(values, {}, { deep: false })");return observable.object(props,{},{name:name,deep:false})},ref:refDecorator,shallow:shallowDecorator,deep:deepDecorator,struct:refStructDecorator};var observable=createObservable;Object.keys(observableFactories).forEach(function(name){return observable[name]=observableFactories[name]});function incorrectlyUsedAsDecorator(methodName){fail$1("Expected one or two arguments to observable."+methodName+". Did you accidentally try to use observable."+methodName+" as decorator?")}function deepEnhancer(v,_,name){if(isObservable(v))return v;if(Array.isArray(v))return observable.array(v,{name:name});if(isPlainObject(v))return observable.object(v,undefined,{name:name});if(isES6Map(v))return observable.map(v,{name:name});return v}function shallowEnhancer(v,_,name){if(v===undefined||v===null)return v;if(isObservableObject(v)||isObservableArray(v)||isObservableMap(v))return v;if(Array.isArray(v))return observable.array(v,{name:name,deep:false});if(isPlainObject(v))return observable.object(v,undefined,{name:name,deep:false});if(isES6Map(v))return observable.map(v,{name:name,deep:false});return fail$1("production"!=="production"&&"The shallow modifier / decorator can only used in combination with arrays, objects and maps")}function referenceEnhancer(newValue){return newValue}function refStructEnhancer(v,oldValue,name){if(false){}if(deepEqual(v,oldValue))return oldValue;return v}function iteratorSymbol(){return typeof Symbol==="function"&&Symbol.iterator||"@@iterator"}function declareIterator(prototType,iteratorFactory){addHiddenFinalProp(prototType,iteratorSymbol(),iteratorFactory)}function makeIterable(iterator){iterator[iteratorSymbol()]=self;return iterator}function self(){return this}function transaction(action,thisArg){if(thisArg===void 0){thisArg=undefined}startBatch();try{return action.apply(thisArg)}finally{endBatch()}}var ObservableMapMarker={};var ObservableMap=function(){function ObservableMap(initialData,enhancer,name){if(enhancer===void 0){enhancer=deepEnhancer}if(name===void 0){name="ObservableMap@"+getNextId()}this.enhancer=enhancer;this.name=name;this.$mobx=ObservableMapMarker;this._keys=new ObservableArray(undefined,referenceEnhancer,this.name+".keys()",true);if(typeof Map!=="function"){throw new Error("mobx.map requires Map polyfill for the current browser. Check babel-polyfill or core-js/es6/map.js")}this._data=new Map;this._hasMap=new Map;this.merge(initialData)}ObservableMap.prototype._has=function(key){return this._data.has(key)};ObservableMap.prototype.has=function(key){if(this._hasMap.has(key))return this._hasMap.get(key).get();return this._updateHasMapEntry(key,false).get()};ObservableMap.prototype.set=function(key,value){var hasKey=this._has(key);if(hasInterceptors(this)){var change=interceptChange(this,{type:hasKey?"update":"add",object:this,newValue:value,name:key});if(!change)return this;value=change.newValue}if(hasKey){this._updateValue(key,value)}else{this._addValue(key,value)}return this};ObservableMap.prototype.delete=function(key){var _this=this;if(hasInterceptors(this)){var change=interceptChange(this,{type:"delete",object:this,name:key});if(!change)return false}if(this._has(key)){var notifySpy=isSpyEnabled();var notify=hasListeners(this);var change=notify||notifySpy?{type:"delete",object:this,oldValue:this._data.get(key).value,name:key}:null;if(notifySpy)spyReportStart(__assign({},change,{name:this.name,key:key}));transaction(function(){_this._keys.remove(key);_this._updateHasMapEntry(key,false);var observable=_this._data.get(key);observable.setNewValue(undefined);_this._data.delete(key)});if(notify)notifyListeners(this,change);if(notifySpy)spyReportEnd();return true}return false};ObservableMap.prototype._updateHasMapEntry=function(key,value){var entry=this._hasMap.get(key);if(entry){entry.setNewValue(value)}else{entry=new ObservableValue(value,referenceEnhancer,this.name+"."+key+"?",false);this._hasMap.set(key,entry)}return entry};ObservableMap.prototype._updateValue=function(key,newValue){var observable=this._data.get(key);newValue=observable.prepareNewValue(newValue);if(newValue!==UNCHANGED){var notifySpy=isSpyEnabled();var notify=hasListeners(this);var change=notify||notifySpy?{type:"update",object:this,oldValue:observable.value,name:key,newValue:newValue}:null;if(notifySpy)spyReportStart(__assign({},change,{name:this.name,key:key}));observable.setNewValue(newValue);if(notify)notifyListeners(this,change);if(notifySpy)spyReportEnd()}};ObservableMap.prototype._addValue=function(key,newValue){var _this=this;transaction(function(){var observable=new ObservableValue(newValue,_this.enhancer,_this.name+"."+key,false);_this._data.set(key,observable);newValue=observable.value;_this._updateHasMapEntry(key,true);_this._keys.push(key)});var notifySpy=isSpyEnabled();var notify=hasListeners(this);var change=notify||notifySpy?{type:"add",object:this,name:key,newValue:newValue}:null;if(notifySpy)spyReportStart(__assign({},change,{name:this.name,key:key}));if(notify)notifyListeners(this,change);if(notifySpy)spyReportEnd()};ObservableMap.prototype.get=function(key){if(this.has(key))return this.dehanceValue(this._data.get(key).get());return this.dehanceValue(undefined)};ObservableMap.prototype.dehanceValue=function(value){if(this.dehancer!==undefined){return this.dehancer(value)}return value};ObservableMap.prototype.keys=function(){return this._keys[iteratorSymbol()]()};ObservableMap.prototype.values=function(){var self=this;var nextIndex=0;return makeIterable({next:function(){return nextIndex<self._keys.length?{value:self.get(self._keys[nextIndex++]),done:false}:{value:undefined,done:true}}})};ObservableMap.prototype.entries=function(){var self=this;var nextIndex=0;return makeIterable({next:function(){if(nextIndex<self._keys.length){var key=self._keys[nextIndex++];return{value:[key,self.get(key)],done:false}}return{done:true}}})};ObservableMap.prototype.forEach=function(callback,thisArg){var _this=this;this._keys.forEach(function(key){return callback.call(thisArg,_this.get(key),key,_this)})};ObservableMap.prototype.merge=function(other){var _this=this;if(isObservableMap(other)){other=other.toJS()}transaction(function(){if(isPlainObject(other))Object.keys(other).forEach(function(key){return _this.set(key,other[key])});else if(Array.isArray(other))other.forEach(function(_a){var _b=__read(_a,2),key=_b[0],value=_b[1];return _this.set(key,value)});else if(isES6Map(other))other.forEach(function(value,key){return _this.set(key,value)});else if(other!==null&&other!==undefined)fail$1("Cannot initialize map from "+other)});return this};ObservableMap.prototype.clear=function(){var _this=this;transaction(function(){untracked(function(){_this._keys.slice().forEach(function(key){return _this.delete(key)})})})};ObservableMap.prototype.replace=function(values){var _this=this;transaction(function(){var newKeys=getMapLikeKeys(values);var oldKeys=_this._keys;var missingKeys=oldKeys.filter(function(k){return newKeys.indexOf(k)===-1});missingKeys.forEach(function(k){return _this.delete(k)});_this.merge(values)});return this};Object.defineProperty(ObservableMap.prototype,"size",{get:function(){return this._keys.length},enumerable:true,configurable:true});ObservableMap.prototype.toPOJO=function(){var _this=this;var res={};this._keys.forEach(function(key){return res[""+key]=_this.get(key)});return res};ObservableMap.prototype.toJS=function(){var _this=this;var res=new Map;this._keys.forEach(function(key){return res.set(key,_this.get(key))});return res};ObservableMap.prototype.toJSON=function(){return this.toPOJO()};ObservableMap.prototype.toString=function(){var _this=this;return this.name+"[{ "+this._keys.map(function(key){return key+": "+(""+_this.get(key))}).join(", ")+" }]"};ObservableMap.prototype.observe=function(listener,fireImmediately){"production"!=="production"&&invariant(fireImmediately!==true,"`observe` doesn't support fireImmediately=true in combination with maps.");return registerListener(this,listener)};ObservableMap.prototype.intercept=function(handler){return registerInterceptor(this,handler)};return ObservableMap}();declareIterator(ObservableMap.prototype,function(){return this.entries()});addHiddenFinalProp(ObservableMap.prototype,typeof Symbol!=="undefined"?Symbol.toStringTag:"@@toStringTag","Map");var isObservableMap=createInstanceofPredicate("ObservableMap",ObservableMap);function getAtom(thing,property){if(typeof thing==="object"&&thing!==null){if(isObservableArray(thing)){if(property!==undefined)fail$1("production"!=="production"&&"It is not possible to get index atoms from arrays");return thing.$mobx.atom}if(isObservableMap(thing)){var anyThing=thing;if(property===undefined)return getAtom(anyThing._keys);var observable=anyThing._data.get(property)||anyThing._hasMap.get(property);if(!observable)fail$1("production"!=="production"&&"the entry '"+property+"' does not exist in the observable map '"+getDebugName(thing)+"'");return observable}initializeInstance(thing);if(property&&!thing.$mobx)thing[property];if(isObservableObject(thing)){if(!property)return fail$1("production"!=="production"&&"please specify a property");var observable=thing.$mobx.values[property];if(!observable)fail$1("production"!=="production"&&"no observable property '"+property+"' found on the observable object '"+getDebugName(thing)+"'");return observable}if(isAtom(thing)||isComputedValue(thing)||isReaction(thing)){return thing}}else if(typeof thing==="function"){if(isReaction(thing.$mobx)){return thing.$mobx}}return fail$1("production"!=="production"&&"Cannot obtain atom from "+thing)}function getAdministration(thing,property){if(!thing)fail$1("Expecting some object");if(property!==undefined)return getAdministration(getAtom(thing,property));if(isAtom(thing)||isComputedValue(thing)||isReaction(thing))return thing;if(isObservableMap(thing))return thing;initializeInstance(thing);if(thing.$mobx)return thing.$mobx;fail$1("production"!=="production"&&"Cannot obtain administration from "+thing)}function getDebugName(thing,property){var named;if(property!==undefined)named=getAtom(thing,property);else if(isObservableObject(thing)||isObservableMap(thing))named=getAdministration(thing);else named=getAtom(thing);return named.name}function onBecomeObserved(thing,arg2,arg3){return interceptHook("onBecomeObserved",thing,arg2,arg3)}function onBecomeUnobserved(thing,arg2,arg3){return interceptHook("onBecomeUnobserved",thing,arg2,arg3)}function interceptHook(hook,thing,arg2,arg3){var atom=typeof arg2==="string"?getAtom(thing,arg2):getAtom(thing);var cb=typeof arg2==="string"?arg3:arg2;var orig=atom[hook];if(typeof orig!=="function")return fail$1("production"!=="production"&&"Not an atom that can be (un)observed");atom[hook]=function(){orig.call(this);cb.call(this)};return function(){atom[hook]=orig}}var Atom;var isAtom;function declareAtom(){if(Atom)return;Atom=function(){function AtomImpl(name){if(name===void 0){name="Atom@"+getNextId()}this.name=name;this.isPendingUnobservation=false;this.isBeingObserved=false;this.observers=[];this.observersIndexes={};this.diffValue=0;this.lastAccessedBy=0;this.lowestObserverState=IDerivationState.NOT_TRACKING}AtomImpl.prototype.onBecomeUnobserved=function(){};AtomImpl.prototype.onBecomeObserved=function(){};AtomImpl.prototype.reportObserved=function(){return reportObserved(this)};AtomImpl.prototype.reportChanged=function(){startBatch();propagateChanged(this);endBatch()};AtomImpl.prototype.toString=function(){return this.name};return AtomImpl}();isAtom=createInstanceofPredicate("Atom",Atom)}function createAtom(name,onBecomeObservedHandler,onBecomeUnobservedHandler){if(onBecomeObservedHandler===void 0){onBecomeObservedHandler=noop}if(onBecomeUnobservedHandler===void 0){onBecomeUnobservedHandler=noop}var atom=new Atom(name);onBecomeObserved(atom,onBecomeObservedHandler);onBecomeUnobserved(atom,onBecomeUnobservedHandler);return atom}var MAX_SPLICE_SIZE=1e4;var safariPrototypeSetterInheritanceBug=function(){var v=false;var p={};Object.defineProperty(p,"0",{set:function(){v=true}});Object.create(p)["0"]=1;return v===false}();var OBSERVABLE_ARRAY_BUFFER_SIZE=0;var StubArray=function(){function StubArray(){}return StubArray}();function inherit(ctor,proto){if(typeof Object["setPrototypeOf"]!=="undefined"){Object["setPrototypeOf"](ctor.prototype,proto)}else if(typeof ctor.prototype.__proto__!=="undefined"){ctor.prototype.__proto__=proto}else{ctor["prototype"]=proto}}inherit(StubArray,Array.prototype);if(Object.isFrozen(Array)){["constructor","push","shift","concat","pop","unshift","replace","find","findIndex","splice","reverse","sort"].forEach(function(key){Object.defineProperty(StubArray.prototype,key,{configurable:true,writable:true,value:Array.prototype[key]})})}var ObservableArrayAdministration=function(){function ObservableArrayAdministration(name,enhancer,array,owned){this.array=array;this.owned=owned;this.values=[];this.lastKnownLength=0;this.atom=new Atom(name||"ObservableArray@"+getNextId());this.enhancer=function(newV,oldV){return enhancer(newV,oldV,name+"[..]")}}ObservableArrayAdministration.prototype.dehanceValue=function(value){if(this.dehancer!==undefined)return this.dehancer(value);return value};ObservableArrayAdministration.prototype.dehanceValues=function(values){if(this.dehancer!==undefined&&this.values.length>0)return values.map(this.dehancer);return values};ObservableArrayAdministration.prototype.intercept=function(handler){return registerInterceptor(this,handler)};ObservableArrayAdministration.prototype.observe=function(listener,fireImmediately){if(fireImmediately===void 0){fireImmediately=false}if(fireImmediately){listener({object:this.array,type:"splice",index:0,added:this.values.slice(),addedCount:this.values.length,removed:[],removedCount:0})}return registerListener(this,listener)};ObservableArrayAdministration.prototype.getArrayLength=function(){this.atom.reportObserved();return this.values.length};ObservableArrayAdministration.prototype.setArrayLength=function(newLength){if(typeof newLength!=="number"||newLength<0)throw new Error("[mobx.array] Out of range: "+newLength);var currentLength=this.values.length;if(newLength===currentLength)return;else if(newLength>currentLength){var newItems=new Array(newLength-currentLength);for(var i=0;i<newLength-currentLength;i++)newItems[i]=undefined;this.spliceWithArray(currentLength,0,newItems)}else this.spliceWithArray(newLength,currentLength-newLength)};ObservableArrayAdministration.prototype.updateArrayLength=function(oldLength,delta){if(oldLength!==this.lastKnownLength)throw new Error("[mobx] Modification exception: the internal structure of an observable array was changed. Did you use peek() to change it?");this.lastKnownLength+=delta;if(delta>0&&oldLength+delta+1>OBSERVABLE_ARRAY_BUFFER_SIZE)reserveArrayBuffer(oldLength+delta+1)};ObservableArrayAdministration.prototype.spliceWithArray=function(index,deleteCount,newItems){var _this=this;checkIfStateModificationsAreAllowed(this.atom);var length=this.values.length;if(index===undefined)index=0;else if(index>length)index=length;else if(index<0)index=Math.max(0,length+index);if(arguments.length===1)deleteCount=length-index;else if(deleteCount===undefined||deleteCount===null)deleteCount=0;else deleteCount=Math.max(0,Math.min(deleteCount,length-index));if(newItems===undefined)newItems=EMPTY_ARRAY;if(hasInterceptors(this)){var change=interceptChange(this,{object:this.array,type:"splice",index:index,removedCount:deleteCount,added:newItems});if(!change)return EMPTY_ARRAY;deleteCount=change.removedCount;newItems=change.added}newItems=newItems.length===0?newItems:newItems.map(function(v){return _this.enhancer(v,undefined)});var lengthDelta=newItems.length-deleteCount;this.updateArrayLength(length,lengthDelta);var res=this.spliceItemsIntoValues(index,deleteCount,newItems);if(deleteCount!==0||newItems.length!==0)this.notifyArraySplice(index,newItems,res);return this.dehanceValues(res)};ObservableArrayAdministration.prototype.spliceItemsIntoValues=function(index,deleteCount,newItems){if(newItems.length<MAX_SPLICE_SIZE){return(_a=this.values).splice.apply(_a,__spread([index,deleteCount],newItems))}else{var res=this.values.slice(index,index+deleteCount);this.values=this.values.slice(0,index).concat(newItems,this.values.slice(index+deleteCount));return res}var _a};ObservableArrayAdministration.prototype.notifyArrayChildUpdate=function(index,newValue,oldValue){var notifySpy=!this.owned&&isSpyEnabled();var notify=hasListeners(this);var change=notify||notifySpy?{object:this.array,type:"update",index:index,newValue:newValue,oldValue:oldValue}:null;if(notifySpy)spyReportStart(__assign({},change,{name:this.atom.name}));this.atom.reportChanged();if(notify)notifyListeners(this,change);if(notifySpy)spyReportEnd()};ObservableArrayAdministration.prototype.notifyArraySplice=function(index,added,removed){var notifySpy=!this.owned&&isSpyEnabled();var notify=hasListeners(this);var change=notify||notifySpy?{object:this.array,type:"splice",index:index,removed:removed,added:added,removedCount:removed.length,addedCount:added.length}:null;if(notifySpy)spyReportStart(__assign({},change,{name:this.atom.name}));this.atom.reportChanged();if(notify)notifyListeners(this,change);if(notifySpy)spyReportEnd()};return ObservableArrayAdministration}();var ObservableArray=function(_super){__extends(ObservableArray,_super);function ObservableArray(initialValues,enhancer,name,owned){if(name===void 0){name="ObservableArray@"+getNextId()}if(owned===void 0){owned=false}var _this=_super.call(this)||this;var adm=new ObservableArrayAdministration(name,enhancer,_this,owned);addHiddenFinalProp(_this,"$mobx",adm);if(initialValues&&initialValues.length){_this.spliceWithArray(0,0,initialValues)}if(safariPrototypeSetterInheritanceBug){Object.defineProperty(adm.array,"0",ENTRY_0)}return _this}ObservableArray.prototype.intercept=function(handler){return this.$mobx.intercept(handler)};ObservableArray.prototype.observe=function(listener,fireImmediately){if(fireImmediately===void 0){fireImmediately=false}return this.$mobx.observe(listener,fireImmediately)};ObservableArray.prototype.clear=function(){return this.splice(0)};ObservableArray.prototype.concat=function(){var arrays=[];for(var _i=0;_i<arguments.length;_i++){arrays[_i]=arguments[_i]}this.$mobx.atom.reportObserved();return Array.prototype.concat.apply(this.peek(),arrays.map(function(a){return isObservableArray(a)?a.peek():a}))};ObservableArray.prototype.replace=function(newItems){return this.$mobx.spliceWithArray(0,this.$mobx.values.length,newItems)};ObservableArray.prototype.toJS=function(){return this.slice()};ObservableArray.prototype.toJSON=function(){return this.toJS()};ObservableArray.prototype.peek=function(){this.$mobx.atom.reportObserved();return this.$mobx.dehanceValues(this.$mobx.values)};ObservableArray.prototype.find=function(predicate,thisArg,fromIndex){if(fromIndex===void 0){fromIndex=0}if(arguments.length===3)deprecated("The array.find fromIndex argument to find will not be supported anymore in the next major");var idx=this.findIndex.apply(this,arguments);return idx===-1?undefined:this.get(idx)};ObservableArray.prototype.findIndex=function(predicate,thisArg,fromIndex){if(fromIndex===void 0){fromIndex=0}if(arguments.length===3)deprecated("The array.findIndex fromIndex argument to find will not be supported anymore in the next major");var items=this.peek(),l=items.length;for(var i=fromIndex;i<l;i++)if(predicate.call(thisArg,items[i],i,this))return i;return-1};ObservableArray.prototype.splice=function(index,deleteCount){var newItems=[];for(var _i=2;_i<arguments.length;_i++){newItems[_i-2]=arguments[_i]}switch(arguments.length){case 0:return[];case 1:return this.$mobx.spliceWithArray(index);case 2:return this.$mobx.spliceWithArray(index,deleteCount)}return this.$mobx.spliceWithArray(index,deleteCount,newItems)};ObservableArray.prototype.spliceWithArray=function(index,deleteCount,newItems){return this.$mobx.spliceWithArray(index,deleteCount,newItems)};ObservableArray.prototype.push=function(){var items=[];for(var _i=0;_i<arguments.length;_i++){items[_i]=arguments[_i]}var adm=this.$mobx;adm.spliceWithArray(adm.values.length,0,items);return adm.values.length};ObservableArray.prototype.pop=function(){return this.splice(Math.max(this.$mobx.values.length-1,0),1)[0]};ObservableArray.prototype.shift=function(){return this.splice(0,1)[0]};ObservableArray.prototype.unshift=function(){var items=[];for(var _i=0;_i<arguments.length;_i++){items[_i]=arguments[_i]}var adm=this.$mobx;adm.spliceWithArray(0,0,items);return adm.values.length};ObservableArray.prototype.reverse=function(){var clone=this.slice();return clone.reverse.apply(clone,arguments)};ObservableArray.prototype.sort=function(compareFn){var clone=this.slice();return clone.sort.apply(clone,arguments)};ObservableArray.prototype.remove=function(value){var idx=this.$mobx.dehanceValues(this.$mobx.values).indexOf(value);if(idx>-1){this.splice(idx,1);return true}return false};ObservableArray.prototype.move=function(fromIndex,toIndex){deprecated("observableArray.move is deprecated, use .slice() & .replace() instead");function checkIndex(index){if(index<0){throw new Error("[mobx.array] Index out of bounds: "+index+" is negative")}var length=this.$mobx.values.length;if(index>=length){throw new Error("[mobx.array] Index out of bounds: "+index+" is not smaller than "+length)}}checkIndex.call(this,fromIndex);checkIndex.call(this,toIndex);if(fromIndex===toIndex){return}var oldItems=this.$mobx.values;var newItems;if(fromIndex<toIndex){newItems=__spread(oldItems.slice(0,fromIndex),oldItems.slice(fromIndex+1,toIndex+1),[oldItems[fromIndex]],oldItems.slice(toIndex+1))}else{newItems=__spread(oldItems.slice(0,toIndex),[oldItems[fromIndex]],oldItems.slice(toIndex,fromIndex),oldItems.slice(fromIndex+1))}this.replace(newItems)};ObservableArray.prototype.get=function(index){var impl=this.$mobx;if(impl){if(index<impl.values.length){impl.atom.reportObserved();return impl.dehanceValue(impl.values[index])}console.warn("[mobx.array] Attempt to read an array index ("+index+") that is out of bounds ("+impl.values.length+"). Please check length first. Out of bound indices will not be tracked by MobX")}return undefined};ObservableArray.prototype.set=function(index,newValue){var adm=this.$mobx;var values=adm.values;if(index<values.length){checkIfStateModificationsAreAllowed(adm.atom);var oldValue=values[index];if(hasInterceptors(adm)){var change=interceptChange(adm,{type:"update",object:this,index:index,newValue:newValue});if(!change)return;newValue=change.newValue}newValue=adm.enhancer(newValue,oldValue);var changed=newValue!==oldValue;if(changed){values[index]=newValue;adm.notifyArrayChildUpdate(index,newValue,oldValue)}}else if(index===values.length){adm.spliceWithArray(index,0,[newValue])}else{throw new Error("[mobx.array] Index out of bounds, "+index+" is larger than "+values.length)}};return ObservableArray}(StubArray);declareIterator(ObservableArray.prototype,function(){this.$mobx.atom.reportObserved();var self=this;var nextIndex=0;return makeIterable({next:function(){return nextIndex<self.length?{value:self[nextIndex++],done:false}:{done:true,value:undefined}}})});Object.defineProperty(ObservableArray.prototype,"length",{enumerable:false,configurable:true,get:function(){return this.$mobx.getArrayLength()},set:function(newLength){this.$mobx.setArrayLength(newLength)}});if(typeof Symbol!=="undefined"&&Symbol.toStringTag){addHiddenProp(ObservableArray.prototype,typeof Symbol!=="undefined"?Symbol.toStringTag:"@@toStringTag","Array")}["every","filter","forEach","indexOf","join","lastIndexOf","map","reduce","reduceRight","slice","some","toString","toLocaleString"].forEach(function(funcName){var baseFunc=Array.prototype[funcName];invariant(typeof baseFunc==="function","Base function not defined on Array prototype: '"+funcName+"'");addHiddenProp(ObservableArray.prototype,funcName,function(){return baseFunc.apply(this.peek(),arguments)})});makeNonEnumerable(ObservableArray.prototype,["constructor","intercept","observe","clear","concat","get","replace","toJS","toJSON","peek","find","findIndex","splice","spliceWithArray","push","pop","set","shift","unshift","reverse","sort","remove","move","toString","toLocaleString"]);var ENTRY_0=createArrayEntryDescriptor(0);function createArrayEntryDescriptor(index){return{enumerable:false,configurable:false,get:function(){return this.get(index)},set:function(value){this.set(index,value)}}}function createArrayBufferItem(index){Object.defineProperty(ObservableArray.prototype,""+index,createArrayEntryDescriptor(index))}function reserveArrayBuffer(max){for(var index=OBSERVABLE_ARRAY_BUFFER_SIZE;index<max;index++)createArrayBufferItem(index);OBSERVABLE_ARRAY_BUFFER_SIZE=max}reserveArrayBuffer(1e3);var isObservableArrayAdministration=createInstanceofPredicate("ObservableArrayAdministration",ObservableArrayAdministration);function isObservableArray(thing){return isObject(thing)&&isObservableArrayAdministration(thing.$mobx)}var OBFUSCATED_ERROR="An invariant failed, however the error is obfuscated because this is an production build.";var EMPTY_ARRAY=[];Object.freeze(EMPTY_ARRAY);var EMPTY_OBJECT={};Object.freeze(EMPTY_OBJECT);function getGlobal(){return typeof window!=="undefined"?window:global}function getNextId(){return++globalState.mobxGuid}function fail$1(message){invariant(false,message);throw"X"}function invariant(check,message){if(!check)throw new Error("[mobx] "+(message||OBFUSCATED_ERROR))}var deprecatedMessages=[];function deprecated(msg,thing){if(true)return false;if(thing){return deprecated("'"+msg+"', use '"+thing+"' instead.")}if(deprecatedMessages.indexOf(msg)!==-1)return false;deprecatedMessages.push(msg);console.error("[mobx] Deprecated: "+msg);return true}function once(func){var invoked=false;return function(){if(invoked)return;invoked=true;return func.apply(this,arguments)}}var noop=function(){};function unique(list){var res=[];list.forEach(function(item){if(res.indexOf(item)===-1)res.push(item)});return res}function isObject(value){return value!==null&&typeof value==="object"}function isPlainObject(value){if(value===null||typeof value!=="object")return false;var proto=Object.getPrototypeOf(value);return proto===Object.prototype||proto===null}function makeNonEnumerable(object,propNames){for(var i=0;i<propNames.length;i++){addHiddenProp(object,propNames[i],object[propNames[i]])}}function addHiddenProp(object,propName,value){Object.defineProperty(object,propName,{enumerable:false,writable:true,configurable:true,value:value})}function addHiddenFinalProp(object,propName,value){Object.defineProperty(object,propName,{enumerable:false,writable:false,configurable:true,value:value})}function isPropertyConfigurable(object,prop){var descriptor=Object.getOwnPropertyDescriptor(object,prop);return!descriptor||descriptor.configurable!==false&&descriptor.writable!==false}function assertPropertyConfigurable(object,prop){if(false){}}function createInstanceofPredicate(name,clazz){var propName="isMobX"+name;clazz.prototype[propName]=true;return function(x){return isObject(x)&&x[propName]===true}}function areBothNaN(a,b){return typeof a==="number"&&typeof b==="number"&&isNaN(a)&&isNaN(b)}function isArrayLike(x){return Array.isArray(x)||isObservableArray(x)}function isES6Map(thing){if(getGlobal().Map!==undefined&&thing instanceof getGlobal().Map)return true;return false}function getMapLikeKeys(map){if(isPlainObject(map))return Object.keys(map);if(Array.isArray(map))return map.map(function(_a){var _b=__read(_a,1),key=_b[0];return key});if(isES6Map(map)||isObservableMap(map))return iteratorToArray(map.keys());return fail$1("Cannot get keys from '"+map+"'")}function iteratorToArray(it){var res=[];while(true){var r=it.next();if(r.done)break;res.push(r.value)}return res}function primitiveSymbol(){return typeof Symbol==="function"&&Symbol.toPrimitive||"@@toPrimitive"}function toPrimitive(value){return value===null?null:typeof value==="object"?""+value:value}var persistentKeys=["mobxGuid","spyListeners","enforceActions","computedRequiresReaction","disableErrorBoundaries","runId"];var MobXGlobals=function(){function MobXGlobals(){this.version=5;this.trackingDerivation=null;this.computationDepth=0;this.runId=0;this.mobxGuid=0;this.inBatch=0;this.pendingUnobservations=[];this.pendingReactions=[];this.isRunningReactions=false;this.allowStateChanges=true;this.enforceActions=false;this.spyListeners=[];this.globalReactionErrorHandlers=[];this.computedRequiresReaction=false;this.disableErrorBoundaries=false}return MobXGlobals}();var globalState=new MobXGlobals;var runInIsolationCalled=false;{var global_1=getGlobal();if(!global_1.__mobxInstanceCount){global_1.__mobxInstanceCount=1}else{global_1.__mobxInstanceCount++;setTimeout(function(){if(!runInIsolationCalled){fail$1("production"!=="production"&&"There are multiple mobx instances active. This might lead to unexpected results. See https://github.com/mobxjs/mobx/issues/1082 for details.")}},1)}}function isolateGlobalState(){runInIsolationCalled=true;getGlobal().__mobxInstanceCount--}function getGlobalState(){return globalState}function resetGlobalState(){var defaultGlobals=new MobXGlobals;for(var key in defaultGlobals)if(persistentKeys.indexOf(key)===-1)globalState[key]=defaultGlobals[key];globalState.allowStateChanges=!globalState.enforceActions}function getDependencyTree(thing,property){return nodeToDependencyTree(getAtom(thing,property))}function nodeToDependencyTree(node){var result={name:node.name};if(node.observing&&node.observing.length>0)result.dependencies=unique(node.observing).map(nodeToDependencyTree);return result}function getObserverTree(thing,property){return nodeToObserverTree(getAtom(thing,property))}function nodeToObserverTree(node){var result={name:node.name};if(hasObservers(node))result.observers=getObservers(node).map(nodeToObserverTree);return result}function hasObservers(observable){return observable.observers&&observable.observers.length>0}function getObservers(observable){return observable.observers}function addObserver(observable,node){var l=observable.observers.length;if(l){observable.observersIndexes[node.__mapid]=l}observable.observers[l]=node;if(observable.lowestObserverState>node.dependenciesState)observable.lowestObserverState=node.dependenciesState}function removeObserver(observable,node){if(observable.observers.length===1){observable.observers.length=0;queueForUnobservation(observable)}else{var list=observable.observers;var map=observable.observersIndexes;var filler=list.pop();if(filler!==node){var index=map[node.__mapid]||0;if(index){map[filler.__mapid]=index}else{delete map[filler.__mapid]}list[index]=filler}delete map[node.__mapid]}}function queueForUnobservation(observable){if(observable.isPendingUnobservation===false){observable.isPendingUnobservation=true;globalState.pendingUnobservations.push(observable)}}function startBatch(){globalState.inBatch++}function endBatch(){if(--globalState.inBatch===0){runReactions();var list=globalState.pendingUnobservations;for(var i=0;i<list.length;i++){var observable=list[i];observable.isPendingUnobservation=false;if(observable.observers.length===0){if(observable.isBeingObserved){observable.isBeingObserved=false;observable.onBecomeUnobserved()}if(observable instanceof ComputedValue){observable.suspend()}}}globalState.pendingUnobservations=[]}}function reportObserved(observable){var derivation=globalState.trackingDerivation;if(derivation!==null){if(derivation.runId!==observable.lastAccessedBy){observable.lastAccessedBy=derivation.runId;derivation.newObserving[derivation.unboundDepsCount++]=observable;if(!observable.isBeingObserved){observable.isBeingObserved=true;observable.onBecomeObserved()}}return true}else if(observable.observers.length===0&&globalState.inBatch>0){queueForUnobservation(observable)}return false}function propagateChanged(observable){if(observable.lowestObserverState===IDerivationState.STALE)return;observable.lowestObserverState=IDerivationState.STALE;var observers=observable.observers;var i=observers.length;while(i--){var d=observers[i];if(d.dependenciesState===IDerivationState.UP_TO_DATE){if(d.isTracing!==TraceMode.NONE){logTraceInfo(d,observable)}d.onBecomeStale()}d.dependenciesState=IDerivationState.STALE}}function propagateChangeConfirmed(observable){if(observable.lowestObserverState===IDerivationState.STALE)return;observable.lowestObserverState=IDerivationState.STALE;var observers=observable.observers;var i=observers.length;while(i--){var d=observers[i];if(d.dependenciesState===IDerivationState.POSSIBLY_STALE)d.dependenciesState=IDerivationState.STALE;else if(d.dependenciesState===IDerivationState.UP_TO_DATE)observable.lowestObserverState=IDerivationState.UP_TO_DATE}}function propagateMaybeChanged(observable){if(observable.lowestObserverState!==IDerivationState.UP_TO_DATE)return;observable.lowestObserverState=IDerivationState.POSSIBLY_STALE;var observers=observable.observers;var i=observers.length;while(i--){var d=observers[i];if(d.dependenciesState===IDerivationState.UP_TO_DATE){d.dependenciesState=IDerivationState.POSSIBLY_STALE;if(d.isTracing!==TraceMode.NONE){logTraceInfo(d,observable)}d.onBecomeStale()}}}function logTraceInfo(derivation,observable){console.log("[mobx.trace] '"+derivation.name+"' is invalidated due to a change in: '"+observable.name+"'");if(derivation.isTracing===TraceMode.BREAK){var lines=[];printDepTree(getDependencyTree(derivation),lines,1);new Function("debugger;\n/*\nTracing '"+derivation.name+"'\n\nYou are entering this break point because derivation '"+derivation.name+"' is being traced and '"+observable.name+"' is now forcing it to update.\nJust follow the stacktrace you should now see in the devtools to see precisely what piece of your code is causing this update\nThe stackframe you are looking for is at least ~6-8 stack-frames up.\n\n"+(derivation instanceof ComputedValue?derivation.derivation.toString():"")+"\n\nThe dependencies for this derivation are:\n\n"+lines.join("\n")+"\n*/\n    ")()}}function printDepTree(tree,lines,depth){if(lines.length>=1e3){lines.push("(and many more)");return}lines.push(""+new Array(depth).join("\t")+tree.name);if(tree.dependencies)tree.dependencies.forEach(function(child){return printDepTree(child,lines,depth+1)})}var IDerivationState;(function(IDerivationState){IDerivationState[IDerivationState["NOT_TRACKING"]=-1]="NOT_TRACKING";IDerivationState[IDerivationState["UP_TO_DATE"]=0]="UP_TO_DATE";IDerivationState[IDerivationState["POSSIBLY_STALE"]=1]="POSSIBLY_STALE";IDerivationState[IDerivationState["STALE"]=2]="STALE"})(IDerivationState||(IDerivationState={}));var TraceMode;(function(TraceMode){TraceMode[TraceMode["NONE"]=0]="NONE";TraceMode[TraceMode["LOG"]=1]="LOG";TraceMode[TraceMode["BREAK"]=2]="BREAK"})(TraceMode||(TraceMode={}));var CaughtException=function(){function CaughtException(cause){this.cause=cause}return CaughtException}();function isCaughtException(e){return e instanceof CaughtException}function shouldCompute(derivation){switch(derivation.dependenciesState){case IDerivationState.UP_TO_DATE:return false;case IDerivationState.NOT_TRACKING:case IDerivationState.STALE:return true;case IDerivationState.POSSIBLY_STALE:{var prevUntracked=untrackedStart();var obs=derivation.observing,l=obs.length;for(var i=0;i<l;i++){var obj=obs[i];if(isComputedValue(obj)){if(globalState.disableErrorBoundaries){obj.get()}else{try{obj.get()}catch(e){untrackedEnd(prevUntracked);return true}}if(derivation.dependenciesState===IDerivationState.STALE){untrackedEnd(prevUntracked);return true}}}changeDependenciesStateTo0(derivation);untrackedEnd(prevUntracked);return false}}}function isComputingDerivation(){return globalState.trackingDerivation!==null}function checkIfStateModificationsAreAllowed(atom){var hasObservers$$1=atom.observers.length>0;if(globalState.computationDepth>0&&hasObservers$$1)fail$1("production"!=="production"&&"Computed values are not allowed to cause side effects by changing observables that are already being observed. Tried to modify: "+atom.name);if(!globalState.allowStateChanges&&(hasObservers$$1||globalState.enforceActions==="strict"))fail$1("production"!=="production"&&(globalState.enforceActions?"Since strict-mode is enabled, changing observed observable values outside actions is not allowed. Please wrap the code in an `action` if this change is intended. Tried to modify: ":"Side effects like changing state are not allowed at this point. Are you trying to modify state from, for example, the render function of a React component? Tried to modify: ")+atom.name)}function trackDerivedFunction(derivation,f,context){changeDependenciesStateTo0(derivation);derivation.newObserving=new Array(derivation.observing.length+100);derivation.unboundDepsCount=0;derivation.runId=++globalState.runId;var prevTracking=globalState.trackingDerivation;globalState.trackingDerivation=derivation;var result;if(globalState.disableErrorBoundaries===true){result=f.call(context)}else{try{result=f.call(context)}catch(e){result=new CaughtException(e)}}globalState.trackingDerivation=prevTracking;bindDependencies(derivation);return result}function bindDependencies(derivation){var prevObserving=derivation.observing;var observing=derivation.observing=derivation.newObserving;var lowestNewObservingDerivationState=IDerivationState.UP_TO_DATE;var i0=0,l=derivation.unboundDepsCount;for(var i=0;i<l;i++){var dep=observing[i];if(dep.diffValue===0){dep.diffValue=1;if(i0!==i)observing[i0]=dep;i0++}if(dep.dependenciesState>lowestNewObservingDerivationState){lowestNewObservingDerivationState=dep.dependenciesState}}observing.length=i0;derivation.newObserving=null;l=prevObserving.length;while(l--){var dep=prevObserving[l];if(dep.diffValue===0){removeObserver(dep,derivation)}dep.diffValue=0}while(i0--){var dep=observing[i0];if(dep.diffValue===1){dep.diffValue=0;addObserver(dep,derivation)}}if(lowestNewObservingDerivationState!==IDerivationState.UP_TO_DATE){derivation.dependenciesState=lowestNewObservingDerivationState;derivation.onBecomeStale()}}function clearObserving(derivation){var obs=derivation.observing;derivation.observing=[];var i=obs.length;while(i--)removeObserver(obs[i],derivation);derivation.dependenciesState=IDerivationState.NOT_TRACKING}function untracked(action){var prev=untrackedStart();var res=action();untrackedEnd(prev);return res}function untrackedStart(){var prev=globalState.trackingDerivation;globalState.trackingDerivation=null;return prev}function untrackedEnd(prev){globalState.trackingDerivation=prev}function changeDependenciesStateTo0(derivation){if(derivation.dependenciesState===IDerivationState.UP_TO_DATE)return;derivation.dependenciesState=IDerivationState.UP_TO_DATE;var obs=derivation.observing;var i=obs.length;while(i--)obs[i].lowestObserverState=IDerivationState.UP_TO_DATE}function trace(){var args=[];for(var _i=0;_i<arguments.length;_i++){args[_i]=arguments[_i]}var enterBreakPoint=false;if(typeof args[args.length-1]==="boolean")enterBreakPoint=args.pop();var derivation=getAtomFromArgs(args);if(!derivation){return fail$1("production"!=="production"&&"'trace(break?)' can only be used inside a tracked computed value or a Reaction. Consider passing in the computed value or reaction explicitly")}if(derivation.isTracing===TraceMode.NONE){console.log("[mobx.trace] '"+derivation.name+"' tracing enabled")}derivation.isTracing=enterBreakPoint?TraceMode.BREAK:TraceMode.LOG}function getAtomFromArgs(args){switch(args.length){case 0:return globalState.trackingDerivation;case 1:return getAtom(args[0]);case 2:return getAtom(args[0],args[1])}}var Reaction=function(){function Reaction(name,onInvalidate,errorHandler){if(name===void 0){name="Reaction@"+getNextId()}this.name=name;this.onInvalidate=onInvalidate;this.errorHandler=errorHandler;this.observing=[];this.newObserving=[];this.dependenciesState=IDerivationState.NOT_TRACKING;this.diffValue=0;this.runId=0;this.unboundDepsCount=0;this.__mapid="#"+getNextId();this.isDisposed=false;this._isScheduled=false;this._isTrackPending=false;this._isRunning=false;this.isTracing=TraceMode.NONE}Reaction.prototype.onBecomeStale=function(){this.schedule()};Reaction.prototype.schedule=function(){if(!this._isScheduled){this._isScheduled=true;globalState.pendingReactions.push(this);runReactions()}};Reaction.prototype.isScheduled=function(){return this._isScheduled};Reaction.prototype.runReaction=function(){if(!this.isDisposed){startBatch();this._isScheduled=false;if(shouldCompute(this)){this._isTrackPending=true;try{this.onInvalidate();if(this._isTrackPending&&isSpyEnabled()){spyReport({name:this.name,type:"scheduled-reaction"})}}catch(e){this.reportExceptionInDerivation(e)}}endBatch()}};Reaction.prototype.track=function(fn){startBatch();var notify=isSpyEnabled();var startTime;if(notify){startTime=Date.now();spyReportStart({name:this.name,type:"reaction"})}this._isRunning=true;var result=trackDerivedFunction(this,fn,undefined);this._isRunning=false;this._isTrackPending=false;if(this.isDisposed){clearObserving(this)}if(isCaughtException(result))this.reportExceptionInDerivation(result.cause);if(notify){spyReportEnd({time:Date.now()-startTime})}endBatch()};Reaction.prototype.reportExceptionInDerivation=function(error){var _this=this;if(this.errorHandler){this.errorHandler(error,this);return}if(globalState.disableErrorBoundaries)throw error;var message="[mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: '"+this;console.error(message,error);if(isSpyEnabled()){spyReport({type:"error",name:this.name,message:message,error:""+error})}globalState.globalReactionErrorHandlers.forEach(function(f){return f(error,_this)})};Reaction.prototype.dispose=function(){if(!this.isDisposed){this.isDisposed=true;if(!this._isRunning){startBatch();clearObserving(this);endBatch()}}};Reaction.prototype.getDisposer=function(){var r=this.dispose.bind(this);r.$mobx=this;return r};Reaction.prototype.toString=function(){return"Reaction["+this.name+"]"};Reaction.prototype.trace=function(enterBreakPoint){if(enterBreakPoint===void 0){enterBreakPoint=false}trace(this,enterBreakPoint)};return Reaction}();function onReactionError(handler){globalState.globalReactionErrorHandlers.push(handler);return function(){var idx=globalState.globalReactionErrorHandlers.indexOf(handler);if(idx>=0)globalState.globalReactionErrorHandlers.splice(idx,1)}}var MAX_REACTION_ITERATIONS=100;var reactionScheduler=function(f){return f()};function runReactions(){if(globalState.inBatch>0||globalState.isRunningReactions)return;reactionScheduler(runReactionsHelper)}function runReactionsHelper(){globalState.isRunningReactions=true;var allReactions=globalState.pendingReactions;var iterations=0;while(allReactions.length>0){if(++iterations===MAX_REACTION_ITERATIONS){console.error("Reaction doesn't converge to a stable state after "+MAX_REACTION_ITERATIONS+" iterations."+(" Probably there is a cycle in the reactive function: "+allReactions[0]));allReactions.splice(0)}var remainingReactions=allReactions.splice(0);for(var i=0,l=remainingReactions.length;i<l;i++)remainingReactions[i].runReaction()}globalState.isRunningReactions=false}var isReaction=createInstanceofPredicate("Reaction",Reaction);function setReactionScheduler(fn){var baseScheduler=reactionScheduler;reactionScheduler=function(f){return fn(function(){return baseScheduler(f)})}}function observe(thing,propOrCb,cbOrFire,fireImmediately){if(typeof cbOrFire==="function")return observeObservableProperty(thing,propOrCb,cbOrFire,fireImmediately);else return observeObservable(thing,propOrCb,cbOrFire)}function observeObservable(thing,listener,fireImmediately){return getAdministration(thing).observe(listener,fireImmediately)}function observeObservableProperty(thing,property,listener,fireImmediately){return getAdministration(thing,property).observe(listener,fireImmediately)}function intercept(thing,propOrHandler,handler){if(typeof handler==="function")return interceptProperty(thing,propOrHandler,handler);else return interceptInterceptable(thing,propOrHandler)}function interceptInterceptable(thing,handler){return getAdministration(thing).intercept(handler)}function interceptProperty(thing,property,handler){return getAdministration(thing,property).intercept(handler)}function when(predicate,arg1,arg2){if(arguments.length===1||arg1&&typeof arg1==="object")return whenPromise(predicate,arg1);return _when(predicate,arg1,arg2||{})}function _when(predicate,effect,opts){var timeoutHandle;if(typeof opts.timeout==="number"){timeoutHandle=setTimeout(function(){if(!disposer.$mobx.isDisposed){disposer();var error=new Error("WHEN_TIMEOUT");if(opts.onError)opts.onError(error);else throw error}},opts.timeout)}opts.name=opts.name||"When@"+getNextId();var effectAction=createAction(opts.name+"-effect",effect);var disposer=autorun(function(r){if(predicate()){r.dispose();if(timeoutHandle)clearTimeout(timeoutHandle);effectAction()}},opts);return disposer}function whenPromise(predicate,opts){if(false){}var cancel;var res=new Promise(function(resolve,reject){var disposer=_when(predicate,resolve,__assign({},opts,{onError:reject}));cancel=function(){disposer();reject("WHEN_CANCELLED")}});res.cancel=cancel;return res}function keys(obj){if(isObservableObject(obj)){return obj.$mobx.getKeys()}if(isObservableMap(obj)){return obj._keys.slice()}return fail$1("production"!=="production"&&"'keys()' can only be used on observable objects and maps")}function values(obj){if(isObservableObject(obj)){return keys(obj).map(function(key){return obj[key]})}if(isObservableMap(obj)){return keys(obj).map(function(key){return obj.get(key)})}if(isObservableArray(obj)){return obj.slice()}return fail$1("production"!=="production"&&"'values()' can only be used on observable objects, arrays and maps")}function set(obj,key,value){if(arguments.length===2){startBatch();var values_1=key;try{for(var key_1 in values_1)set(obj,key_1,values_1[key_1])}finally{endBatch()}return}if(isObservableObject(obj)){var adm=obj.$mobx;var existingObservable=adm.values[key];if(existingObservable){adm.write(obj,key,value)}else{defineObservableProperty(obj,key,value,adm.defaultEnhancer)}}else if(isObservableMap(obj)){obj.set(key,value)}else if(isObservableArray(obj)){if(typeof key!=="number")key=parseInt(key,10);invariant(key>=0,"Not a valid index: '"+key+"'");startBatch();if(key>=obj.length)obj.length=key+1;obj[key]=value;endBatch()}else{return fail$1("production"!=="production"&&"'set()' can only be used on observable objects, arrays and maps")}}function remove(obj,key){if(isObservableObject(obj)){obj.$mobx.remove(key)}else if(isObservableMap(obj)){obj.delete(key)}else if(isObservableArray(obj)){if(typeof key!=="number")key=parseInt(key,10);invariant(key>=0,"Not a valid index: '"+key+"'");obj.splice(key,1)}else{return fail$1("production"!=="production"&&"'remove()' can only be used on observable objects, arrays and maps")}}function has$1(obj,key){if(isObservableObject(obj)){var adm=getAdministration(obj);adm.getKeys();return adm.values[key]instanceof ObservableValue}else if(isObservableMap(obj)){return obj.has(key)}else if(isObservableArray(obj)){return key>=0&&key<obj.length}else{return fail$1("production"!=="production"&&"'has()' can only be used on observable objects, arrays and maps")}}function get(obj,key){if(!has$1(obj,key))return undefined;if(isObservableObject(obj)){return obj[key]}else if(isObservableMap(obj)){return obj.get(key)}else if(isObservableArray(obj)){return obj[key]}else{return fail$1("production"!=="production"&&"'get()' can only be used on observable objects, arrays and maps")}}function decorate(thing,decorators){"production"!=="production"&&invariant(isPlainObject(decorators),"Decorators should be a key value map");var target=typeof thing==="function"?thing.prototype:thing;for(var prop in decorators){var decorator=decorators[prop];"production"!=="production"&&invariant(typeof decorator==="function","Decorate: expected a decorator function for '"+prop+"'");var descriptor=Object.getOwnPropertyDescriptor(target,prop);var newDescriptor=decorator(target,prop,descriptor);if(newDescriptor)Object.defineProperty(target,prop,newDescriptor)}return thing}function configure(options){var enforceActions=options.enforceActions,computedRequiresReaction=options.computedRequiresReaction,disableErrorBoundaries=options.disableErrorBoundaries,arrayBuffer=options.arrayBuffer,reactionScheduler=options.reactionScheduler;if(enforceActions!==undefined){if(typeof enforceActions!=="boolean"&&enforceActions!=="strict")return fail("Invalid configuration for 'enforceActions': "+enforceActions);globalState.enforceActions=enforceActions;globalState.allowStateChanges=enforceActions===true||enforceActions==="strict"?false:true}if(computedRequiresReaction!==undefined){globalState.computedRequiresReaction=!!computedRequiresReaction}if(options.isolateGlobalState===true){isolateGlobalState()}if(disableErrorBoundaries!==undefined){if(disableErrorBoundaries===true)console.warn("WARNING: Debug feature only. MobX will NOT recover from errors if this is on.");globalState.disableErrorBoundaries=!!disableErrorBoundaries}if(typeof arrayBuffer==="number"){reserveArrayBuffer(arrayBuffer)}if(reactionScheduler){setReactionScheduler(reactionScheduler)}}var generatorId=0;function flow(generator){if(arguments.length!==1)fail$1("production"&&"Flow expects one 1 argument and cannot be used as decorator");var name=generator.name||"<unnamed flow>";return function(){var ctx=this;var args=arguments;var runId=++generatorId;var gen=action(name+" - runid: "+runId+" - init",generator).apply(ctx,args);var rejector;var pendingPromise=undefined;var res=new Promise(function(resolve,reject){var stepId=0;rejector=reject;function onFulfilled(res){pendingPromise=undefined;var ret;try{ret=action(name+" - runid: "+runId+" - yield "+stepId++,gen.next).call(gen,res)}catch(e){return reject(e)}next(ret)}function onRejected(err){pendingPromise=undefined;var ret;try{ret=action(name+" - runid: "+runId+" - yield "+stepId++,gen.throw).call(gen,err)}catch(e){return reject(e)}next(ret)}function next(ret){if(ret&&typeof ret.then==="function"){ret.then(next,reject);return}if(ret.done)return resolve(ret.value);pendingPromise=Promise.resolve(ret.value);return pendingPromise.then(onFulfilled,onRejected)}onFulfilled(undefined)});res.cancel=action(name+" - runid: "+runId+" - cancel",function(){try{if(pendingPromise)cancelPromise(pendingPromise);var res_1=gen.return();var yieldedPromise=Promise.resolve(res_1.value);yieldedPromise.then(noop,noop);cancelPromise(yieldedPromise);rejector(new Error("FLOW_CANCELLED"))}catch(e){rejector(e)}});return res}}function cancelPromise(promise){if(typeof promise.cancel==="function")promise.cancel()}var defaultOptions={detectCycles:true,exportMapsAsObjects:true};function cache(map,key,value,options){if(options.detectCycles)map.set(key,value);return value}function toJSHelper(source,options,__alreadySeen){if(!isObservable(source))return source;var detectCycles=options.detectCycles===true;if(detectCycles&&source!==null&&typeof source==="object"&&__alreadySeen.has(source)){return __alreadySeen.get(source)}if(isObservableArray(source)){var res=cache(__alreadySeen,source,[],options);var toAdd=source.map(function(value){return toJSHelper(value,options,__alreadySeen)});res.length=toAdd.length;for(var i=0,l=toAdd.length;i<l;i++)res[i]=toAdd[i];return res}if(isObservableObject(source)){var res=cache(__alreadySeen,source,{},options);keys(source);for(var key in source){res[key]=toJSHelper(source[key],options,__alreadySeen)}return res}if(isObservableMap(source)){if(options.exportMapsAsObjects===false){var res_1=cache(__alreadySeen,source,new Map,options);source.forEach(function(value,key){res_1.set(key,toJSHelper(value,options,__alreadySeen))});return res_1}else{var res_2=cache(__alreadySeen,source,{},options);source.forEach(function(value,key){res_2[key]=toJSHelper(value,options,__alreadySeen)});return res_2}}if(isObservableValue(source))return toJSHelper(source.get(),options,__alreadySeen);return source}function toJS(source,options){if(!isObservable(source))return source;if(typeof options==="boolean")options={detectCycles:options};if(!options)options=defaultOptions;var detectCycles=options.detectCycles===true;var __alreadySeen;if(detectCycles)__alreadySeen=new Map;return toJSHelper(source,options,__alreadySeen)}function interceptReads(thing,propOrHandler,handler){var target;if(isObservableMap(thing)||isObservableArray(thing)||isObservableValue(thing)){target=getAdministration(thing)}else if(isObservableObject(thing)){if(typeof propOrHandler!=="string")return fail$1("production"!=="production"&&"InterceptReads can only be used with a specific property, not with an object in general");target=getAdministration(thing,propOrHandler)}else{return fail$1("production"!=="production"&&"Expected observable map, object or array as first array")}if(target.dehancer!==undefined)return fail$1("production"!=="production"&&"An intercept reader was already established");target.dehancer=typeof propOrHandler==="function"?propOrHandler:handler;return function(){target.dehancer=undefined}}try{"production"}catch(e){var g=typeof window!=="undefined"?window:global;if(typeof process==="undefined")g.process={};g.process.env={}}(function(){function testCodeMinification(){}if(testCodeMinification.name!=="testCodeMinification"&&"production"!=="production"){console.warn("[mobx] you are running a minified build, but 'process.env.NODE_ENV' was not set to 'production' in your bundler. This results in an unnecessarily large and slow bundle")}})();if(typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__==="object"){__MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({spy:spy,extras:{getDebugName:getDebugName}})}if(false){var warnedAboutDefaultExport_1}}).call(this,__webpack_require__(72),__webpack_require__(32))},function(module,exports,__webpack_require__){if(false){var throwOnDirectAccess,isValidElement,REACT_ELEMENT_TYPE}else{module.exports=__webpack_require__(60)()}},function(module,exports,__webpack_require__){"use strict";function checkDCE(){if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__==="undefined"||typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE!=="function"){return}if(false){}try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE)}catch(err){console.error(err)}}if(true){checkDCE();module.exports=__webpack_require__(70)}else{}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);(function(global){__webpack_require__.d(__webpack_exports__,"propTypes",function(){return propTypes});__webpack_require__.d(__webpack_exports__,"PropTypes",function(){return propTypes});__webpack_require__.d(__webpack_exports__,"onError",function(){return onError});__webpack_require__.d(__webpack_exports__,"observer",function(){return observer});__webpack_require__.d(__webpack_exports__,"Observer",function(){return Observer});__webpack_require__.d(__webpack_exports__,"renderReporter",function(){return renderReporter});__webpack_require__.d(__webpack_exports__,"componentByNodeRegistery",function(){return componentByNodeRegistry});__webpack_require__.d(__webpack_exports__,"componentByNodeRegistry",function(){return componentByNodeRegistry});__webpack_require__.d(__webpack_exports__,"trackComponents",function(){return trackComponents});__webpack_require__.d(__webpack_exports__,"useStaticRendering",function(){return useStaticRendering});__webpack_require__.d(__webpack_exports__,"Provider",function(){return Provider});__webpack_require__.d(__webpack_exports__,"inject",function(){return inject});var mobx__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(2);var react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(0);var react__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);var react_dom__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(4);var react_dom__WEBPACK_IMPORTED_MODULE_2___default=__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_2__);var unstable_batchedUpdates$1=undefined;var commonjsGlobal=typeof window!=="undefined"?window:typeof global!=="undefined"?global:typeof self!=="undefined"?self:{};function createCommonjsModule(fn,module){return module={exports:{}},fn(module,module.exports),module.exports}var hoistNonReactStatics=createCommonjsModule(function(module,exports){(function(global,factory){module.exports=factory()})(commonjsGlobal,function(){"use strict";var REACT_STATICS={childContextTypes:true,contextTypes:true,defaultProps:true,displayName:true,getDefaultProps:true,getDerivedStateFromProps:true,mixins:true,propTypes:true,type:true};var KNOWN_STATICS={name:true,length:true,prototype:true,caller:true,callee:true,arguments:true,arity:true};var defineProperty=Object.defineProperty;var getOwnPropertyNames=Object.getOwnPropertyNames;var getOwnPropertySymbols=Object.getOwnPropertySymbols;var getOwnPropertyDescriptor=Object.getOwnPropertyDescriptor;var getPrototypeOf=Object.getPrototypeOf;var objectPrototype=getPrototypeOf&&getPrototypeOf(Object);return function hoistNonReactStatics(targetComponent,sourceComponent,blacklist){if(typeof sourceComponent!=="string"){if(objectPrototype){var inheritedComponent=getPrototypeOf(sourceComponent);if(inheritedComponent&&inheritedComponent!==objectPrototype){hoistNonReactStatics(targetComponent,inheritedComponent,blacklist)}}var keys=getOwnPropertyNames(sourceComponent);if(getOwnPropertySymbols){keys=keys.concat(getOwnPropertySymbols(sourceComponent))}for(var i=0;i<keys.length;++i){var key=keys[i];if(!REACT_STATICS[key]&&!KNOWN_STATICS[key]&&(!blacklist||!blacklist[key])){var descriptor=getOwnPropertyDescriptor(sourceComponent,key);try{defineProperty(targetComponent,key,descriptor)}catch(e){}}}return targetComponent}return targetComponent}})});var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj};var asyncGenerator=function(){function AwaitValue(value){this.value=value}function AsyncGenerator(gen){var front,back;function send(key,arg){return new Promise(function(resolve,reject){var request={key:key,arg:arg,resolve:resolve,reject:reject,next:null};if(back){back=back.next=request}else{front=back=request;resume(key,arg)}})}function resume(key,arg){try{var result=gen[key](arg);var value=result.value;if(value instanceof AwaitValue){Promise.resolve(value.value).then(function(arg){resume("next",arg)},function(arg){resume("throw",arg)})}else{settle(result.done?"return":"normal",result.value)}}catch(err){settle("throw",err)}}function settle(type,value){switch(type){case"return":front.resolve({value:value,done:true});break;case"throw":front.reject(value);break;default:front.resolve({value:value,done:false});break}front=front.next;if(front){resume(front.key,front.arg)}else{back=null}}this._invoke=send;if(typeof gen.return!=="function"){this.return=undefined}}if(typeof Symbol==="function"&&Symbol.asyncIterator){AsyncGenerator.prototype[Symbol.asyncIterator]=function(){return this}}AsyncGenerator.prototype.next=function(arg){return this._invoke("next",arg)};AsyncGenerator.prototype.throw=function(arg){return this._invoke("throw",arg)};AsyncGenerator.prototype.return=function(arg){return this._invoke("return",arg)};return{wrap:function(fn){return function(){return new AsyncGenerator(fn.apply(this,arguments))}},await:function(value){return new AwaitValue(value)}}}();var classCallCheck=function(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function")}};var createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();var inherits=function(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass)}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass};var possibleConstructorReturn=function(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return call&&(typeof call==="object"||typeof call==="function")?call:self};var EventEmitter=function(){function EventEmitter(){classCallCheck(this,EventEmitter);this.listeners=[]}createClass(EventEmitter,[{key:"on",value:function on(cb){var _this=this;this.listeners.push(cb);return function(){var index=_this.listeners.indexOf(cb);if(index!==-1)_this.listeners.splice(index,1)}}},{key:"emit",value:function emit(data){this.listeners.forEach(function(fn){return fn(data)})}}]);return EventEmitter}();function createChainableTypeChecker(validate){function checkType(isRequired,props,propName,componentName,location,propFullName){for(var _len=arguments.length,rest=Array(_len>6?_len-6:0),_key=6;_key<_len;_key++){rest[_key-6]=arguments[_key]}return Object(mobx__WEBPACK_IMPORTED_MODULE_0__["untracked"])(function(){componentName=componentName||"<<anonymous>>";propFullName=propFullName||propName;if(props[propName]==null){if(isRequired){var actual=props[propName]===null?"null":"undefined";return new Error("The "+location+" `"+propFullName+"` is marked as required "+"in `"+componentName+"`, but its value is `"+actual+"`.")}return null}else{return validate.apply(undefined,[props,propName,componentName,location,propFullName].concat(rest))}})}var chainedCheckType=checkType.bind(null,false);chainedCheckType.isRequired=checkType.bind(null,true);return chainedCheckType}function isSymbol(propType,propValue){if(propType==="symbol"){return true}if(propValue["@@toStringTag"]==="Symbol"){return true}if(typeof Symbol==="function"&&propValue instanceof Symbol){return true}return false}function getPropType(propValue){var propType=typeof propValue==="undefined"?"undefined":_typeof(propValue);if(Array.isArray(propValue)){return"array"}if(propValue instanceof RegExp){return"object"}if(isSymbol(propType,propValue)){return"symbol"}return propType}function getPreciseType(propValue){var propType=getPropType(propValue);if(propType==="object"){if(propValue instanceof Date){return"date"}else if(propValue instanceof RegExp){return"regexp"}}return propType}function createObservableTypeCheckerCreator(allowNativeType,mobxType){return createChainableTypeChecker(function(props,propName,componentName,location,propFullName){return Object(mobx__WEBPACK_IMPORTED_MODULE_0__["untracked"])(function(){if(allowNativeType){if(getPropType(props[propName])===mobxType.toLowerCase())return null}var mobxChecker=void 0;switch(mobxType){case"Array":mobxChecker=mobx__WEBPACK_IMPORTED_MODULE_0__["isObservableArray"];break;case"Object":mobxChecker=mobx__WEBPACK_IMPORTED_MODULE_0__["isObservableObject"];break;case"Map":mobxChecker=mobx__WEBPACK_IMPORTED_MODULE_0__["isObservableMap"];break;default:throw new Error("Unexpected mobxType: "+mobxType)}var propValue=props[propName];if(!mobxChecker(propValue)){var preciseType=getPreciseType(propValue);var nativeTypeExpectationMessage=allowNativeType?" or javascript `"+mobxType.toLowerCase()+"`":"";return new Error("Invalid prop `"+propFullName+"` of type `"+preciseType+"` supplied to"+" `"+componentName+"`, expected `mobx.Observable"+mobxType+"`"+nativeTypeExpectationMessage+".")}return null})})}function createObservableArrayOfTypeChecker(allowNativeType,typeChecker){return createChainableTypeChecker(function(props,propName,componentName,location,propFullName){for(var _len2=arguments.length,rest=Array(_len2>5?_len2-5:0),_key2=5;_key2<_len2;_key2++){rest[_key2-5]=arguments[_key2]}return Object(mobx__WEBPACK_IMPORTED_MODULE_0__["untracked"])(function(){if(typeof typeChecker!=="function"){return new Error("Property `"+propFullName+"` of component `"+componentName+"` has "+"invalid PropType notation.")}var error=createObservableTypeCheckerCreator(allowNativeType,"Array")(props,propName,componentName);if(error instanceof Error)return error;var propValue=props[propName];for(var i=0;i<propValue.length;i++){error=typeChecker.apply(undefined,[propValue,i,componentName,location,propFullName+"["+i+"]"].concat(rest));if(error instanceof Error)return error}return null})})}var observableArray=createObservableTypeCheckerCreator(false,"Array");var observableArrayOf=createObservableArrayOfTypeChecker.bind(null,false);var observableMap=createObservableTypeCheckerCreator(false,"Map");var observableObject=createObservableTypeCheckerCreator(false,"Object");var arrayOrObservableArray=createObservableTypeCheckerCreator(true,"Array");var arrayOrObservableArrayOf=createObservableArrayOfTypeChecker.bind(null,true);var objectOrObservableObject=createObservableTypeCheckerCreator(true,"Object");var propTypes=Object.freeze({observableArray:observableArray,observableArrayOf:observableArrayOf,observableMap:observableMap,observableObject:observableObject,arrayOrObservableArray:arrayOrObservableArray,arrayOrObservableArrayOf:arrayOrObservableArrayOf,objectOrObservableObject:objectOrObservableObject});function isStateless(component){return!(component.prototype&&component.prototype.render)}var injectorContextTypes={mobxStores:objectOrObservableObject};Object.seal(injectorContextTypes);var proxiedInjectorProps={contextTypes:{get:function get$$1(){return injectorContextTypes},set:function set$$1(_){console.warn("Mobx Injector: you are trying to attach `contextTypes` on an component decorated with `inject` (or `observer`) HOC. Please specify the contextTypes on the wrapped component instead. It is accessible through the `wrappedComponent`")},configurable:true,enumerable:false},isMobxInjector:{value:true,writable:true,configurable:true,enumerable:true}};function createStoreInjector(grabStoresFn,component,injectNames){var _class,_temp2;var displayName="inject-"+(component.displayName||component.name||component.constructor&&component.constructor.name||"Unknown");if(injectNames)displayName+="-with-"+injectNames;var Injector=(_temp2=_class=function(_Component){inherits(Injector,_Component);function Injector(){var _ref;var _temp,_this,_ret;classCallCheck(this,Injector);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key]}return _ret=(_temp=(_this=possibleConstructorReturn(this,(_ref=Injector.__proto__||Object.getPrototypeOf(Injector)).call.apply(_ref,[this].concat(args))),_this),_this.storeRef=function(instance){_this.wrappedInstance=instance},_temp),possibleConstructorReturn(_this,_ret)}createClass(Injector,[{key:"render",value:function render(){var newProps={};for(var key in this.props){if(this.props.hasOwnProperty(key)){newProps[key]=this.props[key]}}var additionalProps=grabStoresFn(this.context.mobxStores||{},newProps,this.context)||{};for(var _key2 in additionalProps){newProps[_key2]=additionalProps[_key2]}if(!isStateless(component)){newProps.ref=this.storeRef}return Object(react__WEBPACK_IMPORTED_MODULE_1__["createElement"])(component,newProps)}}]);return Injector}(react__WEBPACK_IMPORTED_MODULE_1__["Component"]),_class.displayName=displayName,_temp2);hoistNonReactStatics(Injector,component);Injector.wrappedComponent=component;Object.defineProperties(Injector,proxiedInjectorProps);return Injector}function grabStoresByName(storeNames){return function(baseStores,nextProps){storeNames.forEach(function(storeName){if(storeName in nextProps)return;if(!(storeName in baseStores))throw new Error("MobX injector: Store '"+storeName+"' is not available! Make sure it is provided by some Provider");nextProps[storeName]=baseStores[storeName]});return nextProps}}function inject(){var grabStoresFn=void 0;if(typeof arguments[0]==="function"){grabStoresFn=arguments[0];return function(componentClass){var injected=createStoreInjector(grabStoresFn,componentClass);injected.isMobxInjector=false;injected=observer(injected);injected.isMobxInjector=true;return injected}}else{var storeNames=[];for(var i=0;i<arguments.length;i++){storeNames[i]=arguments[i]}grabStoresFn=grabStoresByName(storeNames);return function(componentClass){return createStoreInjector(grabStoresFn,componentClass,storeNames.join("-"))}}}var isDevtoolsEnabled=false;var isUsingStaticRendering=false;var warnedAboutObserverInjectDeprecation=false;var componentByNodeRegistry=typeof WeakMap!=="undefined"?new WeakMap:undefined;var renderReporter=new EventEmitter;function findDOMNode$2(component){if(react_dom__WEBPACK_IMPORTED_MODULE_2__["findDOMNode"]){try{return Object(react_dom__WEBPACK_IMPORTED_MODULE_2__["findDOMNode"])(component)}catch(e){return null}}return null}function reportRendering(component){var node=findDOMNode$2(component);if(node&&componentByNodeRegistry)componentByNodeRegistry.set(node,component);renderReporter.emit({event:"render",renderTime:component.__$mobRenderEnd-component.__$mobRenderStart,totalTime:Date.now()-component.__$mobRenderStart,component:component,node:node})}function trackComponents(){if(typeof WeakMap==="undefined")throw new Error("[mobx-react] tracking components is not supported in this browser.");if(!isDevtoolsEnabled)isDevtoolsEnabled=true}function useStaticRendering(useStaticRendering){isUsingStaticRendering=useStaticRendering}var errorsReporter=new EventEmitter;function patch(target,funcName){var runMixinFirst=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var base=target[funcName];var mixinFunc=reactiveMixin[funcName];var f=!base?mixinFunc:runMixinFirst===true?function(){mixinFunc.apply(this,arguments);base.apply(this,arguments)}:function(){base.apply(this,arguments);mixinFunc.apply(this,arguments)};target[funcName]=f}function shallowEqual(objA,objB){if(is(objA,objB))return true;if((typeof objA==="undefined"?"undefined":_typeof(objA))!=="object"||objA===null||(typeof objB==="undefined"?"undefined":_typeof(objB))!=="object"||objB===null){return false}var keysA=Object.keys(objA);var keysB=Object.keys(objB);if(keysA.length!==keysB.length)return false;for(var i=0;i<keysA.length;i++){if(!hasOwnProperty.call(objB,keysA[i])||!is(objA[keysA[i]],objB[keysA[i]])){return false}}return true}function is(x,y){if(x===y){return x!==0||1/x===1/y}else{return x!==x&&y!==y}}function makeComponentReactive(render){var _this2=this;if(isUsingStaticRendering===true)return render.call(this);function makePropertyObservableReference(propName){var valueHolder=this[propName];var atom=Object(mobx__WEBPACK_IMPORTED_MODULE_0__["createAtom"])("reactive "+propName);Object.defineProperty(this,propName,{configurable:true,enumerable:true,get:function get$$1(){atom.reportObserved();return valueHolder},set:function set$$1(v){if(!isForcingUpdate&&!shallowEqual(valueHolder,v)){valueHolder=v;skipRender=true;atom.reportChanged();skipRender=false}else{valueHolder=v}}})}function reactiveRender(){var _this=this;isRenderingPending=false;var exception=undefined;var rendering=undefined;reaction.track(function(){if(isDevtoolsEnabled){_this.__$mobRenderStart=Date.now()}try{rendering=Object(mobx__WEBPACK_IMPORTED_MODULE_0__["_allowStateChanges"])(false,baseRender)}catch(e){exception=e}if(isDevtoolsEnabled){_this.__$mobRenderEnd=Date.now()}});if(exception){errorsReporter.emit(exception);throw exception}return rendering}var initialName=this.displayName||this.name||this.constructor&&(this.constructor.displayName||this.constructor.name)||"<component>";var rootNodeID=this._reactInternalInstance&&this._reactInternalInstance._rootNodeID||this._reactInternalFiber&&this._reactInternalFiber._debugID;var skipRender=false;var isForcingUpdate=false;makePropertyObservableReference.call(this,"props");makePropertyObservableReference.call(this,"state");var baseRender=render.bind(this);var isRenderingPending=false;var reaction=new mobx__WEBPACK_IMPORTED_MODULE_0__["Reaction"](initialName+"#"+rootNodeID+".render()",function(){if(!isRenderingPending){isRenderingPending=true;if(typeof _this2.componentWillReact==="function")_this2.componentWillReact();if(_this2.__$mobxIsUnmounted!==true){var hasError=true;try{isForcingUpdate=true;if(!skipRender)react__WEBPACK_IMPORTED_MODULE_1__["Component"].prototype.forceUpdate.call(_this2);hasError=false}finally{isForcingUpdate=false;if(hasError)reaction.dispose()}}}});reaction.reactComponent=this;reactiveRender.$mobx=reaction;this.render=reactiveRender;return reactiveRender.call(this)}var reactiveMixin={componentWillUnmount:function componentWillUnmount(){if(isUsingStaticRendering===true)return;this.render.$mobx&&this.render.$mobx.dispose();this.__$mobxIsUnmounted=true;if(isDevtoolsEnabled){var node=findDOMNode$2(this);if(node&&componentByNodeRegistry){componentByNodeRegistry.delete(node)}renderReporter.emit({event:"destroy",component:this,node:node})}},componentDidMount:function componentDidMount(){if(isDevtoolsEnabled){reportRendering(this)}},componentDidUpdate:function componentDidUpdate(){if(isDevtoolsEnabled){reportRendering(this)}},shouldComponentUpdate:function shouldComponentUpdate(nextProps,nextState){if(isUsingStaticRendering){console.warn("[mobx-react] It seems that a re-rendering of a React component is triggered while in static (server-side) mode. Please make sure components are rendered only once server-side.")}if(this.state!==nextState){return true}return!shallowEqual(this.props,nextProps)}};function observer(arg1,arg2){if(typeof arg1==="string"){throw new Error("Store names should be provided as array")}if(Array.isArray(arg1)){if(!warnedAboutObserverInjectDeprecation){warnedAboutObserverInjectDeprecation=true;console.warn('Mobx observer: Using observer to inject stores is deprecated since 4.0. Use `@inject("store1", "store2") @observer ComponentClass` or `inject("store1", "store2")(observer(componentClass))` instead of `@observer(["store1", "store2"]) ComponentClass`')}if(!arg2){return function(componentClass){return observer(arg1,componentClass)}}else{return inject.apply(null,arg1)(observer(arg2))}}var componentClass=arg1;if(componentClass.isMobxInjector===true){console.warn("Mobx observer: You are trying to use 'observer' on a component that already has 'inject'. Please apply 'observer' before applying 'inject'")}if(componentClass.__proto__===react__WEBPACK_IMPORTED_MODULE_1__["PureComponent"]){console.warn("Mobx observer: You are using 'observer' on React.PureComponent. These two achieve two opposite goals and should not be used together")}if(typeof componentClass==="function"&&(!componentClass.prototype||!componentClass.prototype.render)&&!componentClass.isReactClass&&!react__WEBPACK_IMPORTED_MODULE_1__["Component"].isPrototypeOf(componentClass)){var _class,_temp;var observerComponent=observer((_temp=_class=function(_Component){inherits(_class,_Component);function _class(){classCallCheck(this,_class);return possibleConstructorReturn(this,(_class.__proto__||Object.getPrototypeOf(_class)).apply(this,arguments))}createClass(_class,[{key:"render",value:function render(){return componentClass.call(this,this.props,this.context)}}]);return _class}(react__WEBPACK_IMPORTED_MODULE_1__["Component"]),_class.displayName=componentClass.displayName||componentClass.name,_class.contextTypes=componentClass.contextTypes,_class.propTypes=componentClass.propTypes,_class.defaultProps=componentClass.defaultProps,_temp));hoistNonReactStatics(observerComponent,componentClass);return observerComponent}if(!componentClass){throw new Error("Please pass a valid component to 'observer'")}var target=componentClass.prototype||componentClass;mixinLifecycleEvents(target);componentClass.isMobXReactObserver=true;var baseRender=target.render;target.render=function(){return makeComponentReactive.call(this,baseRender)};return componentClass}function mixinLifecycleEvents(target){["componentDidMount","componentWillUnmount","componentDidUpdate"].forEach(function(funcName){patch(target,funcName)});if(!target.shouldComponentUpdate){target.shouldComponentUpdate=reactiveMixin.shouldComponentUpdate}else{console.warn("Use `shouldComponentUpdate` in an `observer` based component breaks the behavior of `observer` and might lead to unexpected results. Manually implementing `sCU` should not be needed when using mobx-react.")}}var Observer=observer(function(_ref){var children=_ref.children,observerInject=_ref.inject,render=_ref.render;var component=children||render;if(typeof component==="undefined"){return null}if(!observerInject){return component()}console.warn("<Observer inject=.../> is no longer supported. Please use inject on the enclosing component instead");var InjectComponent=inject(observerInject)(component);return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(InjectComponent,null)});Observer.displayName="Observer";var ObserverPropsCheck=function ObserverPropsCheck(props,key,componentName,location,propFullName){var extraKey=key==="children"?"render":"children";if(typeof props[key]==="function"&&typeof props[extraKey]==="function"){return new Error("Invalid prop,do not use children and render in the same time in`"+componentName)}if(typeof props[key]==="function"||typeof props[extraKey]==="function"){return}return new Error("Invalid prop `"+propFullName+"` of type `"+_typeof(props[key])+"` supplied to"+" `"+componentName+"`, expected `function`.")};Observer.propTypes={render:ObserverPropsCheck,children:ObserverPropsCheck};function componentWillMount(){var state=this.constructor.getDerivedStateFromProps(this.props,this.state);if(state!==null&&state!==undefined){this.setState(state)}}function componentWillReceiveProps(nextProps){var state=this.constructor.getDerivedStateFromProps(nextProps,this.state);if(state!==null&&state!==undefined){this.setState(state)}}function componentWillUpdate(nextProps,nextState){try{var prevProps=this.props;var prevState=this.state;this.props=nextProps;this.state=nextState;this.__reactInternalSnapshotFlag=true;this.__reactInternalSnapshot=this.getSnapshotBeforeUpdate(prevProps,prevState)}finally{this.props=prevProps;this.state=prevState}}componentWillMount.__suppressDeprecationWarning=true;componentWillReceiveProps.__suppressDeprecationWarning=true;componentWillUpdate.__suppressDeprecationWarning=true;function polyfill(Component$$1){var prototype=Component$$1.prototype;if(!prototype||!prototype.isReactComponent){throw new Error("Can only polyfill class components")}if(typeof Component$$1.getDerivedStateFromProps!=="function"&&typeof prototype.getSnapshotBeforeUpdate!=="function"){return Component$$1}var foundWillMountName=null;var foundWillReceivePropsName=null;var foundWillUpdateName=null;if(typeof prototype.componentWillMount==="function"){foundWillMountName="componentWillMount"}else if(typeof prototype.UNSAFE_componentWillMount==="function"){foundWillMountName="UNSAFE_componentWillMount"}if(typeof prototype.componentWillReceiveProps==="function"){foundWillReceivePropsName="componentWillReceiveProps"}else if(typeof prototype.UNSAFE_componentWillReceiveProps==="function"){foundWillReceivePropsName="UNSAFE_componentWillReceiveProps"}if(typeof prototype.componentWillUpdate==="function"){foundWillUpdateName="componentWillUpdate"}else if(typeof prototype.UNSAFE_componentWillUpdate==="function"){foundWillUpdateName="UNSAFE_componentWillUpdate"}if(foundWillMountName!==null||foundWillReceivePropsName!==null||foundWillUpdateName!==null){var componentName=Component$$1.displayName||Component$$1.name;var newApiName=typeof Component$$1.getDerivedStateFromProps==="function"?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()";throw Error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n"+componentName+" uses "+newApiName+" but also contains the following legacy lifecycles:"+(foundWillMountName!==null?"\n  "+foundWillMountName:"")+(foundWillReceivePropsName!==null?"\n  "+foundWillReceivePropsName:"")+(foundWillUpdateName!==null?"\n  "+foundWillUpdateName:"")+"\n\nThe above lifecycles should be removed. Learn more about this warning here:\n"+"https://fb.me/react-async-component-lifecycle-hooks")}if(typeof Component$$1.getDerivedStateFromProps==="function"){prototype.componentWillMount=componentWillMount;prototype.componentWillReceiveProps=componentWillReceiveProps}if(typeof prototype.getSnapshotBeforeUpdate==="function"){if(typeof prototype.componentDidUpdate!=="function"){throw new Error("Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype")}prototype.componentWillUpdate=componentWillUpdate;var componentDidUpdate=prototype.componentDidUpdate;prototype.componentDidUpdate=function componentDidUpdatePolyfill(prevProps,prevState,maybeSnapshot){var snapshot=this.__reactInternalSnapshotFlag?this.__reactInternalSnapshot:maybeSnapshot;componentDidUpdate.call(this,prevProps,prevState,snapshot)}}return Component$$1}var _class;var _temp;var specialReactKeys={children:true,key:true,ref:true};var Provider=(_temp=_class=function(_Component){inherits(Provider,_Component);function Provider(props,context){classCallCheck(this,Provider);var _this=possibleConstructorReturn(this,(Provider.__proto__||Object.getPrototypeOf(Provider)).call(this,props,context));_this.state=props||{};return _this}createClass(Provider,[{key:"render",value:function render(){return react__WEBPACK_IMPORTED_MODULE_1__["Children"].only(this.props.children)}},{key:"getChildContext",value:function getChildContext(){var stores={};var baseStores=this.context.mobxStores;if(baseStores)for(var key in baseStores){stores[key]=baseStores[key]}for(var _key in this.state){if(!specialReactKeys[_key]&&_key!=="suppressChangedStoreWarning")stores[_key]=this.props[_key]}return{mobxStores:stores}}}],[{key:"getDerivedStateFromProps",value:function getDerivedStateFromProps(nextProps,prevState){if(!nextProps)return null;if(!prevState)return nextProps;if(Object.keys(nextProps).length!==Object.keys(prevState).length)console.warn("MobX Provider: The set of provided stores has changed. Please avoid changing stores as the change might not propagate to all children");if(!nextProps.suppressChangedStoreWarning)for(var key in nextProps){if(!specialReactKeys[key]&&prevState[key]!==nextProps[key])console.warn("MobX Provider: Provided store '"+key+"' has changed. Please avoid replacing stores as the change might not propagate to all children")}return nextProps}}]);return Provider}(react__WEBPACK_IMPORTED_MODULE_1__["Component"]),_class.contextTypes={mobxStores:objectOrObservableObject},_class.childContextTypes={mobxStores:objectOrObservableObject.isRequired},_temp);polyfill(Provider);if(!react__WEBPACK_IMPORTED_MODULE_1__["Component"])throw new Error("mobx-react requires React to be available");if(!mobx__WEBPACK_IMPORTED_MODULE_0__["spy"])throw new Error("mobx-react requires mobx to be available");if(typeof react_dom__WEBPACK_IMPORTED_MODULE_2__["unstable_batchedUpdates"]==="function")Object(mobx__WEBPACK_IMPORTED_MODULE_0__["configure"])({reactionScheduler:react_dom__WEBPACK_IMPORTED_MODULE_2__["unstable_batchedUpdates"]});else if(typeof unstable_batchedUpdates$1==="function")Object(mobx__WEBPACK_IMPORTED_MODULE_0__["configure"])({reactionScheduler:unstable_batchedUpdates$1});var onError=function onError(fn){return errorsReporter.on(fn)};if((typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__==="undefined"?"undefined":_typeof(__MOBX_DEVTOOLS_GLOBAL_HOOK__))==="object"){var mobx$1={spy:mobx__WEBPACK_IMPORTED_MODULE_0__["spy"],extras:{getDebugName:mobx__WEBPACK_IMPORTED_MODULE_0__["getDebugName"]}};var mobxReact={renderReporter:renderReporter,componentByNodeRegistry:componentByNodeRegistry,componentByNodeRegistery:componentByNodeRegistry,trackComponents:trackComponents};__MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobxReact(mobxReact,mobx$1)}}).call(this,__webpack_require__(32))},function(module,exports,__webpack_require__){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var getOwnPropertySymbols=Object.getOwnPropertySymbols;var hasOwnProperty=Object.prototype.hasOwnProperty;var propIsEnumerable=Object.prototype.propertyIsEnumerable;function toObject(val){if(val===null||val===undefined){throw new TypeError("Object.assign cannot be called with null or undefined")}return Object(val)}function shouldUseNative(){try{if(!Object.assign){return false}var test1=new String("abc");test1[5]="de";if(Object.getOwnPropertyNames(test1)[0]==="5"){return false}var test2={};for(var i=0;i<10;i++){test2["_"+String.fromCharCode(i)]=i}var order2=Object.getOwnPropertyNames(test2).map(function(n){return test2[n]});if(order2.join("")!=="0123456789"){return false}var test3={};"abcdefghijklmnopqrst".split("").forEach(function(letter){test3[letter]=letter});if(Object.keys(Object.assign({},test3)).join("")!=="abcdefghijklmnopqrst"){return false}return true}catch(err){return false}}module.exports=shouldUseNative()?Object.assign:function(target,source){var from;var to=toObject(target);var symbols;for(var s=1;s<arguments.length;s++){from=Object(arguments[s]);for(var key in from){if(hasOwnProperty.call(from,key)){to[key]=from[key]}}if(getOwnPropertySymbols){symbols=getOwnPropertySymbols(from);for(var i=0;i<symbols.length;i++){if(propIsEnumerable.call(from,symbols[i])){to[symbols[i]]=from[symbols[i]]}}}}return to}},function(module,exports,__webpack_require__){"use strict";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function")}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return call&&(typeof call==="object"||typeof call==="function")?call:self}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass)}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass}var KernelBase=__webpack_require__(26);var utils=__webpack_require__(1);var Texture=__webpack_require__(8);var fragShaderString=__webpack_require__(45);var vertShaderString=__webpack_require__(44);var kernelString=__webpack_require__(43);var canvases=[];var maxTexSizes={};module.exports=function(_KernelBase){_inherits(WebGLKernel,_KernelBase);function WebGLKernel(fnString,settings){_classCallCheck(this,WebGLKernel);var _this=_possibleConstructorReturn(this,(WebGLKernel.__proto__||Object.getPrototypeOf(WebGLKernel)).call(this,fnString,settings));_this.textureCache={};_this.threadDim={};_this.programUniformLocationCache={};_this.framebuffer=null;_this.buffer=null;_this.program=null;_this.outputToTexture=settings.outputToTexture;_this.endianness=utils.systemEndianness();_this.subKernelOutputTextures=null;_this.subKernelOutputVariableNames=null;_this.argumentsLength=0;_this.compiledFragShaderString=null;_this.compiledVertShaderString=null;_this.drawBuffersMap=null;_this.outputTexture=null;_this.maxTexSize=null;_this.uniform1fCache={};_this.uniform1iCache={};_this.uniform2fCache={};_this.uniform2fvCache={};_this.uniform3fvCache={};if(!_this._webGl)_this._webGl=_this.initWebGl();return _this}_createClass(WebGLKernel,[{key:"initWebGl",value:function initWebGl(){return utils.initWebGl(this.getCanvas())}},{key:"validateOptions",value:function validateOptions(){var isFloatReadPixel=utils.isFloatReadPixelsSupported();if(this.floatTextures===true&&!utils.OES_texture_float){throw new Error("Float textures are not supported on this browser")}else if(this.floatOutput===true&&this.floatOutputForce!==true&&!isFloatReadPixel){throw new Error("Float texture outputs are not supported on this browser")}else if(this.floatTextures===undefined&&utils.OES_texture_float){this.floatTextures=true;this.floatOutput=isFloatReadPixel}if(!this.output||this.output.length===0){if(arguments.length!==1){throw new Error("Auto output only supported for kernels with only one input")}var argType=utils.getArgumentType(arguments[0]);if(argType==="Array"){this.output=utils.getDimensions(argType)}else if(argType==="Texture"){this.output=arguments[0].output}else{throw new Error("Auto output not supported for input type: "+argType)}}this.texSize=utils.dimToTexSize({floatTextures:this.floatTextures,floatOutput:this.floatOutput},this.output,true);if(this.graphical){if(this.output.length!==2){throw new Error("Output must have 2 dimensions on graphical mode")}if(this.floatOutput){this.floatOutput=false;console.warn("Cannot use graphical mode and float output at the same time")}this.texSize=utils.clone(this.output)}else if(this.floatOutput===undefined&&utils.OES_texture_float){this.floatOutput=true}}},{key:"updateMaxTexSize",value:function updateMaxTexSize(){var texSize=this.texSize;var canvas=this._canvas;if(this.maxTexSize===null){var canvasIndex=canvases.indexOf(canvas);if(canvasIndex===-1){canvasIndex=canvases.length;canvases.push(canvas);maxTexSizes[canvasIndex]=[texSize[0],texSize[1]]}this.maxTexSize=maxTexSizes[canvasIndex]}if(this.maxTexSize[0]<texSize[0]){this.maxTexSize[0]=texSize[0]}if(this.maxTexSize[1]<texSize[1]){this.maxTexSize[1]=texSize[1]}}},{key:"build",value:function build(){this.validateOptions();this.setupParams(arguments);this.updateMaxTexSize();var texSize=this.texSize;var gl=this._webGl;var canvas=this._canvas;gl.enable(gl.SCISSOR_TEST);gl.viewport(0,0,this.maxTexSize[0],this.maxTexSize[1]);canvas.width=this.maxTexSize[0];canvas.height=this.maxTexSize[1];var threadDim=this.threadDim=utils.clone(this.output);while(threadDim.length<3){threadDim.push(1)}if(this.functionBuilder)this._addKernels();var compiledVertShaderString=this._getVertShaderString(arguments);var vertShader=gl.createShader(gl.VERTEX_SHADER);gl.shaderSource(vertShader,compiledVertShaderString);gl.compileShader(vertShader);var compiledFragShaderString=this._getFragShaderString(arguments);var fragShader=gl.createShader(gl.FRAGMENT_SHADER);gl.shaderSource(fragShader,compiledFragShaderString);gl.compileShader(fragShader);if(!gl.getShaderParameter(vertShader,gl.COMPILE_STATUS)){console.log(compiledVertShaderString);console.error("An error occurred compiling the shaders: "+gl.getShaderInfoLog(vertShader));throw new Error("Error compiling vertex shader")}if(!gl.getShaderParameter(fragShader,gl.COMPILE_STATUS)){console.log(compiledFragShaderString);console.error("An error occurred compiling the shaders: "+gl.getShaderInfoLog(fragShader));throw new Error("Error compiling fragment shader")}if(this.debug){console.log("Options:");console.dir(this);console.log("GLSL Shader Output:");console.log(compiledFragShaderString)}var program=this.program=gl.createProgram();gl.attachShader(program,vertShader);gl.attachShader(program,fragShader);gl.linkProgram(program);this.framebuffer=gl.createFramebuffer();this.framebuffer.width=texSize[0];this.framebuffer.height=texSize[1];var vertices=new Float32Array([-1,-1,1,-1,-1,1,1,1]);var texCoords=new Float32Array([0,0,1,0,0,1,1,1]);var texCoordOffset=vertices.byteLength;var buffer=this.buffer;if(!buffer){buffer=this.buffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,buffer);gl.bufferData(gl.ARRAY_BUFFER,vertices.byteLength+texCoords.byteLength,gl.STATIC_DRAW)}else{gl.bindBuffer(gl.ARRAY_BUFFER,buffer)}gl.bufferSubData(gl.ARRAY_BUFFER,0,vertices);gl.bufferSubData(gl.ARRAY_BUFFER,texCoordOffset,texCoords);var aPosLoc=gl.getAttribLocation(this.program,"aPos");gl.enableVertexAttribArray(aPosLoc);gl.vertexAttribPointer(aPosLoc,2,gl.FLOAT,gl.FALSE,0,0);var aTexCoordLoc=gl.getAttribLocation(this.program,"aTexCoord");gl.enableVertexAttribArray(aTexCoordLoc);gl.vertexAttribPointer(aTexCoordLoc,2,gl.FLOAT,gl.FALSE,0,texCoordOffset);gl.bindFramebuffer(gl.FRAMEBUFFER,this.framebuffer);if(!this.outputImmutable){this._setupOutputTexture();if(this.subKernelOutputVariableNames!==null&&this.subKernelOutputVariableNames.length>0){this._setupSubOutputTextures(this.subKernelOutputVariableNames.length)}}}},{key:"run",value:function run(){if(this.program===null){this.build.apply(this,arguments)}var paramNames=this.paramNames;var paramTypes=this.paramTypes;var texSize=this.texSize;var gl=this._webGl;gl.useProgram(this.program);gl.scissor(0,0,texSize[0],texSize[1]);if(!this.hardcodeConstants){this.setUniform3fv("uOutputDim",this.threadDim);this.setUniform2fv("uTexSize",texSize)}this.setUniform2f("ratio",texSize[0]/this.maxTexSize[0],texSize[1]/this.maxTexSize[1]);this.argumentsLength=0;for(var texIndex=0;texIndex<paramNames.length;texIndex++){this._addArgument(arguments[texIndex],paramTypes[texIndex],paramNames[texIndex])}if(this.graphical){gl.bindRenderbuffer(gl.RENDERBUFFER,null);gl.bindFramebuffer(gl.FRAMEBUFFER,null);gl.drawArrays(gl.TRIANGLE_STRIP,0,4);return}gl.bindFramebuffer(gl.FRAMEBUFFER,this.framebuffer);if(this.outputImmutable){this._setupOutputTexture()}var outputTexture=this.outputTexture;if(this.subKernelOutputVariableNames!==null){if(this.outputImmutable){this.subKernelOutputTextures=[];this._setupSubOutputTextures(this.subKernelOutputVariableNames.length)}this.drawBuffers.drawBuffersWEBGL(this.drawBuffersMap)}gl.drawArrays(gl.TRIANGLE_STRIP,0,4);if(this.subKernelOutputTextures!==null){if(this.subKernels!==null){var output=[];output.result=this.renderOutput(outputTexture);for(var i=0;i<this.subKernels.length;i++){output.push(new Texture(this.subKernelOutputTextures[i],texSize,this.threadDim,this.output,this._webGl))}return output}else if(this.subKernelProperties!==null){var _output={result:this.renderOutput(outputTexture)};var _i=0;for(var p in this.subKernelProperties){if(!this.subKernelProperties.hasOwnProperty(p))continue;_output[p]=new Texture(this.subKernelOutputTextures[_i],texSize,this.threadDim,this.output,this._webGl);_i++}return _output}}return this.renderOutput(outputTexture)}},{key:"renderOutput",value:function renderOutput(outputTexture){var texSize=this.texSize;var gl=this._webGl;var threadDim=this.threadDim;var output=this.output;if(this.outputToTexture){return new Texture(outputTexture,texSize,this.threadDim,output,this._webGl)}else{var result=void 0;if(this.floatOutput){result=new Float32Array(texSize[0]*texSize[1]*4);gl.readPixels(0,0,texSize[0],texSize[1],gl.RGBA,gl.FLOAT,result)}else{var bytes=new Uint8Array(texSize[0]*texSize[1]*4);gl.readPixels(0,0,texSize[0],texSize[1],gl.RGBA,gl.UNSIGNED_BYTE,bytes);result=new Float32Array(bytes.buffer)}result=result.subarray(0,threadDim[0]*threadDim[1]*threadDim[2]);if(output.length===1){return result}else if(output.length===2){return utils.splitArray(result,output[0])}else if(output.length===3){var cube=utils.splitArray(result,output[0]*output[1]);return cube.map(function(x){return utils.splitArray(x,output[0])})}}}},{key:"getOutputTexture",value:function getOutputTexture(){return this.outputTexture}},{key:"_setupOutputTexture",value:function _setupOutputTexture(){var gl=this._webGl;var texSize=this.texSize;var texture=this.outputTexture=this._webGl.createTexture();gl.activeTexture(gl.TEXTURE0+this.paramNames.length);gl.bindTexture(gl.TEXTURE_2D,texture);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);if(this.floatOutput){gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,texSize[0],texSize[1],0,gl.RGBA,gl.FLOAT,null)}else{gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,texSize[0],texSize[1],0,gl.RGBA,gl.UNSIGNED_BYTE,null)}gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,texture,0)}},{key:"_setupSubOutputTextures",value:function _setupSubOutputTextures(length){var gl=this._webGl;var texSize=this.texSize;var drawBuffersMap=this.drawBuffersMap=[gl.COLOR_ATTACHMENT0];var textures=this.subKernelOutputTextures=[];for(var i=0;i<length;i++){var texture=this._webGl.createTexture();textures.push(texture);drawBuffersMap.push(gl.COLOR_ATTACHMENT0+i+1);gl.activeTexture(gl.TEXTURE0+this.paramNames.length+i);gl.bindTexture(gl.TEXTURE_2D,texture);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);if(this.floatOutput){gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,texSize[0],texSize[1],0,gl.RGBA,gl.FLOAT,null)}else{gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,texSize[0],texSize[1],0,gl.RGBA,gl.UNSIGNED_BYTE,null)}gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0+i+1,gl.TEXTURE_2D,texture,0)}}},{key:"getArgumentTexture",value:function getArgumentTexture(name){return this.getTextureCache("ARGUMENT_"+name)}},{key:"getTextureCache",value:function getTextureCache(name){if(this.textureCache.hasOwnProperty(name)){return this.textureCache[name]}return this.textureCache[name]=this._webGl.createTexture()}},{key:"detachTextureCache",value:function detachTextureCache(name){delete this.textureCache[name]}},{key:"setUniform1f",value:function setUniform1f(name,value){if(this.uniform1fCache.hasOwnProperty(name)){var cache=this.uniform1fCache[name];if(value===cache){return}}this.uniform1fCache[name]=value;var loc=this.getUniformLocation(name);this._webGl.uniform1f(loc,value)}},{key:"setUniform1i",value:function setUniform1i(name,value){if(this.uniform1iCache.hasOwnProperty(name)){var cache=this.uniform1iCache[name];if(value===cache){return}}this.uniform1iCache[name]=value;var loc=this.getUniformLocation(name);this._webGl.uniform1i(loc,value)}},{key:"setUniform2f",value:function setUniform2f(name,value1,value2){if(this.uniform2fCache.hasOwnProperty(name)){var cache=this.uniform2fCache[name];if(value1===cache[0]&&value2===cache[1]){return}}this.uniform2fCache[name]=[value1,value2];var loc=this.getUniformLocation(name);this._webGl.uniform2f(loc,value1,value2)}},{key:"setUniform2fv",value:function setUniform2fv(name,value){if(this.uniform2fvCache.hasOwnProperty(name)){var cache=this.uniform2fvCache[name];if(value[0]===cache[0]&&value[1]===cache[1]){return}}this.uniform2fvCache[name]=value;var loc=this.getUniformLocation(name);this._webGl.uniform2fv(loc,value)}},{key:"setUniform3fv",value:function setUniform3fv(name,value){if(this.uniform3fvCache.hasOwnProperty(name)){var cache=this.uniform3fvCache[name];if(value[0]===cache[0]&&value[1]===cache[1]&&value[2]===cache[2]){return}}this.uniform3fvCache[name]=value;var loc=this.getUniformLocation(name);this._webGl.uniform3fv(loc,value)}},{key:"getUniformLocation",value:function getUniformLocation(name){if(this.programUniformLocationCache.hasOwnProperty(name)){return this.programUniformLocationCache[name]}return this.programUniformLocationCache[name]=this._webGl.getUniformLocation(this.program,name)}},{key:"_getFragShaderArtifactMap",value:function _getFragShaderArtifactMap(args){return{HEADER:this._getHeaderString(),LOOP_MAX:this._getLoopMaxString(),CONSTANTS:this._getConstantsString(),DECODE32_ENDIANNESS:this._getDecode32EndiannessString(),ENCODE32_ENDIANNESS:this._getEncode32EndiannessString(),GET_WRAPAROUND:this._getGetWraparoundString(),GET_TEXTURE_CHANNEL:this._getGetTextureChannelString(),GET_TEXTURE_INDEX:this._getGetTextureIndexString(),GET_RESULT:this._getGetResultString(),MAIN_PARAMS:this._getMainParamsString(args),MAIN_CONSTANTS:this._getMainConstantsString(),KERNEL:this._getKernelString(),MAIN_RESULT:this._getMainResultString()}}},{key:"_addArgument",value:function _addArgument(value,type,name){var gl=this._webGl;var argumentTexture=this.getArgumentTexture(name);if(value instanceof Texture){type="Texture"}switch(type){case"Array":{var dim=utils.getDimensions(value,true);var size=utils.dimToTexSize({floatTextures:this.floatTextures,floatOutput:this.floatOutput},dim);gl.activeTexture(gl.TEXTURE0+this.argumentsLength);gl.bindTexture(gl.TEXTURE_2D,argumentTexture);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);var length=size[0]*size[1];if(this.floatTextures){length*=4}var valuesFlat=new Float32Array(length);utils.flattenTo(value,valuesFlat);var buffer=void 0;if(this.floatTextures){gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,size[0],size[1],0,gl.RGBA,gl.FLOAT,valuesFlat)}else{buffer=new Uint8Array(valuesFlat.buffer);gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,size[0],size[1],0,gl.RGBA,gl.UNSIGNED_BYTE,buffer)}if(!this.hardcodeConstants){this.setUniform3fv("user_"+name+"Dim",dim);this.setUniform2fv("user_"+name+"Size",size)}this.setUniform1i("user_"+name,this.argumentsLength);break}case"Number":{this.setUniform1f("user_"+name,value);break}case"Input":{var input=value;var _dim=input.size;var _size=utils.dimToTexSize({floatTextures:this.floatTextures,floatOutput:this.floatOutput},_dim);gl.activeTexture(gl.TEXTURE0+this.argumentsLength);gl.bindTexture(gl.TEXTURE_2D,argumentTexture);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);var _length=_size[0]*_size[1];var inputArray=void 0;if(this.floatTextures){_length*=4;inputArray=new Float32Array(_length);inputArray.set(input.value)}else{inputArray=input.value}if(this.floatTextures){gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,_size[0],_size[1],0,gl.RGBA,gl.FLOAT,inputArray)}else{var _buffer=new Uint8Array(inputArray.buffer);gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,_size[0],_size[1],0,gl.RGBA,gl.UNSIGNED_BYTE,_buffer)}if(!this.hardcodeConstants){this.setUniform3fv("user_"+name+"Dim",_dim);this.setUniform2fv("user_"+name+"Size",_size)}this.setUniform1i("user_"+name,this.argumentsLength);break}case"Texture":{var inputTexture=value;var _dim2=inputTexture.dimensions;var _size2=inputTexture.size;gl.activeTexture(gl.TEXTURE0+this.argumentsLength);gl.bindTexture(gl.TEXTURE_2D,inputTexture.texture);this.setUniform3fv("user_"+name+"Dim",_dim2);this.setUniform2fv("user_"+name+"Size",_size2);this.setUniform1i("user_"+name,this.argumentsLength);break}default:throw new Error("Input type not supported (WebGL): "+value)}this.argumentsLength++}},{key:"_getHeaderString",value:function _getHeaderString(){return this.subKernels!==null||this.subKernelProperties!==null?"#extension GL_EXT_draw_buffers : require\n":""}},{key:"_getLoopMaxString",value:function _getLoopMaxString(){return this.loopMaxIterations?" "+parseInt(this.loopMaxIterations)+".0;\n":" 1000.0;\n"}},{key:"_getConstantsString",value:function _getConstantsString(){var result=[];var threadDim=this.threadDim;var texSize=this.texSize;if(this.hardcodeConstants){result.push("highp vec3 uOutputDim = vec3("+threadDim[0]+","+threadDim[1]+", "+threadDim[2]+")","highp vec2 uTexSize = vec2("+texSize[0]+", "+texSize[1]+")")}else{result.push("uniform highp vec3 uOutputDim","uniform highp vec2 uTexSize")}return this._linesToString(result)}},{key:"_getTextureCoordinate",value:function _getTextureCoordinate(){var names=this.subKernelOutputVariableNames;if(names===null||names.length<1){return"varying highp vec2 vTexCoord;\n"}else{return"out highp vec2 vTexCoord;\n"}}},{key:"_getDecode32EndiannessString",value:function _getDecode32EndiannessString(){return this.endianness==="LE"?"":"  rgba.rgba = rgba.abgr;\n"}},{key:"_getEncode32EndiannessString",value:function _getEncode32EndiannessString(){return this.endianness==="LE"?"":"  rgba.rgba = rgba.abgr;\n"}},{key:"_getGetWraparoundString",value:function _getGetWraparoundString(){return this.wraparound?"  xyz = mod(xyz, texDim);\n":""}},{key:"_getGetTextureChannelString",value:function _getGetTextureChannelString(){if(!this.floatTextures)return"";return this._linesToString(["  int channel = int(integerMod(index, 4.0))","  index = float(int(index) / 4)"])}},{key:"_getGetTextureIndexString",value:function _getGetTextureIndexString(){return this.floatTextures?"  index = float(int(index)/4);\n":""}},{key:"_getGetResultString",value:function _getGetResultString(){if(!this.floatTextures)return"  return decode32(texel);\n";return this._linesToString(["  if (channel == 0) return texel.r","  if (channel == 1) return texel.g","  if (channel == 2) return texel.b","  if (channel == 3) return texel.a"])}},{key:"_getMainParamsString",value:function _getMainParamsString(args){var result=[];var paramTypes=this.paramTypes;var paramNames=this.paramNames;for(var i=0;i<paramNames.length;i++){var param=args[i];var paramName=paramNames[i];var paramType=paramTypes[i];if(this.hardcodeConstants){if(paramType==="Array"||paramType==="Texture"){var paramDim=utils.getDimensions(param,true);var paramSize=utils.dimToTexSize({floatTextures:this.floatTextures,floatOutput:this.floatOutput},paramDim);result.push("uniform highp sampler2D user_"+paramName,"highp vec2 user_"+paramName+"Size = vec2("+paramSize[0]+".0, "+paramSize[1]+".0)","highp vec3 user_"+paramName+"Dim = vec3("+paramDim[0]+".0, "+paramDim[1]+".0, "+paramDim[2]+".0)")}else if(paramType==="Number"&&Number.isInteger(param)){result.push("highp float user_"+paramName+" = "+param+".0")}else if(paramType==="Number"){result.push("highp float user_"+paramName+" = "+param)}}else{if(paramType==="Array"||paramType==="Texture"||paramType==="Input"){result.push("uniform highp sampler2D user_"+paramName,"uniform highp vec2 user_"+paramName+"Size","uniform highp vec3 user_"+paramName+"Dim")}else if(paramType==="Number"){result.push("uniform highp float user_"+paramName)}}}return this._linesToString(result)}},{key:"_getMainConstantsString",value:function _getMainConstantsString(){var result=[];if(this.constants){for(var name in this.constants){if(!this.constants.hasOwnProperty(name))continue;var value=parseFloat(this.constants[name]);if(Number.isInteger(value)){result.push("const float constants_"+name+" = "+parseInt(value)+".0")}else{result.push("const float constants_"+name+" = "+parseFloat(value))}}}return this._linesToString(result)}},{key:"_getKernelString",value:function _getKernelString(){var result=[];var names=this.subKernelOutputVariableNames;if(names!==null){result.push("highp float kernelResult = 0.0");for(var i=0;i<names.length;i++){result.push("highp float "+names[i]+" = 0.0")}}else{result.push("highp float kernelResult = 0.0")}return this._linesToString(result)+this.functionBuilder.getPrototypeString("kernel")}},{key:"_getMainResultString",value:function _getMainResultString(){var names=this.subKernelOutputVariableNames;var result=[];if(this.floatOutput){result.push("  index *= 4.0")}if(this.graphical){result.push("  threadId = indexTo3D(index, uOutputDim)","  kernel()","  gl_FragColor = actualColor")}else if(this.floatOutput){var channels=["r","g","b","a"];for(var i=0;i<channels.length;++i){result.push("  threadId = indexTo3D(index, uOutputDim)");result.push("  kernel()");if(names){result.push("  gl_FragData[0]."+channels[i]+" = kernelResult");for(var j=0;j<names.length;++j){result.push("  gl_FragData["+(j+1)+"]."+channels[i]+" = "+names[j])}}else{result.push("  gl_FragColor."+channels[i]+" = kernelResult")}if(i<channels.length-1){result.push("  index += 1.0")}}}else if(names!==null){result.push("  threadId = indexTo3D(index, uOutputDim)");result.push("  kernel()");result.push("  gl_FragData[0] = encode32(kernelResult)");for(var _i2=0;_i2<names.length;_i2++){result.push("  gl_FragData["+(_i2+1)+"] = encode32("+names[_i2]+")")}}else{result.push("  threadId = indexTo3D(index, uOutputDim)","  kernel()","  gl_FragColor = encode32(kernelResult)")}return this._linesToString(result)}},{key:"_linesToString",value:function _linesToString(lines){if(lines.length>0){return lines.join(";\n")+";\n"}else{return"\n"}}},{key:"_replaceArtifacts",value:function _replaceArtifacts(src,map){return src.replace(/[ ]*__([A-Z]+[0-9]*([_]?[A-Z])*)__;\n/g,function(match,artifact){if(map.hasOwnProperty(artifact)){return map[artifact]}throw"unhandled artifact "+artifact})}},{key:"_addKernels",value:function _addKernels(){var _this2=this;var builder=this.functionBuilder;var gl=this._webGl;builder.addFunctions(this.functions,{constants:this.constants,output:this.output});builder.addNativeFunctions(this.nativeFunctions);builder.addKernel(this.fnString,{prototypeOnly:false,constants:this.constants,output:this.output,debug:this.debug,loopMaxIterations:this.loopMaxIterations},this.paramNames,this.paramTypes);if(this.subKernels!==null){var drawBuffers=this.drawBuffers=gl.getExtension("WEBGL_draw_buffers");if(!drawBuffers)throw new Error("could not instantiate draw buffers extension");this.subKernelOutputVariableNames=[];this.subKernels.forEach(function(subKernel){return _this2._addSubKernel(subKernel)})}else if(this.subKernelProperties!==null){var _drawBuffers=this.drawBuffers=gl.getExtension("WEBGL_draw_buffers");if(!_drawBuffers)throw new Error("could not instantiate draw buffers extension");this.subKernelOutputVariableNames=[];Object.keys(this.subKernelProperties).forEach(function(property){return _this2._addSubKernel(_this2.subKernelProperties[property])})}}},{key:"_addSubKernel",value:function _addSubKernel(subKernel){this.functionBuilder.addSubKernel(subKernel,{prototypeOnly:false,constants:this.constants,output:this.output,debug:this.debug,loopMaxIterations:this.loopMaxIterations});this.subKernelOutputVariableNames.push(subKernel.name+"Result")}},{key:"_getFragShaderString",value:function _getFragShaderString(args){if(this.compiledFragShaderString!==null){return this.compiledFragShaderString}return this.compiledFragShaderString=this._replaceArtifacts(fragShaderString,this._getFragShaderArtifactMap(args))}},{key:"_getVertShaderString",value:function _getVertShaderString(args){if(this.compiledVertShaderString!==null){return this.compiledVertShaderString}return this.compiledVertShaderString=vertShaderString}},{key:"toString",value:function toString(){return kernelString(this)}},{key:"addFunction",value:function addFunction(fn){this.functionBuilder.addFunction(null,fn)}}]);return WebGLKernel}(KernelBase)},function(module,exports,__webpack_require__){"use strict";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function")}}var gpu=null;module.exports=function(){function Texture(texture,size,dimensions,output,webGl){_classCallCheck(this,Texture);this.texture=texture;this.size=size;this.dimensions=dimensions;this.output=output;this.webGl=webGl;this.kernel=null}_createClass(Texture,[{key:"toArray",value:function toArray(gpu){if(!gpu)throw new Error("You need to pass the GPU object for toArray to work.");if(this.kernel)return this.kernel(this);this.kernel=gpu.createKernel(function(x){return x[this.thread.z][this.thread.y][this.thread.x]}).setOutput(this.output);return this.kernel(this)}},{key:"delete",value:function _delete(){return this.webGl.deleteTexture(this.texture)}}]);return Texture}()},function(module,exports,__webpack_require__){"use strict";var GPU=__webpack_require__(46);var alias=__webpack_require__(35);var utils=__webpack_require__(1);var Input=__webpack_require__(28);var Texture=__webpack_require__(8);var CPUFunctionBuilder=__webpack_require__(18);var CPUFunctionNode=__webpack_require__(17);var CPUKernel=__webpack_require__(19);var CPURunner=__webpack_require__(20);var WebGLFunctionBuilder=__webpack_require__(25);var WebGLFunctionNode=__webpack_require__(24);var WebGLKernel=__webpack_require__(7);var WebGLRunner=__webpack_require__(14);var WebGL2FunctionBuilder=__webpack_require__(22);var WebGL2FunctionNode=__webpack_require__(21);var WebGL2Kernel=__webpack_require__(10);var WebGL2Runner=__webpack_require__(23);GPU.alias=alias;GPU.utils=utils;GPU.Texture=Texture;GPU.Input=Input;GPU.input=function(value,size){return new Input(value,size)};GPU.CPUFunctionBuilder=CPUFunctionBuilder;GPU.CPUFunctionNode=CPUFunctionNode;GPU.CPUKernel=CPUKernel;GPU.CPURunner=CPURunner;GPU.WebGLFunctionBuilder=WebGLFunctionBuilder;GPU.WebGLFunctionNode=WebGLFunctionNode;GPU.WebGLKernel=WebGLKernel;GPU.WebGLRunner=WebGLRunner;GPU.WebGL2FunctionBuilder=WebGL2FunctionBuilder;GPU.WebGL2FunctionNode=WebGL2FunctionNode;GPU.WebGL2Kernel=WebGL2Kernel;GPU.WebGL2Runner=WebGL2Runner;if(true){module.exports=GPU}if(typeof window!=="undefined"){window.GPU=GPU}},function(module,exports,__webpack_require__){"use strict";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function")}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return call&&(typeof call==="object"||typeof call==="function")?call:self}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass)}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass}var WebGLKernel=__webpack_require__(7);var utils=__webpack_require__(1);var Texture=__webpack_require__(8);var fragShaderString=__webpack_require__(41);var vertShaderString=__webpack_require__(40);module.exports=function(_WebGLKernel){_inherits(WebGL2Kernel,_WebGLKernel);function WebGL2Kernel(){_classCallCheck(this,WebGL2Kernel);return _possibleConstructorReturn(this,(WebGL2Kernel.__proto__||Object.getPrototypeOf(WebGL2Kernel)).apply(this,arguments))}_createClass(WebGL2Kernel,[{key:"initWebGl",value:function initWebGl(){return utils.initWebGl2(this.getCanvas())}},{key:"validateOptions",value:function validateOptions(){var isFloatReadPixel=utils.isFloatReadPixelsSupportedWebGL2();if(this.floatOutput===true&&this.floatOutputForce!==true&&!isFloatReadPixel){throw new Error("Float texture outputs are not supported on this browser")}else if(this.floatTextures===undefined){this.floatTextures=true;this.floatOutput=isFloatReadPixel}if(!this.output||this.output.length===0){if(arguments.length!==1){throw new Error("Auto output only supported for kernels with only one input")}var argType=utils.getArgumentType(arguments[0]);if(argType==="Array"){this.output=utils.getDimensions(argType)}else if(argType==="Texture"){this.output=arguments[0].output}else{throw new Error("Auto output not supported for input type: "+argType)}}this.texSize=utils.dimToTexSize({floatTextures:this.floatTextures,floatOutput:this.floatOutput},this.output,true);if(this.graphical){if(this.output.length!==2){throw new Error("Output must have 2 dimensions on graphical mode")}if(this.floatOutput){this.floatOutput=false;console.warn("Cannot use graphical mode and float output at the same time")}this.texSize=utils.clone(this.output)}else if(this.floatOutput===undefined){this.floatOutput=true}if(this.floatOutput||this.floatOutputForce){this._webGl.getExtension("EXT_color_buffer_float")}}},{key:"run",value:function run(){if(this.program===null){this.build.apply(this,arguments)}var paramNames=this.paramNames;var paramTypes=this.paramTypes;var texSize=this.texSize;var gl=this._webGl;gl.useProgram(this.program);gl.scissor(0,0,texSize[0],texSize[1]);if(!this.hardcodeConstants){this.setUniform3fv("uOutputDim",this.threadDim);this.setUniform2fv("uTexSize",texSize)}this.setUniform2f("ratio",texSize[0]/this.maxTexSize[0],texSize[1]/this.maxTexSize[1]);this.argumentsLength=0;for(var texIndex=0;texIndex<paramNames.length;texIndex++){this._addArgument(arguments[texIndex],paramTypes[texIndex],paramNames[texIndex])}if(this.graphical){gl.bindRenderbuffer(gl.RENDERBUFFER,null);gl.bindFramebuffer(gl.FRAMEBUFFER,null);gl.drawArrays(gl.TRIANGLE_STRIP,0,4);return}gl.bindFramebuffer(gl.FRAMEBUFFER,this.framebuffer);if(this.outputImmutable){this._setupOutputTexture()}var outputTexture=this.outputTexture;if(this.subKernelOutputVariableNames!==null){if(this.outputImmutable){this.subKernelOutputTextures=[];this._setupSubOutputTextures(this.subKernelOutputVariableNames.length)}gl.drawBuffers(this.drawBuffersMap)}gl.drawArrays(gl.TRIANGLE_STRIP,0,4);if(this.subKernelOutputTextures!==null){if(this.subKernels!==null){var output=[];output.result=this.renderOutput(outputTexture);for(var i=0;i<this.subKernels.length;i++){output.push(new Texture(this.subKernelOutputTextures[i],texSize,this.threadDim,this.output,this._webGl))}return output}else if(this.subKernelProperties!==null){var _output={result:this.renderOutput(outputTexture)};var _i=0;for(var p in this.subKernelProperties){if(!this.subKernelProperties.hasOwnProperty(p))continue;_output[p]=new Texture(this.subKernelOutputTextures[_i],texSize,this.threadDim,this.output,this._webGl);_i++}return _output}}return this.renderOutput(outputTexture)}},{key:"getOutputTexture",value:function getOutputTexture(){return this.outputTexture}},{key:"_setupOutputTexture",value:function _setupOutputTexture(){var gl=this._webGl;var texSize=this.texSize;var texture=this.outputTexture=this._webGl.createTexture();gl.activeTexture(gl.TEXTURE0+this.paramNames.length);gl.bindTexture(gl.TEXTURE_2D,texture);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);if(this.floatOutput){gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA32F,texSize[0],texSize[1],0,gl.RGBA,gl.FLOAT,null)}else{gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,texSize[0],texSize[1],0,gl.RGBA,gl.UNSIGNED_BYTE,null)}gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,texture,0)}},{key:"_setupSubOutputTextures",value:function _setupSubOutputTextures(length){var gl=this._webGl;var texSize=this.texSize;var drawBuffersMap=this.drawBuffersMap=[gl.COLOR_ATTACHMENT0];var textures=this.subKernelOutputTextures=[];for(var i=0;i<length;i++){var texture=this._webGl.createTexture();textures.push(texture);drawBuffersMap.push(gl.COLOR_ATTACHMENT0+i+1);gl.activeTexture(gl.TEXTURE0+this.paramNames.length+i);gl.bindTexture(gl.TEXTURE_2D,texture);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);if(this.floatOutput){gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA32F,texSize[0],texSize[1],0,gl.RGBA,gl.FLOAT,null)}else{gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,texSize[0],texSize[1],0,gl.RGBA,gl.UNSIGNED_BYTE,null)}gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0+i+1,gl.TEXTURE_2D,texture,0)}}},{key:"_addArgument",value:function _addArgument(value,type,name){var gl=this._webGl;var argumentTexture=this.getArgumentTexture(name);if(value instanceof Texture){type="Texture"}switch(type){case"Array":{var dim=utils.getDimensions(value,true);var size=utils.dimToTexSize({floatTextures:this.floatTextures,floatOutput:this.floatOutput},dim);gl.activeTexture(gl.TEXTURE0+this.argumentsLength);gl.bindTexture(gl.TEXTURE_2D,argumentTexture);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);var length=size[0]*size[1];if(this.floatTextures){length*=4}var valuesFlat=new Float32Array(length);utils.flattenTo(value,valuesFlat);var buffer=void 0;if(this.floatTextures){gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA32F,size[0],size[1],0,gl.RGBA,gl.FLOAT,valuesFlat)}else{buffer=new Uint8Array(valuesFlat.buffer);gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,size[0],size[1],0,gl.RGBA,gl.UNSIGNED_BYTE,buffer)}if(!this.hardcodeConstants){this.setUniform3fv("user_"+name+"Dim",dim);this.setUniform2fv("user_"+name+"Size",size)}this.setUniform1i("user_"+name,this.argumentsLength);break}case"Number":{this.setUniform1f("user_"+name,value);break}case"Input":{var input=value;var _dim=input.size;var _size=utils.dimToTexSize({floatTextures:this.floatTextures,floatOutput:this.floatOutput},_dim);gl.activeTexture(gl.TEXTURE0+this.argumentsLength);gl.bindTexture(gl.TEXTURE_2D,argumentTexture);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);var _length=_size[0]*_size[1];var inputArray=void 0;if(this.floatTextures){_length*=4;inputArray=new Float32Array(_length);inputArray.set(input.value)}else{inputArray=input.value}if(this.floatTextures){gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA32F,_size[0],_size[1],0,gl.RGBA,gl.FLOAT,inputArray)}else{var _buffer=new Uint8Array(inputArray.buffer);gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,_size[0],_size[1],0,gl.RGBA,gl.UNSIGNED_BYTE,_buffer)}if(!this.hardcodeConstants){this.setUniform3fv("user_"+name+"Dim",_dim);this.setUniform2fv("user_"+name+"Size",_size)}this.setUniform1i("user_"+name,this.argumentsLength);break}case"Texture":{var inputTexture=value;var _dim2=inputTexture.dimensions;var _size2=inputTexture.size;gl.activeTexture(gl.TEXTURE0+this.argumentsLength);gl.bindTexture(gl.TEXTURE_2D,inputTexture.texture);this.setUniform3fv("user_"+name+"Dim",_dim2);this.setUniform2fv("user_"+name+"Size",_size2);this.setUniform1i("user_"+name,this.argumentsLength);break}default:throw new Error("Input type not supported (WebGL): "+value)}this.argumentsLength++}},{key:"_getHeaderString",value:function _getHeaderString(){return""}},{key:"_getTextureCoordinate",value:function _getTextureCoordinate(){var names=this.subKernelOutputVariableNames;if(names===null||names.length<1){return"in highp vec2 vTexCoord;\n"}else{return"out highp vec2 vTexCoord;\n"}}},{key:"_getKernelString",value:function _getKernelString(){var result=[];var names=this.subKernelOutputVariableNames;if(names!==null){result.push("highp float kernelResult = 0.0");result.push("layout(location = 0) out highp vec4 data0");for(var i=0;i<names.length;i++){result.push("highp float "+names[i]+" = 0.0","layout(location = "+(i+1)+") out highp vec4 data"+(i+1))}}else{result.push("out highp vec4 data0");result.push("highp float kernelResult = 0.0")}return this._linesToString(result)+this.functionBuilder.getPrototypeString("kernel")}},{key:"_getMainResultString",value:function _getMainResultString(){var names=this.subKernelOutputVariableNames;var result=[];if(this.floatOutput){result.push("  index *= 4.0")}if(this.graphical){result.push("  threadId = indexTo3D(index, uOutputDim)","  kernel()","  data0 = actualColor")}else if(this.floatOutput){var channels=["r","g","b","a"];for(var i=0;i<channels.length;++i){result.push("  threadId = indexTo3D(index, uOutputDim)");result.push("  kernel()");if(names){result.push("  data0."+channels[i]+" = kernelResult");for(var j=0;j<names.length;++j){result.push("  data"+(j+1)+"."+channels[i]+" = "+names[j])}}else{result.push("  data0."+channels[i]+" = kernelResult")}if(i<channels.length-1){result.push("  index += 1.0")}}}else if(names!==null){result.push("  threadId = indexTo3D(index, uOutputDim)");result.push("  kernel()");result.push("  data0 = encode32(kernelResult)");for(var _i2=0;_i2<names.length;_i2++){result.push("  data"+(_i2+1)+" = encode32("+names[_i2]+")")}}else{result.push("  threadId = indexTo3D(index, uOutputDim)","  kernel()","  data0 = encode32(kernelResult)")}return this._linesToString(result)}},{key:"_addKernels",value:function _addKernels(){var _this2=this;var builder=this.functionBuilder;var gl=this._webGl;builder.addFunctions(this.functions,{constants:this.constants,output:this.output});builder.addNativeFunctions(this.nativeFunctions);builder.addKernel(this.fnString,{prototypeOnly:false,constants:this.constants,output:this.output,debug:this.debug,loopMaxIterations:this.loopMaxIterations},this.paramNames,this.paramTypes);if(this.subKernels!==null){this.subKernelOutputTextures=[];this.subKernelOutputVariableNames=[];this.subKernels.forEach(function(subKernel){return _this2._addSubKernel(subKernel)})}else if(this.subKernelProperties!==null){this.subKernelOutputTextures=[];this.subKernelOutputVariableNames=[];Object.keys(this.subKernelProperties).forEach(function(property){return _this2._addSubKernel(_this2.subKernelProperties[property])})}}},{key:"_getFragShaderString",value:function _getFragShaderString(args){if(this.compiledFragShaderString!==null){return this.compiledFragShaderString}return this.compiledFragShaderString=this._replaceArtifacts(fragShaderString,this._getFragShaderArtifactMap(args))}},{key:"_getVertShaderString",value:function _getVertShaderString(args){if(this.compiledVertShaderString!==null){return this.compiledVertShaderString}return this.compiledVertShaderString=vertShaderString}}]);return WebGL2Kernel}(WebGLKernel)},function(module,exports,__webpack_require__){"use strict";var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function")}}var utils=__webpack_require__(1);var acorn=__webpack_require__(42);module.exports=function(){function BaseFunctionNode(functionName,jsFunction,options,paramTypes,returnType){_classCallCheck(this,BaseFunctionNode);this.calledFunctions=[];this.calledFunctionsArguments={};this.initVariables=[];this.readVariables=[];this.writeVariables=[];this.addFunction=null;this.isRootKernel=false;this.isSubKernel=false;this.parent=null;this.debug=null;this.prototypeOnly=null;this.constants=null;this.output=null;if(options){if(options.hasOwnProperty("debug")){this.debug=options.debug}if(options.hasOwnProperty("prototypeOnly")){this.prototypeOnly=options.prototypeOnly}if(options.hasOwnProperty("constants")){this.constants=options.constants}if(options.hasOwnProperty("output")){this.output=options.output}if(options.hasOwnProperty("loopMaxIterations")){this.loopMaxIterations=options.loopMaxIterations}}if(!jsFunction){throw"jsFunction, parameter is missing"}this.jsFunctionString=jsFunction.toString();if(!utils.isFunctionString(this.jsFunctionString)){console.error("jsFunction, to string conversion check failed: not a function?",this.jsFunctionString);throw"jsFunction, to string conversion check failed: not a function?"}if(!utils.isFunction(jsFunction)){this.jsFunction=null}else{this.jsFunction=jsFunction}this.functionName=functionName||jsFunction&&jsFunction.name||utils.getFunctionNameFromString(this.jsFunctionString);if(!this.functionName){throw"jsFunction, missing name argument or value"}this.paramNames=utils.getParamNamesFromString(this.jsFunctionString);if(paramTypes){if(Array.isArray(paramTypes)){if(paramTypes.length!==this.paramNames.length){throw"Invalid argument type array length, against function length -> ("+paramTypes.length+","+this.paramNames.length+")"}this.paramTypes=paramTypes}else if((typeof paramTypes==="undefined"?"undefined":_typeof(paramTypes))==="object"){var paramVariableNames=Object.keys(paramTypes);if(paramTypes.hasOwnProperty("returns")){this.returnType=paramTypes.returns;paramVariableNames.splice(paramVariableNames.indexOf("returns"),1)}if(paramVariableNames.length>0&&paramVariableNames.length!==this.paramNames.length){throw"Invalid argument type array length, against function length -> ("+paramVariableNames.length+","+this.paramNames.length+")"}else{this.paramTypes=this.paramNames.map(function(key){if(paramTypes.hasOwnProperty(key)){return paramTypes[key]}else{return"float"}})}}}else{this.paramTypes=[]}if(!this.returnType){this.returnType=returnType||"float"}}_createClass(BaseFunctionNode,[{key:"isIdentifierConstant",value:function isIdentifierConstant(paramName){if(!this.constants)return false;return this.constants.hasOwnProperty(paramName)}},{key:"setAddFunction",value:function setAddFunction(fn){this.addFunction=fn;return this}},{key:"getJsFunction",value:function getJsFunction(){if(this.jsFunction){return this.jsFunction}if(this.jsFunctionString){this.jsFunction=eval(this.jsFunctionString);return this.jsFunction}throw"Missing jsFunction, and jsFunctionString parameter"}},{key:"astMemberExpressionUnroll",value:function astMemberExpressionUnroll(ast,funcParam){if(ast.type==="Identifier"){return ast.name}else if(ast.type==="ThisExpression"){return"this"}if(ast.type==="MemberExpression"){if(ast.object&&ast.property){if(ast.object.hasOwnProperty("name")&&ast.object.name[0]==="_"){return this.astMemberExpressionUnroll(ast.property,funcParam)}return this.astMemberExpressionUnroll(ast.object,funcParam)+"."+this.astMemberExpressionUnroll(ast.property,funcParam)}}if(ast.hasOwnProperty("expressions")){var firstExpression=ast.expressions[0];if(firstExpression.type==="Literal"&&firstExpression.value===0&&ast.expressions.length===2){return this.astMemberExpressionUnroll(ast.expressions[1])}}throw this.astErrorOutput("Unknown CallExpression_unroll",ast,funcParam)}},{key:"getJsAST",value:function getJsAST(inParser){if(this.jsFunctionAST){return this.jsFunctionAST}inParser=inParser||acorn;if(inParser===null){throw"Missing JS to AST parser"}var ast=inParser.parse("var "+this.functionName+" = "+this.jsFunctionString+";",{locations:true});if(ast===null){throw"Failed to parse JS code"}var funcAST=ast.body[0].declarations[0].init;this.jsFunctionAST=funcAST;return funcAST}},{key:"getFunctionString",value:function getFunctionString(){this.generate();return this.functionString}},{key:"setFunctionString",value:function setFunctionString(functionString){this.functionString=functionString}},{key:"getParamType",value:function getParamType(paramName){var paramIndex=this.paramNames.indexOf(paramName);if(paramIndex===-1)return null;if(!this.parent)return null;if(this.paramTypes[paramIndex])return this.paramTypes[paramIndex];var calledFunctionArguments=this.parent.calledFunctionsArguments[this.functionName];for(var i=0;i<calledFunctionArguments.length;i++){var calledFunctionArgument=calledFunctionArguments[i];if(calledFunctionArgument[paramIndex]!==null){return this.paramTypes[paramIndex]=calledFunctionArgument[paramIndex].type}}return null}},{key:"getUserParamName",value:function getUserParamName(paramName){var paramIndex=this.paramNames.indexOf(paramName);if(paramIndex===-1)return null;if(!this.parent)return null;var calledFunctionArguments=this.parent.calledFunctionsArguments[this.functionName];for(var i=0;i<calledFunctionArguments.length;i++){var calledFunctionArgument=calledFunctionArguments[i];if(calledFunctionArgument[paramIndex]!==null){return calledFunctionArgument[paramIndex].name}}return null}},{key:"generate",value:function generate(options){throw new Error("generate not defined on BaseFunctionNode")}},{key:"astErrorOutput",value:function astErrorOutput(error,ast,funcParam){console.error(utils.getAstString(this.jsFunctionString,ast));console.error(error,ast,funcParam);return error}},{key:"astDebuggerStatement",value:function astDebuggerStatement(arrNode,retArr,funcParam){return retArr}}]);return BaseFunctionNode}()},function(module,exports,__webpack_require__){"use strict";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function")}}module.exports=function(){function FunctionBuilderBase(gpu){_classCallCheck(this,FunctionBuilderBase);this.nodeMap={};this.nativeFunctions={};this.gpu=gpu;this.rootKernel=null;this.Node=null}_createClass(FunctionBuilderBase,[{key:"addNativeFunction",value:function addNativeFunction(functionName,glslFunctionString){this.nativeFunctions[functionName]=glslFunctionString}},{key:"addFunction",value:function addFunction(functionName,jsFunction,options,paramTypes,returnType){this.addFunctionNode(new this.Node(functionName,jsFunction,options,paramTypes,returnType).setAddFunction(this.addFunction.bind(this)))}},{key:"addFunctions",value:function addFunctions(functions,options){if(functions){if(Array.isArray(functions)){for(var i=0;i<functions.length;i++){this.addFunction(null,functions[i],options)}}else{for(var p in functions){this.addFunction(p,functions[p],options)}}}}},{key:"addNativeFunctions",value:function addNativeFunctions(nativeFunctions){for(var functionName in nativeFunctions){if(!nativeFunctions.hasOwnProperty(functionName))continue;this.addNativeFunction(functionName,nativeFunctions[functionName])}}},{key:"addFunctionNode",value:function addFunctionNode(inNode){this.nodeMap[inNode.functionName]=inNode;if(inNode.isRootKernel){this.rootKernel=inNode}}},{key:"traceFunctionCalls",value:function traceFunctionCalls(functionName,retList,parent){functionName=functionName||"kernel";retList=retList||[];var fNode=this.nodeMap[functionName];if(fNode){var functionIndex=retList.indexOf(functionName);if(functionIndex===-1){retList.push(functionName);if(parent){fNode.parent=parent}fNode.getFunctionString();for(var i=0;i<fNode.calledFunctions.length;++i){this.traceFunctionCalls(fNode.calledFunctions[i],retList,fNode)}}else{var dependantFunctionName=retList.splice(functionIndex,1)[0];retList.push(dependantFunctionName)}}if(this.nativeFunctions[functionName]){if(retList.indexOf(functionName)>=0){}else{retList.push(functionName)}}return retList}},{key:"addKernel",value:function addKernel(fnString,options,paramNames,paramTypes){var kernelNode=new this.Node("kernel",fnString,options,paramTypes);kernelNode.setAddFunction(this.addFunction.bind(this));kernelNode.paramNames=paramNames;kernelNode.paramTypes=paramTypes;kernelNode.isRootKernel=true;this.addFunctionNode(kernelNode);return kernelNode}},{key:"addSubKernel",value:function addSubKernel(jsFunction,options,paramTypes,returnType){var kernelNode=new this.Node(null,jsFunction,options,paramTypes,returnType);kernelNode.setAddFunction(this.addFunction.bind(this));kernelNode.isSubKernel=true;this.addFunctionNode(kernelNode);return kernelNode}},{key:"getPrototypeString",value:function getPrototypeString(functionName){return this.getPrototypes(functionName).join("\n")}},{key:"getPrototypes",value:function getPrototypes(functionName){this.rootKernel.generate();if(functionName){return this.getPrototypesFromFunctionNames(this.traceFunctionCalls(functionName,[]).reverse())}return this.getPrototypesFromFunctionNames(Object.keys(this.nodeMap))}},{key:"getStringFromFunctionNames",value:function getStringFromFunctionNames(functionList){var ret=[];for(var i=0;i<functionList.length;++i){var node=this.nodeMap[functionList[i]];if(node){ret.push(this.nodeMap[functionList[i]].getFunctionString())}}return ret.join("\n")}},{key:"getPrototypesFromFunctionNames",value:function getPrototypesFromFunctionNames(functionList,opt){var ret=[];for(var i=0;i<functionList.length;++i){var functionName=functionList[i];var node=this.nodeMap[functionName];if(node){ret.push(node.getFunctionPrototypeString(opt))}else if(this.nativeFunctions[functionName]){ret.push(this.nativeFunctions[functionName])}}return ret}},{key:"getPrototypeStringFromFunctionNames",value:function getPrototypeStringFromFunctionNames(functionList,opt){return this.getPrototypesFromFunctionNames(functionList,opt).toString()}},{key:"getString",value:function getString(functionName,opt){if(opt===undefined){opt={}}if(functionName){return this.getStringFromFunctionNames(this.traceFunctionCalls(functionName,[],opt).reverse(),opt)}return this.getStringFromFunctionNames(Object.keys(this.nodeMap),opt)}}]);return FunctionBuilderBase}()},function(module,exports,__webpack_require__){"use strict";var utils=__webpack_require__(1);module.exports=function kernelRunShortcut(kernel){var shortcut=function shortcut(){return kernel.run.apply(kernel,arguments)};utils.allPropertiesOf(kernel).forEach(function(key){if(key[0]==="_"&&key[1]==="_")return;if(typeof kernel[key]==="function"){if(key.substring(0,3)==="add"||key.substring(0,3)==="set"){shortcut[key]=function(){kernel[key].apply(kernel,arguments);return shortcut}}else{shortcut[key]=kernel[key].bind(kernel)}}else{shortcut.__defineGetter__(key,function(){return kernel[key]});shortcut.__defineSetter__(key,function(value){kernel[key]=value})}});shortcut.kernel=kernel;return shortcut}},function(module,exports,__webpack_require__){"use strict";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function")}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return call&&(typeof call==="object"||typeof call==="function")?call:self}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass)}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass}var RunnerBase=__webpack_require__(27);var WebGLKernel=__webpack_require__(7);var utils=__webpack_require__(1);var WebGLFunctionBuilder=__webpack_require__(25);module.exports=function(_RunnerBase){_inherits(WebGLRunner,_RunnerBase);function WebGLRunner(settings){_classCallCheck(this,WebGLRunner);var _this=_possibleConstructorReturn(this,(WebGLRunner.__proto__||Object.getPrototypeOf(WebGLRunner)).call(this,new WebGLFunctionBuilder,settings));_this.Kernel=WebGLKernel;_this.kernel=null;return _this}_createClass(WebGLRunner,[{key:"getMode",value:function getMode(){return"gpu"}}]);return WebGLRunner}(RunnerBase)},function(module,exports,__webpack_require__){"use strict";function makeEmptyFunction(arg){return function(){return arg}}var emptyFunction=function emptyFunction(){};emptyFunction.thatReturns=makeEmptyFunction;emptyFunction.thatReturnsFalse=makeEmptyFunction(false);emptyFunction.thatReturnsTrue=makeEmptyFunction(true);emptyFunction.thatReturnsNull=makeEmptyFunction(null);emptyFunction.thatReturnsThis=function(){return this};emptyFunction.thatReturnsArgument=function(arg){return arg};module.exports=emptyFunction},function(module,exports,__webpack_require__){"use strict";var validateFormat=function validateFormat(format){};if(false){}function invariant(condition,format,a,b,c,d,e,f){validateFormat(format);if(!condition){var error;if(format===undefined){error=new Error("Minified exception occurred; use the non-minified dev environment "+"for the full error message and additional helpful warnings.")}else{var args=[a,b,c,d,e,f];var argIndex=0;error=new Error(format.replace(/%s/g,function(){return args[argIndex++]}));error.name="Invariant Violation"}error.framesToPop=1;throw error}}module.exports=invariant},function(module,exports,__webpack_require__){"use strict";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function")}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return call&&(typeof call==="object"||typeof call==="function")?call:self}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass)}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass}var BaseFunctionNode=__webpack_require__(11);var utils=__webpack_require__(1);module.exports=function(_BaseFunctionNode){_inherits(CPUFunctionNode,_BaseFunctionNode);function CPUFunctionNode(){_classCallCheck(this,CPUFunctionNode);return _possibleConstructorReturn(this,(CPUFunctionNode.__proto__||Object.getPrototypeOf(CPUFunctionNode)).apply(this,arguments))}_createClass(CPUFunctionNode,[{key:"generate",value:function generate(){if(this.debug){console.log(this)}this.functionStringArray=this.astGeneric(this.getJsAST(),[],this);this.functionString=this.functionStringArray.join("").trim();return this.functionString}},{key:"getFunctionPrototypeString",value:function getFunctionPrototypeString(){if(this.webGlFunctionPrototypeString){return this.webGlFunctionPrototypeString}return this.webGlFunctionPrototypeString=this.generate()}},{key:"astGeneric",value:function astGeneric(ast,retArr,funcParam){if(ast===null){throw this.astErrorOutput("NULL ast",ast,funcParam)}else{if(Array.isArray(ast)){for(var i=0;i<ast.length;i++){this.astGeneric(ast[i],retArr,funcParam)}return retArr}switch(ast.type){case"FunctionDeclaration":return this.astFunctionDeclaration(ast,retArr,funcParam);case"FunctionExpression":return this.astFunctionExpression(ast,retArr,funcParam);case"ReturnStatement":return this.astReturnStatement(ast,retArr,funcParam);case"Literal":return this.astLiteral(ast,retArr,funcParam);case"BinaryExpression":return this.astBinaryExpression(ast,retArr,funcParam);case"Identifier":return this.astIdentifierExpression(ast,retArr,funcParam);case"AssignmentExpression":return this.astAssignmentExpression(ast,retArr,funcParam);case"ExpressionStatement":return this.astExpressionStatement(ast,retArr,funcParam);case"EmptyStatement":return this.astEmptyStatement(ast,retArr,funcParam);case"BlockStatement":return this.astBlockStatement(ast,retArr,funcParam);case"IfStatement":return this.astIfStatement(ast,retArr,funcParam);case"BreakStatement":return this.astBreakStatement(ast,retArr,funcParam);case"ContinueStatement":return this.astContinueStatement(ast,retArr,funcParam);case"ForStatement":return this.astForStatement(ast,retArr,funcParam);case"WhileStatement":return this.astWhileStatement(ast,retArr,funcParam);case"VariableDeclaration":return this.astVariableDeclaration(ast,retArr,funcParam);case"VariableDeclarator":return this.astVariableDeclarator(ast,retArr,funcParam);case"ThisExpression":return this.astThisExpression(ast,retArr,funcParam);case"SequenceExpression":return this.astSequenceExpression(ast,retArr,funcParam);case"UnaryExpression":return this.astUnaryExpression(ast,retArr,funcParam);case"UpdateExpression":return this.astUpdateExpression(ast,retArr,funcParam);case"LogicalExpression":return this.astLogicalExpression(ast,retArr,funcParam);case"MemberExpression":return this.astMemberExpression(ast,retArr,funcParam);case"CallExpression":return this.astCallExpression(ast,retArr,funcParam);case"ArrayExpression":return this.astArrayExpression(ast,retArr,funcParam);case"DebuggerStatement":return this.astDebuggerStatement(ast,retArr,funcParam)}throw this.astErrorOutput("Unknown ast type : "+ast.type,ast,funcParam)}}},{key:"astFunctionDeclaration",value:function astFunctionDeclaration(ast,retArr,funcParam){if(this.addFunction){this.addFunction(null,utils.getAstString(this.jsFunctionString,ast))}return retArr}},{key:"astFunctionExpression",value:function astFunctionExpression(ast,retArr,funcParam){if(!funcParam.isRootKernel){retArr.push("function");funcParam.kernalAst=ast;retArr.push(" ");retArr.push(funcParam.functionName);retArr.push("(");for(var i=0;i<funcParam.paramNames.length;++i){var paramName=funcParam.paramNames[i];if(i>0){retArr.push(", ")}retArr.push(" ");retArr.push("user_");retArr.push(paramName)}retArr.push(") {\n")}for(var _i=0;_i<ast.body.body.length;++_i){this.astGeneric(ast.body.body[_i],retArr,funcParam);retArr.push("\n")}if(!funcParam.isRootKernel){retArr.push("}\n")}return retArr}},{key:"astReturnStatement",value:function astReturnStatement(ast,retArr,funcParam){if(funcParam.isRootKernel){retArr.push("kernelResult = ");this.astGeneric(ast.argument,retArr,funcParam);retArr.push(";")}else if(funcParam.isSubKernel){retArr.push(funcParam.functionName+"Result = ");this.astGeneric(ast.argument,retArr,funcParam);retArr.push(";");retArr.push("return "+funcParam.functionName+"Result;")}else{retArr.push("return ");this.astGeneric(ast.argument,retArr,funcParam);retArr.push(";")}return retArr}},{key:"astLiteral",value:function astLiteral(ast,retArr,funcParam){if(isNaN(ast.value)){throw this.astErrorOutput("Non-numeric literal not supported : "+ast.value,ast,funcParam)}retArr.push(ast.value);return retArr}},{key:"astBinaryExpression",value:function astBinaryExpression(ast,retArr,funcParam){retArr.push("(");this.astGeneric(ast.left,retArr,funcParam);retArr.push(ast.operator);this.astGeneric(ast.right,retArr,funcParam);retArr.push(")");return retArr}},{key:"astIdentifierExpression",value:function astIdentifierExpression(idtNode,retArr,funcParam){if(idtNode.type!=="Identifier"){throw this.astErrorOutput("IdentifierExpression - not an Identifier",idtNode,funcParam)}switch(idtNode.name){case"gpu_threadX":retArr.push("threadId.x");break;case"gpu_threadY":retArr.push("threadId.y");break;case"gpu_threadZ":retArr.push("threadId.z");break;case"gpu_outputX":retArr.push("uOutputDim.x");break;case"gpu_outputY":retArr.push("uOutputDim.y");break;case"gpu_outputZ":retArr.push("uOutputDim.z");break;default:if(this.constants&&this.constants.hasOwnProperty(idtNode.name)){retArr.push("constants_"+idtNode.name)}else{var userParamName=funcParam.getUserParamName(idtNode.name);if(userParamName!==null){retArr.push("user_"+userParamName)}else{retArr.push("user_"+idtNode.name)}}}return retArr}},{key:"astForStatement",value:function astForStatement(forNode,retArr,funcParam){if(forNode.type!=="ForStatement"){throw this.astErrorOutput("Invalid for statment",forNode,funcParam)}if(forNode.test&&forNode.test.type==="BinaryExpression"){if((forNode.test.right.type==="Identifier"||forNode.test.right.type==="Literal")&&forNode.test.operator==="<"&&this.isIdentifierConstant(forNode.test.right.name)===false){if(!this.loopMaxIterations){console.warn("Warning: loopMaxIterations is not set! Using default of 1000 which may result in unintended behavior.");console.warn("Set loopMaxIterations or use a for loop of fixed length to silence this message.")}retArr.push("for (");this.astGeneric(forNode.init,retArr,funcParam);if(retArr[retArr.length-1]!==";"){retArr.push(";")}this.astGeneric(forNode.test.left,retArr,funcParam);retArr.push(forNode.test.operator);retArr.push("LOOP_MAX");retArr.push(";");this.astGeneric(forNode.update,retArr,funcParam);retArr.push(")");retArr.push("{\n");retArr.push("if (");this.astGeneric(forNode.test.left,retArr,funcParam);retArr.push(forNode.test.operator);this.astGeneric(forNode.test.right,retArr,funcParam);retArr.push(") {\n");if(forNode.body.type==="BlockStatement"){for(var i=0;i<forNode.body.body.length;i++){this.astGeneric(forNode.body.body[i],retArr,funcParam)}}else{this.astGeneric(forNode.body,retArr,funcParam)}retArr.push("} else {\n");retArr.push("break;\n");retArr.push("}\n");retArr.push("}\n");return retArr}else if(forNode.init.declarations){var declarations=JSON.parse(JSON.stringify(forNode.init.declarations));var updateArgument=forNode.update.argument;if(!Array.isArray(declarations)||declarations.length<1){console.log(this.jsFunctionString);throw new Error("Error: Incompatible for loop declaration")}if(declarations.length>1){var initArgument=null;for(var _i2=0;_i2<declarations.length;_i2++){var declaration=declarations[_i2];if(declaration.id.name===updateArgument.name){initArgument=declaration;declarations.splice(_i2,1)}else{retArr.push("var ");this.astGeneric(declaration,retArr,funcParam);retArr.push(";")}}retArr.push("for (let ");this.astGeneric(initArgument,retArr,funcParam);retArr.push(";")}else{retArr.push("for (");this.astGeneric(forNode.init,retArr,funcParam)}this.astGeneric(forNode.test,retArr,funcParam);retArr.push(";");this.astGeneric(forNode.update,retArr,funcParam);retArr.push(")");this.astGeneric(forNode.body,retArr,funcParam);return retArr}}throw this.astErrorOutput("Invalid for statement",forNode,funcParam)}},{key:"astWhileStatement",value:function astWhileStatement(whileNode,retArr,funcParam){if(whileNode.type!=="WhileStatement"){throw this.astErrorOutput("Invalid while statment",whileNode,funcParam)}retArr.push("for (let i = 0; i < LOOP_MAX; i++) {");retArr.push("if (");this.astGeneric(whileNode.test,retArr,funcParam);retArr.push(") {\n");this.astGeneric(whileNode.body,retArr,funcParam);retArr.push("} else {\n");retArr.push("break;\n");retArr.push("}\n");retArr.push("}\n");return retArr}},{key:"astAssignmentExpression",value:function astAssignmentExpression(assNode,retArr,funcParam){this.astGeneric(assNode.left,retArr,funcParam);retArr.push(assNode.operator);this.astGeneric(assNode.right,retArr,funcParam);return retArr}},{key:"astEmptyStatement",value:function astEmptyStatement(eNode,retArr,funcParam){return retArr}},{key:"astBlockStatement",value:function astBlockStatement(bNode,retArr,funcParam){retArr.push("{\n");for(var i=0;i<bNode.body.length;i++){this.astGeneric(bNode.body[i],retArr,funcParam)}retArr.push("}\n");return retArr}},{key:"astExpressionStatement",value:function astExpressionStatement(esNode,retArr,funcParam){this.astGeneric(esNode.expression,retArr,funcParam);retArr.push(";\n");return retArr}},{key:"astVariableDeclaration",value:function astVariableDeclaration(vardecNode,retArr,funcParam){retArr.push("var ");for(var i=0;i<vardecNode.declarations.length;i++){if(i>0){retArr.push(",")}this.astGeneric(vardecNode.declarations[i],retArr,funcParam)}retArr.push(";");return retArr}},{key:"astVariableDeclarator",value:function astVariableDeclarator(ivardecNode,retArr,funcParam){this.astGeneric(ivardecNode.id,retArr,funcParam);if(ivardecNode.init!==null){retArr.push("=");this.astGeneric(ivardecNode.init,retArr,funcParam)}return retArr}},{key:"astIfStatement",value:function astIfStatement(ifNode,retArr,funcParam){retArr.push("if (");this.astGeneric(ifNode.test,retArr,funcParam);retArr.push(")");if(ifNode.consequent.type==="BlockStatement"){this.astGeneric(ifNode.consequent,retArr,funcParam)}else{retArr.push(" {\n");this.astGeneric(ifNode.consequent,retArr,funcParam);retArr.push("\n}\n")}if(ifNode.alternate){retArr.push("else ");if(ifNode.alternate.type==="BlockStatement"){this.astGeneric(ifNode.alternate,retArr,funcParam)}else{retArr.push(" {\n");this.astGeneric(ifNode.alternate,retArr,funcParam);retArr.push("\n}\n")}}return retArr}},{key:"astBreakStatement",value:function astBreakStatement(brNode,retArr,funcParam){retArr.push("break;\n");return retArr}},{key:"astContinueStatement",value:function astContinueStatement(crNode,retArr,funcParam){retArr.push("continue;\n");return retArr}},{key:"astLogicalExpression",value:function astLogicalExpression(logNode,retArr,funcParam){retArr.push("(");this.astGeneric(logNode.left,retArr,funcParam);retArr.push(logNode.operator);this.astGeneric(logNode.right,retArr,funcParam);retArr.push(")");return retArr}},{key:"astUpdateExpression",value:function astUpdateExpression(uNode,retArr,funcParam){if(uNode.prefix){retArr.push(uNode.operator);this.astGeneric(uNode.argument,retArr,funcParam)}else{this.astGeneric(uNode.argument,retArr,funcParam);retArr.push(uNode.operator)}return retArr}},{key:"astUnaryExpression",value:function astUnaryExpression(uNode,retArr,funcParam){if(uNode.prefix){retArr.push(uNode.operator);this.astGeneric(uNode.argument,retArr,funcParam)}else{this.astGeneric(uNode.argument,retArr,funcParam);retArr.push(uNode.operator)}return retArr}},{key:"astThisExpression",value:function astThisExpression(tNode,retArr,funcParam){retArr.push("_this");return retArr}},{key:"astMemberExpression",value:function astMemberExpression(mNode,retArr,funcParam){if(mNode.computed){if(mNode.object.type==="Identifier"){this.astGeneric(mNode.object,retArr,funcParam);retArr.push("[");this.astGeneric(mNode.property,retArr,funcParam);retArr.push("]")}else{this.astGeneric(mNode.object,retArr,funcParam);var last=retArr.pop();retArr.push("][");this.astGeneric(mNode.property,retArr,funcParam);retArr.push(last)}}else{var unrolled=this.astMemberExpressionUnroll(mNode);if(mNode.property.type==="Identifier"&&mNode.computed){unrolled="user_"+unrolled}if(unrolled.indexOf("this")===0){unrolled="_"+unrolled}switch(unrolled){case"_this.output.x":retArr.push(this.output[0]);break;case"_this.output.y":retArr.push(this.output[1]);break;case"_this.output.z":retArr.push(this.output[2]);break;default:retArr.push(unrolled)}}return retArr}},{key:"astSequenceExpression",value:function astSequenceExpression(sNode,retArr,funcParam){for(var i=0;i<sNode.expressions.length;i++){if(i>0){retArr.push(",")}this.astGeneric(sNode.expressions,retArr,funcParam)}return retArr}},{key:"astCallExpression",value:function astCallExpression(ast,retArr,funcParam){if(ast.callee){var funcName=this.astMemberExpressionUnroll(ast.callee);if(funcParam.calledFunctions.indexOf(funcName)<0){funcParam.calledFunctions.push(funcName)}if(!funcParam.hasOwnProperty("funcName")){funcParam.calledFunctionsArguments[funcName]=[]}var functionArguments=[];funcParam.calledFunctionsArguments[funcName].push(functionArguments);retArr.push(funcName);retArr.push("(");for(var i=0;i<ast.arguments.length;++i){var argument=ast.arguments[i];if(i>0){retArr.push(", ")}this.astGeneric(argument,retArr,funcParam);if(argument.type==="Identifier"){var paramIndex=funcParam.paramNames.indexOf(argument.name);if(paramIndex===-1){functionArguments.push(null)}else{functionArguments.push({name:argument.name,type:funcParam.paramTypes[paramIndex]})}}else{functionArguments.push(null)}}retArr.push(")");return retArr}throw this.astErrorOutput("Unknown CallExpression",ast,funcParam);return retArr}},{key:"astArrayExpression",value:function astArrayExpression(arrNode,retArr,funcParam){var arrLen=arrNode.elements.length;retArr.push("new Float32Array(");for(var i=0;i<arrLen;++i){if(i>0){retArr.push(", ")}var subNode=arrNode.elements[i];this.astGeneric(subNode,retArr,funcParam)}retArr.push(")");return retArr}},{key:"astDebuggerStatement",value:function astDebuggerStatement(arrNode,retArr,funcParam){retArr.push("debugger;");return retArr}}],[{key:"astFunctionPrototype",value:function astFunctionPrototype(ast,retArr,funcParam){if(funcParam.isRootKernel||funcParam.isSubKernel){return retArr}retArr.push(funcParam.returnType);retArr.push(" ");retArr.push(funcParam.functionName);retArr.push("(");for(var i=0;i<funcParam.paramNames.length;++i){if(i>0){retArr.push(", ")}retArr.push(funcParam.paramTypes[i]);retArr.push(" ");retArr.push("user_");retArr.push(funcParam.paramNames[i])}retArr.push(");\n");return retArr}}]);return CPUFunctionNode}(BaseFunctionNode)},function(module,exports,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function")}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return call&&(typeof call==="object"||typeof call==="function")?call:self}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass)}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass}var FunctionBuilderBase=__webpack_require__(12);var CPUFunctionNode=__webpack_require__(17);module.exports=function(_FunctionBuilderBase){_inherits(CPUFunctionBuilder,_FunctionBuilderBase);function CPUFunctionBuilder(){_classCallCheck(this,CPUFunctionBuilder);var _this=_possibleConstructorReturn(this,(CPUFunctionBuilder.__proto__||Object.getPrototypeOf(CPUFunctionBuilder)).call(this));_this.Node=CPUFunctionNode;return _this}return CPUFunctionBuilder}(FunctionBuilderBase)},function(module,exports,__webpack_require__){"use strict";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function")}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return call&&(typeof call==="object"||typeof call==="function")?call:self}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass)}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass}var KernelBase=__webpack_require__(26);var utils=__webpack_require__(1);var kernelString=__webpack_require__(39);module.exports=function(_KernelBase){_inherits(CPUKernel,_KernelBase);function CPUKernel(fnString,settings){_classCallCheck(this,CPUKernel);var _this=_possibleConstructorReturn(this,(CPUKernel.__proto__||Object.getPrototypeOf(CPUKernel)).call(this,fnString,settings));_this._fnBody=utils.getFunctionBodyFromString(fnString);_this._fn=null;_this.run=null;_this._canvasCtx=null;_this._imageData=null;_this._colorData=null;_this._kernelString=null;_this.thread={x:0,y:0,z:0};_this.run=function(){this.run=null;this.build.apply(this,arguments);return this.run.apply(this,arguments)}.bind(_this);return _this}_createClass(CPUKernel,[{key:"validateOptions",value:function validateOptions(){if(!this.output||this.output.length===0){if(arguments.length!==1){throw"Auto dimensions only supported for kernels with only one input"}var argType=utils.getArgumentType(arguments[0]);if(argType==="Array"){this.output=utils.getDimensions(argType)}else if(argType==="Texture"){this.output=arguments[0].output}else{throw"Auto dimensions not supported for input type: "+argType}}}},{key:"build",value:function build(){this.setupParams(arguments);var threadDim=this.threadDim=utils.clone(this.output);while(threadDim.length<3){threadDim.push(1)}if(this.graphical){var canvas=this.getCanvas();canvas.width=threadDim[0];canvas.height=threadDim[1];this._canvasCtx=canvas.getContext("2d");this._imageData=this._canvasCtx.createImageData(threadDim[0],threadDim[1]);this._colorData=new Uint8ClampedArray(threadDim[0]*threadDim[1]*4)}var kernelString=this.getKernelString();if(this.debug){console.log("Options:");console.dir(this);console.log("Function output:");console.log(kernelString)}this.kernelString=kernelString;this.run=new Function([],kernelString).bind(this)()}},{key:"color",value:function color(r,g,b,a){if(typeof a==="undefined"){a=1}r=Math.floor(r*255);g=Math.floor(g*255);b=Math.floor(b*255);a=Math.floor(a*255);var width=this.output[0];var height=this.output[1];var x=this.thread.x;var y=height-this.thread.y-1;var index=x+y*width;this._colorData[index*4+0]=r;this._colorData[index*4+1]=g;this._colorData[index*4+2]=b;this._colorData[index*4+3]=a}},{key:"getKernelString",value:function getKernelString(){var _this2=this;if(this._kernelString!==null)return this._kernelString;var builder=this.functionBuilder;var threadDim=this.threadDim||(this.threadDim=utils.clone(this.output));while(threadDim.length<3){threadDim.push(1)}builder.addKernel(this.fnString,{prototypeOnly:false,constants:this.constants,output:this.output,debug:this.debug,loopMaxIterations:this.loopMaxIterations},this.paramNames,this.paramTypes);builder.addFunctions(this.functions,{constants:this.constants,output:this.output});if(this.subKernels!==null){this.subKernelOutputTextures=[];this.subKernelOutputVariableNames=[];for(var i=0;i<this.subKernels.length;i++){var subKernel=this.subKernels[i];builder.addSubKernel(subKernel,{prototypeOnly:false,constants:this.constants,output:this.output,debug:this.debug,loopMaxIterations:this.loopMaxIterations});this.subKernelOutputVariableNames.push(subKernel.name+"Result")}}else if(this.subKernelProperties!==null){this.subKernelOutputVariableNames=[];var _i=0;for(var p in this.subKernelProperties){if(!this.subKernelProperties.hasOwnProperty(p))continue;var _subKernel=this.subKernelProperties[p];builder.addSubKernel(_subKernel);this.subKernelOutputVariableNames.push(_subKernel.name+"Result");_i++}}var prototypes=builder.getPrototypes();var kernel=null;if(prototypes.length>1){prototypes=prototypes.filter(function(fn){if(/^function/.test(fn))return fn;kernel=fn;return false})}else{kernel=prototypes.shift()}var kernelString=this._kernelString="\n\t\tvar LOOP_MAX = "+this._getLoopMaxString()+";\n\t\tvar _this = this;\n  "+(this.subKernelOutputVariableNames===null?"":this.subKernelOutputVariableNames.map(function(name){return"  var "+name+" = null;\n"}).join(""))+"\n    return function ("+this.paramNames.map(function(paramName){return"user_"+paramName}).join(", ")+") {\n    var ret = new Array("+threadDim[2]+");\n  "+(this.subKernelOutputVariableNames===null?"":this.subKernelOutputVariableNames.map(function(name){return"  "+name+"Z = new Array("+threadDim[2]+");\n"}).join(""))+"\n    for (this.thread.z = 0; this.thread.z < "+threadDim[2]+"; this.thread.z++) {\n      ret[this.thread.z] = new Array("+threadDim[1]+");\n  "+(this.subKernelOutputVariableNames===null?"":this.subKernelOutputVariableNames.map(function(name){return"    "+name+"Z[this.thread.z] = new Array("+threadDim[1]+");\n"}).join(""))+"\n      for (this.thread.y = 0; this.thread.y < "+threadDim[1]+"; this.thread.y++) {\n        ret[this.thread.z][this.thread.y] = new Array("+threadDim[0]+");\n  "+(this.subKernelOutputVariableNames===null?"":this.subKernelOutputVariableNames.map(function(name){return"      "+name+"Z[this.thread.z][this.thread.y] = new Array("+threadDim[0]+");\n"}).join(""))+"\n        for (this.thread.x = 0; this.thread.x < "+threadDim[0]+"; this.thread.x++) {\n          var kernelResult;\n          "+kernel+"\n          ret[this.thread.z][this.thread.y][this.thread.x] = kernelResult;\n"+(this.subKernelOutputVariableNames===null?"":this.subKernelOutputVariableNames.map(function(name){return"        "+name+"Z[this.thread.z][this.thread.y][this.thread.x] = "+name+";\n"}).join(""))+"\n          }\n        }\n      }\n      \n      if (this.graphical) {\n        this._imageData.data.set(this._colorData);\n        this._canvasCtx.putImageData(this._imageData, 0, 0);\n        return;\n      }\n      \n      if (this.output.length === 1) {\n        ret = ret[0][0];\n"+(this.subKernelOutputVariableNames===null?"":this.subKernelOutputVariableNames.map(function(name){return"    "+name+" = "+name+"Z[0][0];\n"}).join(""))+"\n      \n    } else if (this.output.length === 2) {\n      ret = ret[0];\n      "+(this.subKernelOutputVariableNames===null?"":this.subKernelOutputVariableNames.map(function(name){return"    "+name+" = "+name+"Z[0];\n"}).join(""))+"\n    }\n    \n    "+(this.subKernelOutputVariableNames===null?"return ret;\n":this.subKernels!==null?"var result = [\n        "+this.subKernelOutputVariableNames.map(function(name){return""+name}).join(",\n")+"\n      ];\n      result.result = ret;\n      return result;\n":"return {\n        result: ret,\n        "+Object.keys(this.subKernelProperties).map(function(name,i){return name+": "+_this2.subKernelOutputVariableNames[i]}).join(",\n")+"\n      };")+"\n    "+(prototypes.length>0?prototypes.join("\n"):"")+"\n    }.bind(this);";return kernelString}},{key:"toString",value:function toString(){return kernelString(this)}},{key:"precompileKernelObj",value:function precompileKernelObj(argTypes){var threadDim=this.threadDim||(this.threadDim=utils.clone(this.output));return{threadDim:threadDim}}},{key:"_getLoopMaxString",value:function _getLoopMaxString(){return this.loopMaxIterations?" "+parseInt(this.loopMaxIterations)+";\n":" 1000;\n"}}],[{key:"compileKernel",value:function compileKernel(precompileObj){var threadDim=precompileObj.threadDim;while(threadDim.length<3){threadDim.push(1)}}}]);return CPUKernel}(KernelBase)},function(module,exports,__webpack_require__){"use strict";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function")}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return call&&(typeof call==="object"||typeof call==="function")?call:self}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass)}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass}var utils=__webpack_require__(1);var RunnerBase=__webpack_require__(27);var CPUKernel=__webpack_require__(19);var CPUFunctionBuilder=__webpack_require__(18);module.exports=function(_RunnerBase){_inherits(CPURunner,_RunnerBase);function CPURunner(settings){_classCallCheck(this,CPURunner);var _this=_possibleConstructorReturn(this,(CPURunner.__proto__||Object.getPrototypeOf(CPURunner)).call(this,new CPUFunctionBuilder,settings));_this.Kernel=CPUKernel;_this.kernel=null;return _this}_createClass(CPURunner,[{key:"getMode",value:function getMode(){return"cpu"}}]);return CPURunner}(RunnerBase)},function(module,exports,__webpack_require__){"use strict";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function")}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return call&&(typeof call==="object"||typeof call==="function")?call:self}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass)}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass}var FunctionNodeBase=__webpack_require__(11);var utils=__webpack_require__(1);var jsMathPrefix="Math.";var localPrefix="this.";var constantsPrefix="this.constants.";var DECODE32_ENCODE32=/decode32\(\s+encode32\(/g;var ENCODE32_DECODE32=/encode32\(\s+decode32\(/g;module.exports=function(_FunctionNodeBase){_inherits(WebGLFunctionNode,_FunctionNodeBase);function WebGLFunctionNode(){_classCallCheck(this,WebGLFunctionNode);return _possibleConstructorReturn(this,(WebGLFunctionNode.__proto__||Object.getPrototypeOf(WebGLFunctionNode)).apply(this,arguments))}_createClass(WebGLFunctionNode,[{key:"generate",value:function generate(){if(this.debug){console.log(this)}if(this.prototypeOnly){return WebGLFunctionNode.astFunctionPrototype(this.getJsAST(),[],this).join("").trim()}else{this.functionStringArray=this.astGeneric(this.getJsAST(),[],this)}this.functionString=webGlRegexOptimize(this.functionStringArray.join("").trim());return this.functionString}},{key:"astGeneric",value:function astGeneric(ast,retArr,funcParam){if(ast===null){throw this.astErrorOutput("NULL ast",ast,funcParam)}else{if(Array.isArray(ast)){for(var i=0;i<ast.length;i++){this.astGeneric(ast[i],retArr,funcParam)}return retArr}switch(ast.type){case"FunctionDeclaration":return this.astFunctionDeclaration(ast,retArr,funcParam);case"FunctionExpression":return this.astFunctionExpression(ast,retArr,funcParam);case"ReturnStatement":return this.astReturnStatement(ast,retArr,funcParam);case"Literal":return this.astLiteral(ast,retArr,funcParam);case"BinaryExpression":return this.astBinaryExpression(ast,retArr,funcParam);case"Identifier":return this.astIdentifierExpression(ast,retArr,funcParam);case"AssignmentExpression":return this.astAssignmentExpression(ast,retArr,funcParam);case"ExpressionStatement":return this.astExpressionStatement(ast,retArr,funcParam);case"EmptyStatement":return this.astEmptyStatement(ast,retArr,funcParam);case"BlockStatement":return this.astBlockStatement(ast,retArr,funcParam);case"IfStatement":return this.astIfStatement(ast,retArr,funcParam);case"BreakStatement":return this.astBreakStatement(ast,retArr,funcParam);case"ContinueStatement":return this.astContinueStatement(ast,retArr,funcParam);case"ForStatement":return this.astForStatement(ast,retArr,funcParam);case"WhileStatement":return this.astWhileStatement(ast,retArr,funcParam);case"VariableDeclaration":return this.astVariableDeclaration(ast,retArr,funcParam);case"VariableDeclarator":return this.astVariableDeclarator(ast,retArr,funcParam);case"ThisExpression":return this.astThisExpression(ast,retArr,funcParam);case"SequenceExpression":return this.astSequenceExpression(ast,retArr,funcParam);case"UnaryExpression":return this.astUnaryExpression(ast,retArr,funcParam);case"UpdateExpression":return this.astUpdateExpression(ast,retArr,funcParam);case"LogicalExpression":return this.astLogicalExpression(ast,retArr,funcParam);case"MemberExpression":return this.astMemberExpression(ast,retArr,funcParam);case"CallExpression":return this.astCallExpression(ast,retArr,funcParam);case"ArrayExpression":return this.astArrayExpression(ast,retArr,funcParam);case"DebuggerStatement":return this.astDebuggerStatement(ast,retArr,funcParam)}throw this.astErrorOutput("Unknown ast type : "+ast.type,ast,funcParam)}}},{key:"astFunctionDeclaration",value:function astFunctionDeclaration(ast,retArr,funcParam){if(this.addFunction){this.addFunction(null,utils.getAstString(this.jsFunctionString,ast))}return retArr}},{key:"astFunctionExpression",value:function astFunctionExpression(ast,retArr,funcParam){if(funcParam.isRootKernel){retArr.push("void");funcParam.kernalAst=ast}else{retArr.push(funcParam.returnType)}retArr.push(" ");retArr.push(funcParam.functionName);retArr.push("(");if(!funcParam.isRootKernel){for(var i=0;i<funcParam.paramNames.length;++i){var paramName=funcParam.paramNames[i];if(i>0){retArr.push(", ")}var type=funcParam.getParamType(paramName);switch(type){case"Texture":case"Input":case"Array":retArr.push("sampler2D");break;default:retArr.push("float")}retArr.push(" ");retArr.push("user_");retArr.push(paramName)}}retArr.push(") {\n");for(var _i=0;_i<ast.body.body.length;++_i){this.astGeneric(ast.body.body[_i],retArr,funcParam);retArr.push("\n")}retArr.push("}\n");return retArr}},{key:"astReturnStatement",value:function astReturnStatement(ast,retArr,funcParam){if(funcParam.isRootKernel){retArr.push("kernelResult = ");this.astGeneric(ast.argument,retArr,funcParam);retArr.push(";");retArr.push("return;")}else if(funcParam.isSubKernel){retArr.push(funcParam.functionName+"Result = ");this.astGeneric(ast.argument,retArr,funcParam);retArr.push(";");retArr.push("return "+funcParam.functionName+"Result;")}else{retArr.push("return ");this.astGeneric(ast.argument,retArr,funcParam);retArr.push(";")}return retArr}},{key:"astLiteral",value:function astLiteral(ast,retArr,funcParam){if(isNaN(ast.value)){throw this.astErrorOutput("Non-numeric literal not supported : "+ast.value,ast,funcParam)}retArr.push(ast.value);if(Number.isInteger(ast.value)){retArr.push(".0")}return retArr}},{key:"astBinaryExpression",value:function astBinaryExpression(ast,retArr,funcParam){retArr.push("(");if(ast.operator==="%"){retArr.push("mod(");this.astGeneric(ast.left,retArr,funcParam);retArr.push(",");this.astGeneric(ast.right,retArr,funcParam);retArr.push(")")}else if(ast.operator==="==="){this.astGeneric(ast.left,retArr,funcParam);retArr.push("==");this.astGeneric(ast.right,retArr,funcParam)}else if(ast.operator==="!=="){this.astGeneric(ast.left,retArr,funcParam);retArr.push("!=");this.astGeneric(ast.right,retArr,funcParam)}else{this.astGeneric(ast.left,retArr,funcParam);retArr.push(ast.operator);this.astGeneric(ast.right,retArr,funcParam)}retArr.push(")");return retArr}},{key:"astIdentifierExpression",value:function astIdentifierExpression(idtNode,retArr,funcParam){if(idtNode.type!=="Identifier"){throw this.astErrorOutput("IdentifierExpression - not an Identifier",idtNode,funcParam)}switch(idtNode.name){case"gpu_threadX":retArr.push("threadId.x");break;case"gpu_threadY":retArr.push("threadId.y");break;case"gpu_threadZ":retArr.push("threadId.z");break;case"gpu_outputX":retArr.push("uOutputDim.x");break;case"gpu_outputY":retArr.push("uOutputDim.y");break;case"gpu_outputZ":retArr.push("uOutputDim.z");break;default:if(this.constants&&this.constants.hasOwnProperty(idtNode.name)){retArr.push("constants_"+idtNode.name)}else{var userParamName=funcParam.getUserParamName(idtNode.name);if(userParamName!==null){retArr.push("user_"+userParamName)}else{retArr.push("user_"+idtNode.name)}}}return retArr}},{key:"astForStatement",value:function astForStatement(forNode,retArr,funcParam){if(forNode.type!=="ForStatement"){throw this.astErrorOutput("Invalid for statment",forNode,funcParam)}if(forNode.test&&forNode.test.type==="BinaryExpression"){if(forNode.test.right.type==="Identifier"&&forNode.test.operator==="<"&&this.isIdentifierConstant(forNode.test.right.name)===false){if(!this.loopMaxIterations){console.warn("Warning: loopMaxIterations is not set! Using default of 1000 which may result in unintended behavior.");console.warn("Set loopMaxIterations or use a for loop of fixed length to silence this message.")}retArr.push("for (");this.astGeneric(forNode.init,retArr,funcParam);this.astGeneric(forNode.test.left,retArr,funcParam);retArr.push(forNode.test.operator);retArr.push("LOOP_MAX");retArr.push(";");this.astGeneric(forNode.update,retArr,funcParam);retArr.push(")");retArr.push("{\n");retArr.push("if (");this.astGeneric(forNode.test.left,retArr,funcParam);retArr.push(forNode.test.operator);this.astGeneric(forNode.test.right,retArr,funcParam);retArr.push(") {\n");if(forNode.body.type==="BlockStatement"){for(var i=0;i<forNode.body.body.length;i++){this.astGeneric(forNode.body.body[i],retArr,funcParam)}}else{this.astGeneric(forNode.body,retArr,funcParam)}retArr.push("} else {\n");retArr.push("break;\n");retArr.push("}\n");retArr.push("}\n");return retArr}else{var declarations=JSON.parse(JSON.stringify(forNode.init.declarations));var updateArgument=forNode.update.argument;if(!Array.isArray(declarations)||declarations.length<1){console.log(this.jsFunctionString);throw new Error("Error: Incompatible for loop declaration")}if(declarations.length>1){var initArgument=null;for(var _i2=0;_i2<declarations.length;_i2++){var declaration=declarations[_i2];if(declaration.id.name===updateArgument.name){initArgument=declaration;declarations.splice(_i2,1)}else{retArr.push("float ");this.astGeneric(declaration,retArr,funcParam);retArr.push(";")}}retArr.push("for (float ");this.astGeneric(initArgument,retArr,funcParam);retArr.push(";")}else{retArr.push("for (");this.astGeneric(forNode.init,retArr,funcParam)}this.astGeneric(forNode.test,retArr,funcParam);retArr.push(";");this.astGeneric(forNode.update,retArr,funcParam);retArr.push(")");this.astGeneric(forNode.body,retArr,funcParam);return retArr}}throw this.astErrorOutput("Invalid for statement",forNode,funcParam)}},{key:"astWhileStatement",value:function astWhileStatement(whileNode,retArr,funcParam){if(whileNode.type!=="WhileStatement"){throw this.astErrorOutput("Invalid while statment",whileNode,funcParam)}retArr.push("for (float i = 0.0; i < LOOP_MAX; i++) {");retArr.push("if (");this.astGeneric(whileNode.test,retArr,funcParam);retArr.push(") {\n");this.astGeneric(whileNode.body,retArr,funcParam);retArr.push("} else {\n");retArr.push("break;\n");retArr.push("}\n");retArr.push("}\n");return retArr}},{key:"astAssignmentExpression",value:function astAssignmentExpression(assNode,retArr,funcParam){if(assNode.operator==="%="){this.astGeneric(assNode.left,retArr,funcParam);retArr.push("=");retArr.push("mod(");this.astGeneric(assNode.left,retArr,funcParam);retArr.push(",");this.astGeneric(assNode.right,retArr,funcParam);retArr.push(")")}else{this.astGeneric(assNode.left,retArr,funcParam);retArr.push(assNode.operator);this.astGeneric(assNode.right,retArr,funcParam);return retArr}}},{key:"astEmptyStatement",value:function astEmptyStatement(eNode,retArr,funcParam){return retArr}},{key:"astBlockStatement",value:function astBlockStatement(bNode,retArr,funcParam){retArr.push("{\n");for(var i=0;i<bNode.body.length;i++){this.astGeneric(bNode.body[i],retArr,funcParam)}retArr.push("}\n");return retArr}},{key:"astExpressionStatement",value:function astExpressionStatement(esNode,retArr,funcParam){this.astGeneric(esNode.expression,retArr,funcParam);retArr.push(";\n");return retArr}},{key:"astVariableDeclaration",value:function astVariableDeclaration(vardecNode,retArr,funcParam){retArr.push("float ");for(var i=0;i<vardecNode.declarations.length;i++){if(i>0){retArr.push(",")}this.astGeneric(vardecNode.declarations[i],retArr,funcParam)}retArr.push(";");return retArr}},{key:"astVariableDeclarator",value:function astVariableDeclarator(ivardecNode,retArr,funcParam){this.astGeneric(ivardecNode.id,retArr,funcParam);if(ivardecNode.init!==null){retArr.push("=");this.astGeneric(ivardecNode.init,retArr,funcParam)}return retArr}},{key:"astIfStatement",value:function astIfStatement(ifNode,retArr,funcParam){retArr.push("if (");this.astGeneric(ifNode.test,retArr,funcParam);retArr.push(")");if(ifNode.consequent.type==="BlockStatement"){this.astGeneric(ifNode.consequent,retArr,funcParam)}else{retArr.push(" {\n");this.astGeneric(ifNode.consequent,retArr,funcParam);retArr.push("\n}\n")}if(ifNode.alternate){retArr.push("else ");if(ifNode.alternate.type==="BlockStatement"){this.astGeneric(ifNode.alternate,retArr,funcParam)}else{retArr.push(" {\n");this.astGeneric(ifNode.alternate,retArr,funcParam);retArr.push("\n}\n")}}return retArr}},{key:"astBreakStatement",value:function astBreakStatement(brNode,retArr,funcParam){retArr.push("break;\n");return retArr}},{key:"astContinueStatement",value:function astContinueStatement(crNode,retArr,funcParam){retArr.push("continue;\n");return retArr}},{key:"astLogicalExpression",value:function astLogicalExpression(logNode,retArr,funcParam){retArr.push("(");this.astGeneric(logNode.left,retArr,funcParam);retArr.push(logNode.operator);this.astGeneric(logNode.right,retArr,funcParam);retArr.push(")");return retArr}},{key:"astUpdateExpression",value:function astUpdateExpression(uNode,retArr,funcParam){if(uNode.prefix){retArr.push(uNode.operator);this.astGeneric(uNode.argument,retArr,funcParam)}else{this.astGeneric(uNode.argument,retArr,funcParam);retArr.push(uNode.operator)}return retArr}},{key:"astUnaryExpression",value:function astUnaryExpression(uNode,retArr,funcParam){if(uNode.prefix){retArr.push(uNode.operator);this.astGeneric(uNode.argument,retArr,funcParam)}else{this.astGeneric(uNode.argument,retArr,funcParam);retArr.push(uNode.operator)}return retArr}},{key:"astThisExpression",value:function astThisExpression(tNode,retArr,funcParam){retArr.push("this");return retArr}},{key:"astMemberExpression",value:function astMemberExpression(mNode,retArr,funcParam){if(mNode.computed){if(mNode.object.type==="Identifier"){var reqName=mNode.object.name;var funcName=funcParam.functionName||"kernel";var assumeNotTexture=false;if(funcParam.paramNames){var idx=funcParam.paramNames.indexOf(reqName);if(idx>=0&&funcParam.paramTypes[idx]==="float"){assumeNotTexture=true}}if(assumeNotTexture){this.astGeneric(mNode.object,retArr,funcParam);retArr.push("[int(");this.astGeneric(mNode.property,retArr,funcParam);retArr.push(")]")}else{retArr.push("get(");this.astGeneric(mNode.object,retArr,funcParam);retArr.push(", vec2(");this.astGeneric(mNode.object,retArr,funcParam);retArr.push("Size[0],");this.astGeneric(mNode.object,retArr,funcParam);retArr.push("Size[1]), vec3(");this.astGeneric(mNode.object,retArr,funcParam);retArr.push("Dim[0],");this.astGeneric(mNode.object,retArr,funcParam);retArr.push("Dim[1],");this.astGeneric(mNode.object,retArr,funcParam);retArr.push("Dim[2]");retArr.push("), ");this.astGeneric(mNode.property,retArr,funcParam);retArr.push(")")}}else{this.astGeneric(mNode.object,retArr,funcParam);var last=retArr.pop();retArr.push(",");this.astGeneric(mNode.property,retArr,funcParam);retArr.push(last)}}else{var unrolled=this.astMemberExpressionUnroll(mNode);var unrolled_lc=unrolled.toLowerCase();if(unrolled.indexOf(constantsPrefix)===0){unrolled="constants_"+unrolled.slice(constantsPrefix.length)}switch(unrolled_lc){case"this.thread.x":retArr.push("threadId.x");break;case"this.thread.y":retArr.push("threadId.y");break;case"this.thread.z":retArr.push("threadId.z");break;case"this.output.x":retArr.push(this.output[0]+".0");break;case"this.output.y":retArr.push(this.output[1]+".0");break;case"this.output.z":retArr.push(this.output[2]+".0");break;default:retArr.push(unrolled)}}return retArr}},{key:"astSequenceExpression",value:function astSequenceExpression(sNode,retArr,funcParam){for(var i=0;i<sNode.expressions.length;i++){if(i>0){retArr.push(",")}this.astGeneric(sNode.expressions,retArr,funcParam)}return retArr}},{key:"astCallExpression",value:function astCallExpression(ast,retArr,funcParam){if(ast.callee){var funcName=this.astMemberExpressionUnroll(ast.callee);if(funcName.indexOf(jsMathPrefix)===0){funcName=funcName.slice(jsMathPrefix.length)}if(funcName.indexOf(localPrefix)===0){funcName=funcName.slice(localPrefix.length)}if(funcName==="atan2"){funcName="atan"}if(funcParam.calledFunctions.indexOf(funcName)<0){funcParam.calledFunctions.push(funcName)}if(!funcParam.hasOwnProperty("funcName")){funcParam.calledFunctionsArguments[funcName]=[]}var functionArguments=[];funcParam.calledFunctionsArguments[funcName].push(functionArguments);retArr.push(funcName);retArr.push("(");for(var i=0;i<ast.arguments.length;++i){var argument=ast.arguments[i];if(i>0){retArr.push(", ")}this.astGeneric(argument,retArr,funcParam);if(argument.type==="Identifier"){var paramIndex=funcParam.paramNames.indexOf(argument.name);if(paramIndex===-1){functionArguments.push(null)}else{functionArguments.push({name:argument.name,type:funcParam.paramTypes[paramIndex]})}}else{functionArguments.push(null)}}retArr.push(")");return retArr}throw this.astErrorOutput("Unknown CallExpression",ast,funcParam);return retArr}},{key:"astArrayExpression",value:function astArrayExpression(arrNode,retArr,funcParam){var arrLen=arrNode.elements.length;retArr.push("float["+arrLen+"](");for(var i=0;i<arrLen;++i){if(i>0){retArr.push(", ")}var subNode=arrNode.elements[i];this.astGeneric(subNode,retArr,funcParam)}retArr.push(")");return retArr}},{key:"getFunctionPrototypeString",value:function getFunctionPrototypeString(){if(this.webGlFunctionPrototypeString){return this.webGlFunctionPrototypeString}return this.webGlFunctionPrototypeString=this.generate()}},{key:"build",value:function build(){return this.getFunctionPrototypeString().length>0}}],[{key:"astFunctionPrototype",value:function astFunctionPrototype(ast,retArr,funcParam){if(funcParam.isRootKernel||funcParam.isSubKernel){return retArr}retArr.push(funcParam.returnType);retArr.push(" ");retArr.push(funcParam.functionName);retArr.push("(");for(var i=0;i<funcParam.paramNames.length;++i){if(i>0){retArr.push(", ")}retArr.push(funcParam.paramTypes[i]);retArr.push(" ");retArr.push("user_");retArr.push(funcParam.paramNames[i])}retArr.push(");\n");return retArr}}]);return WebGLFunctionNode}(FunctionNodeBase);function isIdentifierKernelParam(paramName,ast,funcParam){return funcParam.paramNames.indexOf(paramName)!==-1}function ensureIndentifierType(paramName,expectedType,ast,funcParam){var start=ast.loc.start;if(!isIdentifierKernelParam(paramName,funcParam)&&expectedType!=="float"){throw new Error("Error unexpected identifier "+paramName+" on line "+start.line)}else{var actualType=funcParam.paramTypes[funcParam.paramNames.indexOf(paramName)];if(actualType!==expectedType){throw new Error("Error unexpected identifier "+paramName+" on line "+start.line)}}}function webGlRegexOptimize(inStr){return inStr.replace(DECODE32_ENCODE32,"((").replace(ENCODE32_DECODE32,"((")}},function(module,exports,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function")}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return call&&(typeof call==="object"||typeof call==="function")?call:self}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass)}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass}var FunctionBuilderBase=__webpack_require__(12);var WebGLFunctionNode=__webpack_require__(21);module.exports=function(_FunctionBuilderBase){_inherits(WebGL2FunctionBuilder,_FunctionBuilderBase);function WebGL2FunctionBuilder(){_classCallCheck(this,WebGL2FunctionBuilder);var _this=_possibleConstructorReturn(this,(WebGL2FunctionBuilder.__proto__||Object.getPrototypeOf(WebGL2FunctionBuilder)).call(this));_this.Node=WebGLFunctionNode;return _this}return WebGL2FunctionBuilder}(FunctionBuilderBase)},function(module,exports,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function")}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return call&&(typeof call==="object"||typeof call==="function")?call:self}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass)}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass}var WebGLRunner=__webpack_require__(14);var WebGL2FunctionBuilder=__webpack_require__(22);var WebGL2Kernel=__webpack_require__(10);module.exports=function(_WebGLRunner){_inherits(WebGL2Runner,_WebGLRunner);function WebGL2Runner(settings){_classCallCheck(this,WebGL2Runner);var _this=_possibleConstructorReturn(this,(WebGL2Runner.__proto__||Object.getPrototypeOf(WebGL2Runner)).call(this,new WebGL2FunctionBuilder,settings));_this.Kernel=WebGL2Kernel;_this.kernel=null;return _this}return WebGL2Runner}(WebGLRunner)},function(module,exports,__webpack_require__){"use strict";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function")}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return call&&(typeof call==="object"||typeof call==="function")?call:self}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass)}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass}var FunctionNodeBase=__webpack_require__(11);var utils=__webpack_require__(1);var jsMathPrefix="Math.";var localPrefix="this.";var constantsPrefix="this.constants.";var DECODE32_ENCODE32=/decode32\(\s+encode32\(/g;var ENCODE32_DECODE32=/encode32\(\s+decode32\(/g;module.exports=function(_FunctionNodeBase){_inherits(WebGLFunctionNode,_FunctionNodeBase);function WebGLFunctionNode(){_classCallCheck(this,WebGLFunctionNode);return _possibleConstructorReturn(this,(WebGLFunctionNode.__proto__||Object.getPrototypeOf(WebGLFunctionNode)).apply(this,arguments))}_createClass(WebGLFunctionNode,[{key:"generate",value:function generate(){if(this.debug){console.log(this)}if(this.prototypeOnly){return WebGLFunctionNode.astFunctionPrototype(this.getJsAST(),[],this).join("").trim()}else{this.functionStringArray=this.astGeneric(this.getJsAST(),[],this)}this.functionString=webGlRegexOptimize(this.functionStringArray.join("").trim());return this.functionString}},{key:"astGeneric",value:function astGeneric(ast,retArr,funcParam){if(ast===null){throw this.astErrorOutput("NULL ast",ast,funcParam)}else{if(Array.isArray(ast)){for(var i=0;i<ast.length;i++){this.astGeneric(ast[i],retArr,funcParam)}return retArr}switch(ast.type){case"FunctionDeclaration":return this.astFunctionDeclaration(ast,retArr,funcParam);case"FunctionExpression":return this.astFunctionExpression(ast,retArr,funcParam);case"ReturnStatement":return this.astReturnStatement(ast,retArr,funcParam);case"Literal":return this.astLiteral(ast,retArr,funcParam);case"BinaryExpression":return this.astBinaryExpression(ast,retArr,funcParam);case"Identifier":return this.astIdentifierExpression(ast,retArr,funcParam);case"AssignmentExpression":return this.astAssignmentExpression(ast,retArr,funcParam);case"ExpressionStatement":return this.astExpressionStatement(ast,retArr,funcParam);case"EmptyStatement":return this.astEmptyStatement(ast,retArr,funcParam);case"BlockStatement":return this.astBlockStatement(ast,retArr,funcParam);case"IfStatement":return this.astIfStatement(ast,retArr,funcParam);case"BreakStatement":return this.astBreakStatement(ast,retArr,funcParam);case"ContinueStatement":return this.astContinueStatement(ast,retArr,funcParam);case"ForStatement":return this.astForStatement(ast,retArr,funcParam);case"WhileStatement":return this.astWhileStatement(ast,retArr,funcParam);case"VariableDeclaration":return this.astVariableDeclaration(ast,retArr,funcParam);case"VariableDeclarator":return this.astVariableDeclarator(ast,retArr,funcParam);case"ThisExpression":return this.astThisExpression(ast,retArr,funcParam);case"SequenceExpression":return this.astSequenceExpression(ast,retArr,funcParam);case"UnaryExpression":return this.astUnaryExpression(ast,retArr,funcParam);case"UpdateExpression":return this.astUpdateExpression(ast,retArr,funcParam);case"LogicalExpression":return this.astLogicalExpression(ast,retArr,funcParam);case"MemberExpression":return this.astMemberExpression(ast,retArr,funcParam);case"CallExpression":return this.astCallExpression(ast,retArr,funcParam);case"ArrayExpression":return this.astArrayExpression(ast,retArr,funcParam);case"DebuggerStatement":return this.astDebuggerStatement(ast,retArr,funcParam)}throw this.astErrorOutput("Unknown ast type : "+ast.type,ast,funcParam)}}},{key:"astFunctionDeclaration",value:function astFunctionDeclaration(ast,retArr,funcParam){if(this.addFunction){this.addFunction(null,utils.getAstString(this.jsFunctionString,ast))}return retArr}},{key:"astFunctionExpression",value:function astFunctionExpression(ast,retArr,funcParam){if(funcParam.isRootKernel){retArr.push("void");funcParam.kernalAst=ast}else{retArr.push(funcParam.returnType)}retArr.push(" ");retArr.push(funcParam.functionName);retArr.push("(");if(!funcParam.isRootKernel){for(var i=0;i<funcParam.paramNames.length;++i){var paramName=funcParam.paramNames[i];if(i>0){retArr.push(", ")}var type=funcParam.getParamType(paramName);switch(type){case"Texture":case"Input":case"Array":retArr.push("sampler2D");break;default:retArr.push("float")}retArr.push(" ");retArr.push("user_");retArr.push(paramName)}}retArr.push(") {\n");for(var _i=0;_i<ast.body.body.length;++_i){this.astGeneric(ast.body.body[_i],retArr,funcParam);retArr.push("\n")}retArr.push("}\n");return retArr}},{key:"astReturnStatement",value:function astReturnStatement(ast,retArr,funcParam){if(funcParam.isRootKernel){retArr.push("kernelResult = ");this.astGeneric(ast.argument,retArr,funcParam);retArr.push(";");retArr.push("return;")}else if(funcParam.isSubKernel){retArr.push(funcParam.functionName+"Result = ");this.astGeneric(ast.argument,retArr,funcParam);retArr.push(";");retArr.push("return "+funcParam.functionName+"Result;")}else{retArr.push("return ");this.astGeneric(ast.argument,retArr,funcParam);retArr.push(";")}return retArr}},{key:"astLiteral",value:function astLiteral(ast,retArr,funcParam){if(isNaN(ast.value)){throw this.astErrorOutput("Non-numeric literal not supported : "+ast.value,ast,funcParam)}retArr.push(ast.value);if(Number.isInteger(ast.value)){retArr.push(".0")}return retArr}},{key:"astBinaryExpression",value:function astBinaryExpression(ast,retArr,funcParam){retArr.push("(");if(ast.operator==="%"){retArr.push("mod(");this.astGeneric(ast.left,retArr,funcParam);retArr.push(",");this.astGeneric(ast.right,retArr,funcParam);retArr.push(")")}else if(ast.operator==="==="){this.astGeneric(ast.left,retArr,funcParam);retArr.push("==");this.astGeneric(ast.right,retArr,funcParam)}else if(ast.operator==="!=="){this.astGeneric(ast.left,retArr,funcParam);retArr.push("!=");this.astGeneric(ast.right,retArr,funcParam)}else{this.astGeneric(ast.left,retArr,funcParam);retArr.push(ast.operator);this.astGeneric(ast.right,retArr,funcParam)}retArr.push(")");return retArr}},{key:"astIdentifierExpression",value:function astIdentifierExpression(idtNode,retArr,funcParam){if(idtNode.type!=="Identifier"){throw this.astErrorOutput("IdentifierExpression - not an Identifier",idtNode,funcParam)}switch(idtNode.name){case"gpu_threadX":retArr.push("threadId.x");break;case"gpu_threadY":retArr.push("threadId.y");break;case"gpu_threadZ":retArr.push("threadId.z");break;case"gpu_outputX":retArr.push("uOutputDim.x");break;case"gpu_outputY":retArr.push("uOutputDim.y");break;case"gpu_outputZ":retArr.push("uOutputDim.z");break;default:if(this.constants&&this.constants.hasOwnProperty(idtNode.name)){retArr.push("constants_"+idtNode.name)}else{var userParamName=funcParam.getUserParamName(idtNode.name);if(userParamName!==null){retArr.push("user_"+userParamName)}else{retArr.push("user_"+idtNode.name)}}}return retArr}},{key:"astForStatement",value:function astForStatement(forNode,retArr,funcParam){if(forNode.type!=="ForStatement"){throw this.astErrorOutput("Invalid for statment",forNode,funcParam)}if(forNode.test&&forNode.test.type==="BinaryExpression"){if(forNode.test.right.type==="Identifier"&&forNode.test.operator==="<"&&this.isIdentifierConstant(forNode.test.right.name)===false){if(!this.loopMaxIterations){console.warn("Warning: loopMaxIterations is not set! Using default of 1000 which may result in unintended behavior.");console.warn("Set loopMaxIterations or use a for loop of fixed length to silence this message.")}retArr.push("for (");this.astGeneric(forNode.init,retArr,funcParam);this.astGeneric(forNode.test.left,retArr,funcParam);retArr.push(forNode.test.operator);retArr.push("LOOP_MAX");retArr.push(";");this.astGeneric(forNode.update,retArr,funcParam);retArr.push(")");retArr.push("{\n");retArr.push("if (");this.astGeneric(forNode.test.left,retArr,funcParam);retArr.push(forNode.test.operator);this.astGeneric(forNode.test.right,retArr,funcParam);retArr.push(") {\n");if(forNode.body.type==="BlockStatement"){for(var i=0;i<forNode.body.body.length;i++){this.astGeneric(forNode.body.body[i],retArr,funcParam)}}else{this.astGeneric(forNode.body,retArr,funcParam)}retArr.push("} else {\n");retArr.push("break;\n");retArr.push("}\n");retArr.push("}\n");return retArr}else{var declarations=JSON.parse(JSON.stringify(forNode.init.declarations));var updateArgument=forNode.update.argument;if(!Array.isArray(declarations)||declarations.length<1){console.log(this.jsFunctionString);throw new Error("Error: Incompatible for loop declaration")}if(declarations.length>1){var initArgument=null;for(var _i2=0;_i2<declarations.length;_i2++){var declaration=declarations[_i2];if(declaration.id.name===updateArgument.name){initArgument=declaration;declarations.splice(_i2,1)}else{retArr.push("float ");this.astGeneric(declaration,retArr,funcParam);retArr.push(";")}}retArr.push("for (float ");this.astGeneric(initArgument,retArr,funcParam);retArr.push(";")}else{retArr.push("for (");this.astGeneric(forNode.init,retArr,funcParam)}this.astGeneric(forNode.test,retArr,funcParam);retArr.push(";");this.astGeneric(forNode.update,retArr,funcParam);retArr.push(")");this.astGeneric(forNode.body,retArr,funcParam);return retArr}}throw this.astErrorOutput("Invalid for statement",forNode,funcParam)}},{key:"astWhileStatement",value:function astWhileStatement(whileNode,retArr,funcParam){if(whileNode.type!=="WhileStatement"){throw this.astErrorOutput("Invalid while statment",whileNode,funcParam)}retArr.push("for (float i = 0.0; i < LOOP_MAX; i++) {");retArr.push("if (");this.astGeneric(whileNode.test,retArr,funcParam);retArr.push(") {\n");this.astGeneric(whileNode.body,retArr,funcParam);retArr.push("} else {\n");retArr.push("break;\n");retArr.push("}\n");retArr.push("}\n");return retArr}},{key:"astAssignmentExpression",value:function astAssignmentExpression(assNode,retArr,funcParam){if(assNode.operator==="%="){this.astGeneric(assNode.left,retArr,funcParam);retArr.push("=");retArr.push("mod(");this.astGeneric(assNode.left,retArr,funcParam);retArr.push(",");this.astGeneric(assNode.right,retArr,funcParam);retArr.push(")")}else{this.astGeneric(assNode.left,retArr,funcParam);retArr.push(assNode.operator);this.astGeneric(assNode.right,retArr,funcParam);return retArr}}},{key:"astEmptyStatement",value:function astEmptyStatement(eNode,retArr,funcParam){return retArr}},{key:"astBlockStatement",value:function astBlockStatement(bNode,retArr,funcParam){retArr.push("{\n");for(var i=0;i<bNode.body.length;i++){this.astGeneric(bNode.body[i],retArr,funcParam)}retArr.push("}\n");return retArr}},{key:"astExpressionStatement",value:function astExpressionStatement(esNode,retArr,funcParam){this.astGeneric(esNode.expression,retArr,funcParam);retArr.push(";\n");return retArr}},{key:"astVariableDeclaration",value:function astVariableDeclaration(vardecNode,retArr,funcParam){retArr.push("float ");for(var i=0;i<vardecNode.declarations.length;i++){if(i>0){retArr.push(",")}this.astGeneric(vardecNode.declarations[i],retArr,funcParam)}retArr.push(";");return retArr}},{key:"astVariableDeclarator",value:function astVariableDeclarator(ivardecNode,retArr,funcParam){this.astGeneric(ivardecNode.id,retArr,funcParam);if(ivardecNode.init!==null){retArr.push("=");this.astGeneric(ivardecNode.init,retArr,funcParam)}return retArr}},{key:"astIfStatement",value:function astIfStatement(ifNode,retArr,funcParam){retArr.push("if (");this.astGeneric(ifNode.test,retArr,funcParam);retArr.push(")");if(ifNode.consequent.type==="BlockStatement"){this.astGeneric(ifNode.consequent,retArr,funcParam)}else{retArr.push(" {\n");this.astGeneric(ifNode.consequent,retArr,funcParam);retArr.push("\n}\n")}if(ifNode.alternate){retArr.push("else ");if(ifNode.alternate.type==="BlockStatement"){this.astGeneric(ifNode.alternate,retArr,funcParam)}else{retArr.push(" {\n");this.astGeneric(ifNode.alternate,retArr,funcParam);retArr.push("\n}\n")}}return retArr}},{key:"astBreakStatement",value:function astBreakStatement(brNode,retArr,funcParam){retArr.push("break;\n");return retArr}},{key:"astContinueStatement",value:function astContinueStatement(crNode,retArr,funcParam){retArr.push("continue;\n");return retArr}},{key:"astLogicalExpression",value:function astLogicalExpression(logNode,retArr,funcParam){retArr.push("(");this.astGeneric(logNode.left,retArr,funcParam);retArr.push(logNode.operator);this.astGeneric(logNode.right,retArr,funcParam);retArr.push(")");return retArr}},{key:"astUpdateExpression",value:function astUpdateExpression(uNode,retArr,funcParam){if(uNode.prefix){retArr.push(uNode.operator);this.astGeneric(uNode.argument,retArr,funcParam)}else{this.astGeneric(uNode.argument,retArr,funcParam);retArr.push(uNode.operator)}return retArr}},{key:"astUnaryExpression",value:function astUnaryExpression(uNode,retArr,funcParam){if(uNode.prefix){retArr.push(uNode.operator);this.astGeneric(uNode.argument,retArr,funcParam)}else{this.astGeneric(uNode.argument,retArr,funcParam);retArr.push(uNode.operator)}return retArr}},{key:"astThisExpression",value:function astThisExpression(tNode,retArr,funcParam){retArr.push("this");return retArr}},{key:"astMemberExpression",value:function astMemberExpression(mNode,retArr,funcParam){if(mNode.computed){if(mNode.object.type==="Identifier"){var reqName=mNode.object.name;var funcName=funcParam.functionName||"kernel";var assumeNotTexture=false;if(funcParam.paramNames){var idx=funcParam.paramNames.indexOf(reqName);if(idx>=0&&funcParam.paramTypes[idx]==="float"){assumeNotTexture=true}}if(assumeNotTexture){this.astGeneric(mNode.object,retArr,funcParam);retArr.push("[int(");this.astGeneric(mNode.property,retArr,funcParam);retArr.push(")]")}else{retArr.push("get(");this.astGeneric(mNode.object,retArr,funcParam);retArr.push(", vec2(");this.astGeneric(mNode.object,retArr,funcParam);retArr.push("Size[0],");this.astGeneric(mNode.object,retArr,funcParam);retArr.push("Size[1]), vec3(");this.astGeneric(mNode.object,retArr,funcParam);retArr.push("Dim[0],");this.astGeneric(mNode.object,retArr,funcParam);retArr.push("Dim[1],");this.astGeneric(mNode.object,retArr,funcParam);retArr.push("Dim[2]");retArr.push("), ");this.astGeneric(mNode.property,retArr,funcParam);retArr.push(")")}}else{this.astGeneric(mNode.object,retArr,funcParam);var last=retArr.pop();retArr.push(",");this.astGeneric(mNode.property,retArr,funcParam);retArr.push(last)}}else{var unrolled=this.astMemberExpressionUnroll(mNode);var unrolled_lc=unrolled.toLowerCase();if(unrolled.indexOf(constantsPrefix)===0){unrolled="constants_"+unrolled.slice(constantsPrefix.length)}switch(unrolled_lc){case"this.thread.x":retArr.push("threadId.x");break;case"this.thread.y":retArr.push("threadId.y");break;case"this.thread.z":retArr.push("threadId.z");break;case"this.output.x":retArr.push(this.output[0]+".0");break;case"this.output.y":retArr.push(this.output[1]+".0");break;case"this.output.z":retArr.push(this.output[2]+".0");break;default:retArr.push(unrolled)}}return retArr}},{key:"astSequenceExpression",value:function astSequenceExpression(sNode,retArr,funcParam){for(var i=0;i<sNode.expressions.length;i++){if(i>0){retArr.push(",")}this.astGeneric(sNode.expressions,retArr,funcParam)}return retArr}},{key:"astCallExpression",value:function astCallExpression(ast,retArr,funcParam){if(ast.callee){var funcName=this.astMemberExpressionUnroll(ast.callee);if(funcName.indexOf(jsMathPrefix)===0){funcName=funcName.slice(jsMathPrefix.length)}if(funcName.indexOf(localPrefix)===0){funcName=funcName.slice(localPrefix.length)}if(funcName==="atan2"){funcName="atan"}if(funcParam.calledFunctions.indexOf(funcName)<0){funcParam.calledFunctions.push(funcName)}if(!funcParam.hasOwnProperty("funcName")){funcParam.calledFunctionsArguments[funcName]=[]}var functionArguments=[];funcParam.calledFunctionsArguments[funcName].push(functionArguments);retArr.push(funcName);retArr.push("(");for(var i=0;i<ast.arguments.length;++i){var argument=ast.arguments[i];if(i>0){retArr.push(", ")}this.astGeneric(argument,retArr,funcParam);if(argument.type==="Identifier"){var paramIndex=funcParam.paramNames.indexOf(argument.name);if(paramIndex===-1){functionArguments.push(null)}else{functionArguments.push({name:argument.name,type:funcParam.paramTypes[paramIndex]})}}else{functionArguments.push(null)}}retArr.push(")");return retArr}throw this.astErrorOutput("Unknown CallExpression",ast,funcParam);return retArr}},{key:"astArrayExpression",value:function astArrayExpression(arrNode,retArr,funcParam){var arrLen=arrNode.elements.length;retArr.push("float["+arrLen+"](");for(var i=0;i<arrLen;++i){if(i>0){retArr.push(", ")}var subNode=arrNode.elements[i];this.astGeneric(subNode,retArr,funcParam)}retArr.push(")");return retArr}},{key:"getFunctionPrototypeString",value:function getFunctionPrototypeString(){if(this.webGlFunctionPrototypeString){return this.webGlFunctionPrototypeString}return this.webGlFunctionPrototypeString=this.generate()}},{key:"build",value:function build(){return this.getFunctionPrototypeString().length>0}}],[{key:"astFunctionPrototype",value:function astFunctionPrototype(ast,retArr,funcParam){if(funcParam.isRootKernel||funcParam.isSubKernel){return retArr}retArr.push(funcParam.returnType);retArr.push(" ");retArr.push(funcParam.functionName);retArr.push("(");for(var i=0;i<funcParam.paramNames.length;++i){if(i>0){retArr.push(", ")}retArr.push(funcParam.paramTypes[i]);retArr.push(" ");retArr.push("user_");retArr.push(funcParam.paramNames[i])}retArr.push(");\n");return retArr}}]);return WebGLFunctionNode}(FunctionNodeBase);function isIdentifierKernelParam(paramName,ast,funcParam){return funcParam.paramNames.indexOf(paramName)!==-1}function ensureIndentifierType(paramName,expectedType,ast,funcParam){var start=ast.loc.start;if(!isIdentifierKernelParam(paramName,funcParam)&&expectedType!=="float"){throw new Error("Error unexpected identifier "+paramName+" on line "+start.line)}else{var actualType=funcParam.paramTypes[funcParam.paramNames.indexOf(paramName)];if(actualType!==expectedType){throw new Error("Error unexpected identifier "+paramName+" on line "+start.line)}}}function webGlRegexOptimize(inStr){return inStr.replace(DECODE32_ENCODE32,"((").replace(ENCODE32_DECODE32,"((")}},function(module,exports,__webpack_require__){"use strict";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function")}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return call&&(typeof call==="object"||typeof call==="function")?call:self}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass)}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass}var FunctionBuilderBase=__webpack_require__(12);var WebGLFunctionNode=__webpack_require__(24);module.exports=function(_FunctionBuilderBase){_inherits(WebGLFunctionBuilder,_FunctionBuilderBase);function WebGLFunctionBuilder(){_classCallCheck(this,WebGLFunctionBuilder);var _this=_possibleConstructorReturn(this,(WebGLFunctionBuilder.__proto__||Object.getPrototypeOf(WebGLFunctionBuilder)).call(this));_this.Node=WebGLFunctionNode;return _this}_createClass(WebGLFunctionBuilder,[{key:"polyfillStandardFunctions",value:function polyfillStandardFunctions(){this.addFunction("round",_round)}}],[{key:"round",value:function round(a){return _round(a)}}]);return WebGLFunctionBuilder}(FunctionBuilderBase);function _round(a){return Math.floor(a+.5)}},function(module,exports,__webpack_require__){"use strict";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function")}}var utils=__webpack_require__(1);module.exports=function(){function BaseKernel(fnString,settings){_classCallCheck(this,BaseKernel);this.paramNames=utils.getParamNamesFromString(fnString);this.fnString=fnString;this.output=null;this.debug=false;this.graphical=false;this.loopMaxIterations=0;this.constants=null;this.wraparound=null;this.hardcodeConstants=null;this.outputToTexture=null;this.outputImmutable=null;this.texSize=null;this._canvas=null;this._webGl=null;this.threadDim=null;this.floatTextures=null;this.floatOutput=null;this.floatOutputForce=null;this.addFunction=null;this.functions=null;this.nativeFunctions=null;this.subKernels=null;this.subKernelProperties=null;this.subKernelNames=null;this.subKernelOutputVariableNames=null;this.functionBuilder=null;this.paramTypes=null;for(var p in settings){if(!settings.hasOwnProperty(p)||!this.hasOwnProperty(p))continue;this[p]=settings[p]}if(settings.hasOwnProperty("canvas")){this._canvas=settings.canvas}if(settings.hasOwnProperty("output")){this.setOutput(settings.output)}if(!this._canvas)this._canvas=utils.initCanvas()}_createClass(BaseKernel,[{key:"build",value:function build(){throw new Error('"build" not defined on Base')}},{key:"setupParams",value:function setupParams(args){var paramTypes=this.paramTypes=[];for(var i=0;i<args.length;i++){var param=args[i];var paramType=utils.getArgumentType(param);paramTypes.push(paramType)}}},{key:"setAddFunction",value:function setAddFunction(cb){this.addFunction=cb;return this}},{key:"setFunctions",value:function setFunctions(functions){this.functions=functions;return this}},{key:"setOutput",value:function setOutput(output){if(output.hasOwnProperty("x")){if(output.hasOwnProperty("y")){if(output.hasOwnProperty("z")){this.output=[output.x,output.y,output.z]}else{this.output=[output.x,output.y]}}else{this.output=[output.x]}}else{this.output=output}return this}},{key:"setDebug",value:function setDebug(flag){this.debug=flag;return this}},{key:"setGraphical",value:function setGraphical(flag){this.graphical=flag;return this}},{key:"setLoopMaxIterations",value:function setLoopMaxIterations(max){this.loopMaxIterations=max;return this}},{key:"setConstants",value:function setConstants(constants){this.constants=constants;return this}},{key:"setWraparound",value:function setWraparound(flag){console.warn("Wraparound mode is not supported and undocumented.");this.wraparound=flag;return this}},{key:"setHardcodeConstants",value:function setHardcodeConstants(flag){this.hardcodeConstants=flag;return this}},{key:"setOutputToTexture",value:function setOutputToTexture(flag){this.outputToTexture=flag;return this}},{key:"setOutputImmutable",value:function setOutputImmutable(flag){this.outputImmutable=flag;return this}},{key:"setFloatTextures",value:function setFloatTextures(flag){this.floatTextures=flag;return this}},{key:"setFloatOutput",value:function setFloatOutput(flag){this.floatOutput=flag;return this}},{key:"setFloatOutputForce",value:function setFloatOutputForce(flag){this.floatOutputForce=flag;return this}},{key:"setCanvas",value:function setCanvas(canvas){this._canvas=canvas;return this}},{key:"setWebGl",value:function setWebGl(webGl){this._webGl=webGl;return this}},{key:"getCanvas",value:function getCanvas(){return this._canvas}},{key:"getWebGl",value:function getWebGl(){return this._webGl}},{key:"validateOptions",value:function validateOptions(){throw new Error("validateOptions not defined")}},{key:"exec",value:function exec(){return this.execute.apply(this,arguments)}},{key:"execute",value:function execute(){var _this=this;var args=arguments.length===1?[arguments[0]]:Array.apply(null,arguments);return utils.newPromise(function(accept,reject){try{accept(_this.run.apply(_this,args))}catch(e){reject(e)}})}},{key:"addSubKernel",value:function addSubKernel(fnString){if(this.subKernels===null){this.subKernels=[];this.subKernelNames=[]}this.subKernels.push(fnString);this.subKernelNames.push(utils.getFunctionNameFromString(fnString));return this}},{key:"addSubKernelProperty",value:function addSubKernelProperty(property,fnString){if(this.subKernelProperties===null){this.subKernelProperties={};this.subKernelNames=[]}if(this.subKernelProperties.hasOwnProperty(property)){throw new Error("cannot add sub kernel "+property+", already defined")}this.subKernelProperties[property]=fnString;this.subKernelNames.push(utils.getFunctionNameFromString(fnString));return this}},{key:"addNativeFunction",value:function addNativeFunction(name,source){this.functionBuilder.addNativeFunction(name,source)}}]);return BaseKernel}()},function(module,exports,__webpack_require__){"use strict";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function")}}var utils=__webpack_require__(1);var kernelRunShortcut=__webpack_require__(13);module.exports=function(){function BaseRunner(functionBuilder,settings){_classCallCheck(this,BaseRunner);settings=settings||{};this.kernel=settings.kernel;this.canvas=settings.canvas;this.webGl=settings.webGl;this.fn=null;this.functionBuilder=functionBuilder;this.fnString=null;this.endianness=utils.systemEndianness()}_createClass(BaseRunner,[{key:"textureToArray",value:function textureToArray(texture){var copy=this.createKernel(function(x){return x[this.thread.z][this.thread.y][this.thread.x]});return copy(texture)}},{key:"deleteTexture",value:function deleteTexture(texture){this.webGl.deleteTexture(texture.texture)}},{key:"buildPromiseKernel",value:function buildPromiseKernel(){throw new Error("not yet implemented")}},{key:"getMode",value:function getMode(){throw new Error('"mode" not implemented on BaseRunner')}},{key:"buildKernel",value:function buildKernel(fn,settings){settings=Object.assign({},settings||{});var fnString=fn.toString();if(!settings.functionBuilder){settings.functionBuilder=this.functionBuilder}if(!settings.canvas){settings.canvas=this.canvas}if(!settings.webGl){settings.webGl=this.webgl}return kernelRunShortcut(new this.Kernel(fnString,settings))}}]);return BaseRunner}()},function(module,exports,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function")}}module.exports=function Input(value,size){_classCallCheck(this,Input);this.value=value;if(Array.isArray(size)){this.size=[];for(var i=0;i<size.length;i++){this.size[i]=size[i]}while(this.size.length<3){this.size.push(1)}}else{if(size.z){this.size=[size.x,size.y,size.z]}else if(size.y){this.size=[size.x,size.y,1]}else{this.size=[size.x,1,1]}}}},function(module,exports,__webpack_require__){"use strict";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function")}}var UtilsCore=function(){function UtilsCore(){_classCallCheck(this,UtilsCore)}_createClass(UtilsCore,null,[{key:"isCanvas",value:function isCanvas(canvasObj){return canvasObj!==null&&canvasObj.nodeName&&canvasObj.getContext&&canvasObj.nodeName.toUpperCase()==="CANVAS"}},{key:"isCanvasSupported",value:function isCanvasSupported(){return _isCanvasSupported}},{key:"initCanvas",value:function initCanvas(){if(!_isCanvasSupported){return null}var canvas=document.createElement("canvas");canvas.width=2;canvas.height=2;return canvas}},{key:"isWebGl",value:function isWebGl(webGlObj){return webGlObj&&typeof webGlObj.getExtension==="function"}},{key:"isWebGlSupported",value:function isWebGlSupported(){return _isWebGlSupported}},{key:"isWebGlDrawBuffersSupported",value:function isWebGlDrawBuffersSupported(){return _isWebGlDrawBuffersSupported}},{key:"initWebGlDefaultOptions",value:function initWebGlDefaultOptions(){return{alpha:false,depth:false,antialias:false}}},{key:"initWebGl",value:function initWebGl(canvasObj){if(typeof _isCanvasSupported!=="undefined"||canvasObj===null){if(!_isCanvasSupported){return null}}if(!UtilsCore.isCanvas(canvasObj)){throw new Error("Invalid canvas object - "+canvasObj)}var webGl=canvasObj.getContext("experimental-webgl",UtilsCore.initWebGlDefaultOptions())||canvasObj.getContext("webgl",UtilsCore.initWebGlDefaultOptions());if(webGl){webGl.OES_texture_float=webGl.getExtension("OES_texture_float");webGl.OES_texture_float_linear=webGl.getExtension("OES_texture_float_linear");webGl.OES_element_index_uint=webGl.getExtension("OES_element_index_uint")}return webGl}},{key:"initWebGl2",value:function initWebGl2(canvasObj){if(typeof _isCanvasSupported!=="undefined"||canvasObj===null){if(!_isCanvasSupported){return null}}if(!UtilsCore.isCanvas(canvasObj)){throw new Error("Invalid canvas object - "+canvasObj)}return canvasObj.getContext("webgl2",UtilsCore.initWebGlDefaultOptions())}}]);return UtilsCore}();var _isCanvasSupported=typeof document!=="undefined"?UtilsCore.isCanvas(document.createElement("canvas")):false;var _testingWebGl=UtilsCore.initWebGl(UtilsCore.initCanvas());var _isWebGlSupported=UtilsCore.isWebGl(_testingWebGl);var _isWebGlDrawBuffersSupported=_isWebGlSupported&&Boolean(_testingWebGl.getExtension("WEBGL_draw_buffers"));if(_isWebGlSupported){UtilsCore.OES_texture_float=_testingWebGl.OES_texture_float;UtilsCore.OES_texture_float_linear=_testingWebGl.OES_texture_float_linear;UtilsCore.OES_element_index_uint=_testingWebGl.OES_element_index_uint}else{UtilsCore.OES_texture_float=false;UtilsCore.OES_texture_float_linear=false;UtilsCore.OES_element_index_uint=false}module.exports=UtilsCore},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.default=["linear","sqrt","cuberoot","log","loglog","sqrtlog"]},function(module,exports,__webpack_require__){"use strict";var emptyObject={};if(false){}module.exports=emptyObject},function(module,exports){var g;g=function(){return this}();try{g=g||Function("return this")()||(1,eval)("this")}catch(e){if(typeof window==="object")g=window}module.exports=g},function(module,exports,__webpack_require__){"use strict";
/*!
 * object.omit <https://github.com/jonschlinkert/object.omit>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */var isObject=__webpack_require__(58);module.exports=function omit(obj,props,fn){if(!isObject(obj))return{};if(typeof props==="function"){fn=props;props=[]}if(typeof props==="string"){props=[props]}var isFunction=typeof fn==="function";var keys=Object.keys(obj);var res={};for(var i=0;i<keys.length;i++){var key=keys[i];var val=obj[key];if(!props||props.indexOf(key)===-1&&(!isFunction||fn(val,key,obj))){res[key]=val}}return res}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);var react=__webpack_require__(0);var react_default=__webpack_require__.n(react);var prop_types=__webpack_require__(3);var prop_types_default=__webpack_require__.n(prop_types);var object_assign=__webpack_require__(6);var object_assign_default=__webpack_require__.n(object_assign);var object_omit=__webpack_require__(33);var object_omit_default=__webpack_require__.n(object_omit);var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function")}}var ElementRelativeCursorPosition=function(){function ElementRelativeCursorPosition(el){_classCallCheck(this,ElementRelativeCursorPosition);this.el=el}_createClass(ElementRelativeCursorPosition,[{key:"getDocumentRelativeElementOffset",value:function getDocumentRelativeElementOffset(el){var rootEl=this.getRootOfEl(el);var _rootEl$getBoundingCl=rootEl.getBoundingClientRect(),docLeft=_rootEl$getBoundingCl.left,docTop=_rootEl$getBoundingCl.top;var _el$getBoundingClient=el.getBoundingClientRect(),elLeft=_el$getBoundingClient.left,elTop=_el$getBoundingClient.top;return{x:Math.abs(docLeft)+elLeft,y:Math.abs(docTop)+elTop}}},{key:"getRootOfEl",value:function getRootOfEl(el){if(el.parentElement){return this.getRootOfEl(el.parentElement)}return el}},{key:"getComputedElementRelativeCursorPosition",value:function getComputedElementRelativeCursorPosition(event,documentRelativeElementOffset){var position=this.getDocumentRelativeCursorPosition(event);var cursorX=position.x,cursorY=position.y;var offsetX=documentRelativeElementOffset.x,offsetY=documentRelativeElementOffset.y;return{x:Math.round(cursorX-offsetX),y:Math.round(cursorY-offsetY)}}},{key:"getDocumentRelativeCursorPosition",value:function getDocumentRelativeCursorPosition(event){return{x:event.pageX,y:event.pageY}}},{key:"getCursorPosition",value:function getCursorPosition(event){return this.getComputedElementRelativeCursorPosition(event,this.documentRelativeElementOffset)}},{key:"documentRelativeElementOffset",get:function get(){if(!this.elementOffset){this.elementOffset=this.getDocumentRelativeElementOffset(this.el)}return this.elementOffset}}]);return ElementRelativeCursorPosition}();var lib_ElementRelativeCursorPosition=ElementRelativeCursorPosition;function addEventListener(node,eventName,handler,options){node.addEventListener(eventName,handler,options);return{removeEventListener:function removeEventListener(){node.removeEventListener(eventName,handler,options)}}}var PRESS_EVENT_TIMER_NAME="pressEvent";var MOUSE_EMULATION_GUARD_TIMER_NAME="mouseEmulation";var SET_ACTIVATION_TIMER_NAME="setHovering";var UNSET_ACTIVATION_TIMER_NAME="unsetHovering";var noop=function(){};var ReactCursorPosition_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function ReactCursorPosition_classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function")}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return call&&(typeof call==="object"||typeof call==="function")?call:self}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass)}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass}var ReactCursorPosition_class=function(_React$Component){_inherits(_class,_React$Component);function _class(props){ReactCursorPosition_classCallCheck(this,_class);var _this=_possibleConstructorReturn(this,(_class.__proto__||Object.getPrototypeOf(_class)).call(this,props));_initialiseProps.call(_this);_this.state={detectedEnvironment:{isMouseDetected:false,isTouchDetected:false},elementDimensions:{width:0,height:0},isActive:false,isPositionOutside:true,position:{x:0,y:0}};_this.shouldGuardAgainstMouseEmulationByDevices=false;_this.eventListeners=[];_this.timers=[];_this.elementOffset={x:0,y:0};_this.onTouchStart=_this.onTouchStart.bind(_this);_this.onTouchMove=_this.onTouchMove.bind(_this);_this.onTouchEnd=_this.onTouchEnd.bind(_this);_this.onTouchCancel=_this.onTouchCancel.bind(_this);_this.onMouseEnter=_this.onMouseEnter.bind(_this);_this.onMouseMove=_this.onMouseMove.bind(_this);_this.onMouseLeave=_this.onMouseLeave.bind(_this);return _this}ReactCursorPosition_createClass(_class,[{key:"onTouchStart",value:function onTouchStart(e){this.init();this.onTouchDetected();this.setShouldGuardAgainstMouseEmulationByDevices();var position=this.core.getCursorPosition(this.getTouchEvent(e));this.setPositionState(position);if(this.props.isActivatedOnTouch){e.preventDefault();this.activate();return}this.initPressEventCriteria(position);this.setPressEventTimer()}},{key:"onTouchMove",value:function onTouchMove(e){var position=this.core.getCursorPosition(this.getTouchEvent(e));if(!this.state.isActive){this.setPressEventCriteria(position);return}this.setPositionState(position);e.preventDefault();if(this.props.shouldStopTouchMovePropagation){e.stopPropagation()}}},{key:"onTouchEnd",value:function onTouchEnd(){this.deactivate();this.unsetShouldGuardAgainstMouseEmulationByDevices()}},{key:"onTouchCancel",value:function onTouchCancel(){this.deactivate();this.unsetShouldGuardAgainstMouseEmulationByDevices()}},{key:"onMouseEnter",value:function onMouseEnter(e){if(this.shouldGuardAgainstMouseEmulationByDevices){return}this.init();this.onMouseDetected();this.setPositionState(this.core.getCursorPosition(e));this.clearActivationTimers();this.schedulActivation(this.props.hoverDelayInMs)}},{key:"onMouseMove",value:function onMouseMove(e){this.setPositionState(this.core.getCursorPosition(e))}},{key:"onMouseLeave",value:function onMouseLeave(){this.clearActivationTimers();this.scheduleDeactivation(this.props.hoverOffDelayInMs);this.setState({isPositionOutside:true})}},{key:"onTouchDetected",value:function onTouchDetected(){var environment={isTouchDetected:true,isMouseDetected:false};this.setState({detectedEnvironment:environment});this.props.onDetectedEnvironmentChanged(environment)}},{key:"onMouseDetected",value:function onMouseDetected(){var environment={isTouchDetected:false,isMouseDetected:true};this.setState({detectedEnvironment:environment});this.props.onDetectedEnvironmentChanged(environment)}},{key:"componentDidMount",value:function componentDidMount(){if(this.props.isEnabled){this.enable()}}},{key:"componentWillReceiveProps",value:function componentWillReceiveProps(_ref){var willBeEnabled=_ref.isEnabled;var isEnabled=this.props.isEnabled;var isEnabledWillChange=isEnabled!==willBeEnabled;if(!isEnabledWillChange){return}if(willBeEnabled){this.enable()}else{this.disable()}}},{key:"componentWillUnmount",value:function componentWillUnmount(){this.clearTimers();this.disable()}},{key:"enable",value:function enable(){this.addEventListeners()}},{key:"disable",value:function disable(){this.removeEventListeners()}},{key:"init",value:function init(){this.core=new lib_ElementRelativeCursorPosition(this.el);this.setElementDimensionsState(this.getElementDimensions(this.el))}},{key:"activate",value:function activate(){this.setState({isActive:true});this.props.onActivationChanged({isActive:true})}},{key:"deactivate",value:function deactivate(){var _this2=this;this.clearTimer(PRESS_EVENT_TIMER_NAME);this.setState({isActive:false},function(){var _state=_this2.state,isPositionOutside=_state.isPositionOutside,position=_state.position;_this2.props.onPositionChanged({isPositionOutside:isPositionOutside,position:position});_this2.props.onActivationChanged({isActive:false})})}},{key:"setPositionState",value:function setPositionState(position){var isPositionOutside=this.getIsPositionOutside(position);this.setState({isPositionOutside:isPositionOutside,position:position},this.onPositionChanged)}},{key:"setElementDimensionsState",value:function setElementDimensionsState(dimensions){this.setState({elementDimensions:dimensions})}},{key:"schedulActivation",value:function schedulActivation(schedule){var _this3=this;var scheduleId=setTimeout(function(){_this3.activate()},schedule);this.timers.push({id:scheduleId,name:SET_ACTIVATION_TIMER_NAME})}},{key:"scheduleDeactivation",value:function scheduleDeactivation(schedule){var _this4=this;var scheduleId=setTimeout(function(){_this4.deactivate()},schedule);this.timers.push({id:scheduleId,name:UNSET_ACTIVATION_TIMER_NAME})}},{key:"clearActivationTimers",value:function clearActivationTimers(){this.clearTimer(SET_ACTIVATION_TIMER_NAME);this.clearTimer(UNSET_ACTIVATION_TIMER_NAME)}},{key:"setPressEventTimer",value:function setPressEventTimer(){var _this5=this;var _props=this.props,pressDuration=_props.pressDuration,pressMoveThreshold=_props.pressMoveThreshold;this.timers.push({name:PRESS_EVENT_TIMER_NAME,id:setTimeout(function(){if(Math.abs(_this5.currentElTop-_this5.initialElTop)<pressMoveThreshold){_this5.activate()}},pressDuration)})}},{key:"setPressEventCriteria",value:function setPressEventCriteria(position){this.currentElTop=position.y}},{key:"initPressEventCriteria",value:function initPressEventCriteria(position){var top=position.y;this.initialElTop=top;this.currentElTop=top}},{key:"setShouldGuardAgainstMouseEmulationByDevices",value:function setShouldGuardAgainstMouseEmulationByDevices(){this.shouldGuardAgainstMouseEmulationByDevices=true}},{key:"unsetShouldGuardAgainstMouseEmulationByDevices",value:function unsetShouldGuardAgainstMouseEmulationByDevices(){var _this6=this;this.timers.push({name:MOUSE_EMULATION_GUARD_TIMER_NAME,id:setTimeout(function(){_this6.shouldGuardAgainstMouseEmulationByDevices=false},0)})}},{key:"clearTimers",value:function clearTimers(){var timers=this.timers;while(timers.length){var timer=timers.pop();clearTimeout(timer.id)}}},{key:"clearTimer",value:function clearTimer(timerName){this.timers.forEach(function(timer){if(timer.name===timerName){clearTimeout(timer.id)}})}},{key:"getElementDimensions",value:function getElementDimensions(el){var _el$getBoundingClient=el.getBoundingClientRect(),width=_el$getBoundingClient.width,height=_el$getBoundingClient.height;return{width:width,height:height}}},{key:"getIsPositionOutside",value:function getIsPositionOutside(position){var x=position.x,y=position.y;var _state$elementDimensi=this.state.elementDimensions,width=_state$elementDimensi.width,height=_state$elementDimensi.height;var isPositionOutside=x<0||y<0||x>width||y>height;return isPositionOutside}},{key:"getTouchEvent",value:function getTouchEvent(e){return e.touches[0]}},{key:"isReactComponent",value:function isReactComponent(reactElement){return typeof reactElement.type==="function"}},{key:"shouldDecorateChild",value:function shouldDecorateChild(child){return!!child&&this.isReactComponent(child)&&this.props.shouldDecorateChildren}},{key:"decorateChild",value:function decorateChild(child,props){return Object(react["cloneElement"])(child,props)}},{key:"decorateChildren",value:function decorateChildren(children,props){var _this7=this;return react["Children"].map(children,function(child){return _this7.shouldDecorateChild(child)?_this7.decorateChild(child,props):child})}},{key:"addEventListeners",value:function addEventListeners(){this.eventListeners.push(addEventListener(this.el,"touchstart",this.onTouchStart,{passive:false}),addEventListener(this.el,"touchmove",this.onTouchMove,{passive:false}),addEventListener(this.el,"touchend",this.onTouchEnd),addEventListener(this.el,"touchcancel",this.onTouchCancel),addEventListener(this.el,"mouseenter",this.onMouseEnter),addEventListener(this.el,"mousemove",this.onMouseMove),addEventListener(this.el,"mouseleave",this.onMouseLeave))}},{key:"removeEventListeners",value:function removeEventListeners(){while(this.eventListeners.length){this.eventListeners.pop().removeEventListener()}}},{key:"getPassThroughProps",value:function getPassThroughProps(){var ownPropNames=Object.keys(this.constructor.propTypes);return object_omit_default()(this.props,ownPropNames)}},{key:"render",value:function render(){var _this8=this;var _props2=this.props,children=_props2.children,className=_props2.className,mapChildProps=_props2.mapChildProps,style=_props2.style;var props=object_assign_default()({},mapChildProps(this.state),this.getPassThroughProps());return react_default.a.createElement("div",{className:className,ref:function ref(el){return _this8.el=el},style:object_assign_default()({},style,{WebkitUserSelect:"none"})},this.decorateChildren(children,props))}}]);return _class}(react_default.a.Component);ReactCursorPosition_class.displayName="ReactCursorPosition";ReactCursorPosition_class.propTypes={children:prop_types_default.a.any,className:prop_types_default.a.string,hoverDelayInMs:prop_types_default.a.number,hoverOffDelayInMs:prop_types_default.a.number,isActivatedOnTouch:prop_types_default.a.bool,isEnabled:prop_types_default.a.bool,mapChildProps:prop_types_default.a.func,onActivationChanged:prop_types_default.a.func,onPositionChanged:prop_types_default.a.func,onDetectedEnvironmentChanged:prop_types_default.a.func,pressDuration:prop_types_default.a.number,pressMoveThreshold:prop_types_default.a.number,shouldDecorateChildren:prop_types_default.a.bool,shouldStopTouchMovePropagation:prop_types_default.a.bool,style:prop_types_default.a.object};ReactCursorPosition_class.defaultProps={isActivatedOnTouch:false,isEnabled:true,hoverDelayInMs:0,hoverOffDelayInMs:0,mapChildProps:function mapChildProps(props){return props},onActivationChanged:noop,onPositionChanged:noop,onDetectedEnvironmentChanged:noop,pressDuration:500,pressMoveThreshold:5,shouldDecorateChildren:true,shouldStopTouchMovePropagation:false};var _initialiseProps=function _initialiseProps(){var _this9=this;this.onPositionChanged=function(){var onPositionChanged=_this9.props.onPositionChanged;onPositionChanged(_this9.state)}};var ReactCursorPosition=__webpack_exports__["default"]=ReactCursorPosition_class},function(module,exports,__webpack_require__){"use strict";var utils=__webpack_require__(1);module.exports=function alias(name,fn){var fnString=fn.toString();return new Function("return function "+name+" ("+utils.getParamNamesFromString(fnString).join(", ")+") {"+utils.getFunctionBodyFromString(fnString)+"}")()}},function(module,exports,__webpack_require__){"use strict";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function")}}var UtilsCore=__webpack_require__(29);module.exports=function(){function GPUCore(){_classCallCheck(this,GPUCore)}_createClass(GPUCore,null,[{key:"validateKernelObj",value:function validateKernelObj(kernelObj){if(kernelObj===null){throw"KernelObj being validated is NULL"}if(typeof kernelObj==="string"){try{kernelObj=JSON.parse(kernelObj)}catch(e){console.error(e);throw"Failed to convert KernelObj from JSON string"}if(kernelObj===null){throw"Invalid (NULL) KernelObj JSON string representation"}}if(kernelObj.isKernelObj!==true){throw"Failed missing isKernelObj flag check"}return kernelObj}},{key:"loadKernelObj",value:function loadKernelObj(kernelObj,inOpt){kernelObj=validateKernelObj(kernelObj)}}]);return GPUCore}()},function(module,exports,__webpack_require__){"use strict";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function")}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return call&&(typeof call==="object"||typeof call==="function")?call:self}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass)}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass}var WebGLKernel=__webpack_require__(10);var utils=__webpack_require__(1);module.exports=function(_WebGLKernel){_inherits(WebGL2ValidatorKernel,_WebGLKernel);function WebGL2ValidatorKernel(){_classCallCheck(this,WebGL2ValidatorKernel);return _possibleConstructorReturn(this,(WebGL2ValidatorKernel.__proto__||Object.getPrototypeOf(WebGL2ValidatorKernel)).apply(this,arguments))}_createClass(WebGL2ValidatorKernel,[{key:"validateOptions",value:function validateOptions(){this._webGl.getExtension("EXT_color_buffer_float");this.texSize=utils.dimToTexSize({floatTextures:this.floatTextures,floatOutput:this.floatOutput},this.output,true)}}]);return WebGL2ValidatorKernel}(WebGLKernel)},function(module,exports,__webpack_require__){"use strict";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function")}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return call&&(typeof call==="object"||typeof call==="function")?call:self}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass)}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass}var WebGLKernel=__webpack_require__(7);var utils=__webpack_require__(1);module.exports=function(_WebGLKernel){_inherits(WebGLValidatorKernel,_WebGLKernel);function WebGLValidatorKernel(){_classCallCheck(this,WebGLValidatorKernel);return _possibleConstructorReturn(this,(WebGLValidatorKernel.__proto__||Object.getPrototypeOf(WebGLValidatorKernel)).apply(this,arguments))}_createClass(WebGLValidatorKernel,[{key:"validateOptions",value:function validateOptions(){this.texSize=utils.dimToTexSize({floatTextures:this.floatTextures,floatOutput:this.floatOutput},this.output,true)}}]);return WebGLValidatorKernel}(WebGLKernel)},function(module,exports,__webpack_require__){"use strict";var utils=__webpack_require__(1);var kernelRunShortcut=__webpack_require__(13);function removeFnNoise(fn){if(/^function /.test(fn)){fn=fn.substring(9)}return fn.replace(/[_]typeof/g,"typeof")}function removeNoise(str){return str.replace(/[_]typeof/g,"typeof")}module.exports=function(cpuKernel,name){return"() => {\n    "+kernelRunShortcut.toString()+";\n    const utils = {\n      allPropertiesOf: "+removeNoise(utils.allPropertiesOf.toString())+",\n      clone: "+removeNoise(utils.clone.toString())+"\n    };\n    const Utils = utils;\n    class "+(name||"Kernel")+" {\n      constructor() {        \n        this.argumentsLength = 0;\n        this._canvas = null;\n        this._webGl = null;\n        this.built = false;\n        this.program = null;\n        this.paramNames = "+JSON.stringify(cpuKernel.paramNames)+";\n        this.paramTypes = "+JSON.stringify(cpuKernel.paramTypes)+";\n        this.texSize = "+JSON.stringify(cpuKernel.texSize)+";\n        this.output = "+JSON.stringify(cpuKernel.output)+";\n        this._kernelString = `"+cpuKernel._kernelString+"`;\n        this.output = "+JSON.stringify(cpuKernel.output)+";\n\t\t    this.run = function() {\n          this.run = null;\n          this.build();\n          return this.run.apply(this, arguments);\n        }.bind(this);\n        this.thread = {\n          x: 0,\n          y: 0,\n          z: 0\n        };\n      }\n      setCanvas(canvas) { this._canvas = canvas; return this; }\n      setWebGl(webGl) { this._webGl = webGl; return this; }\n      "+removeFnNoise(cpuKernel.build.toString())+"\n      "+removeFnNoise(cpuKernel.setupParams.toString())+"\n      run () { "+cpuKernel.kernelString+" }\n      getKernelString() { return this._kernelString; }\n    };\n    return kernelRunShortcut(new Kernel());\n  };"}},function(module,exports,__webpack_require__){"use strict";module.exports="#version 300 es\nprecision highp float;\nprecision highp int;\nprecision highp sampler2D;\n\nin highp vec2 aPos;\nin highp vec2 aTexCoord;\n\nout highp vec2 vTexCoord;\nuniform vec2 ratio;\n\nvoid main(void) {\n  gl_Position = vec4((aPos + vec2(1)) * ratio + vec2(-1), 0, 1);\n  vTexCoord = aTexCoord;\n}"},function(module,exports,__webpack_require__){"use strict";module.exports="#version 300 es\n__HEADER__;\nprecision highp float;\nprecision highp int;\nprecision highp sampler2D;\n\nconst float LOOP_MAX = __LOOP_MAX__;\n#define EPSILON 0.0000001;\n\n__CONSTANTS__;\n\nin highp vec2 vTexCoord;\n\nvec2 integerMod(vec2 x, float y) {\n  vec2 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec3 integerMod(vec3 x, float y) {\n  vec3 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec4 integerMod(vec4 x, vec4 y) {\n  vec4 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nhighp float integerMod(highp float x, highp float y) {\n  highp float res = floor(mod(x, y));\n  return res * (res > floor(y) - 1.0 ? 0.0 : 1.0);\n}\n\nhighp int integerMod(highp int x, highp int y) {\n  return int(integerMod(float(x), float(y)));\n}\n\n// Here be dragons!\n// DO NOT OPTIMIZE THIS CODE\n// YOU WILL BREAK SOMETHING ON SOMEBODY'S MACHINE\n// LEAVE IT AS IT IS, LEST YOU WASTE YOUR OWN TIME\nconst vec2 MAGIC_VEC = vec2(1.0, -256.0);\nconst vec4 SCALE_FACTOR = vec4(1.0, 256.0, 65536.0, 0.0);\nconst vec4 SCALE_FACTOR_INV = vec4(1.0, 0.00390625, 0.0000152587890625, 0.0); // 1, 1/256, 1/65536\nhighp float decode32(highp vec4 rgba) {\n  __DECODE32_ENDIANNESS__;\n  rgba *= 255.0;\n  vec2 gte128;\n  gte128.x = rgba.b >= 128.0 ? 1.0 : 0.0;\n  gte128.y = rgba.a >= 128.0 ? 1.0 : 0.0;\n  float exponent = 2.0 * rgba.a - 127.0 + dot(gte128, MAGIC_VEC);\n  float res = exp2(round(exponent));\n  rgba.b = rgba.b - 128.0 * gte128.x;\n  res = dot(rgba, SCALE_FACTOR) * exp2(round(exponent-23.0)) + res;\n  res *= gte128.y * -2.0 + 1.0;\n  return res;\n}\n\nhighp vec4 encode32(highp float f) {\n  highp float F = abs(f);\n  highp float sign = f < 0.0 ? 1.0 : 0.0;\n  highp float exponent = floor(log2(F));\n  highp float mantissa = (exp2(-exponent) * F);\n  // exponent += floor(log2(mantissa));\n  vec4 rgba = vec4(F * exp2(23.0-exponent)) * SCALE_FACTOR_INV;\n  rgba.rg = integerMod(rgba.rg, 256.0);\n  rgba.b = integerMod(rgba.b, 128.0);\n  rgba.a = exponent*0.5 + 63.5;\n  rgba.ba += vec2(integerMod(exponent+127.0, 2.0), sign) * 128.0;\n  rgba = floor(rgba);\n  rgba *= 0.003921569; // 1/255\n  __ENCODE32_ENDIANNESS__;\n  return rgba;\n}\n// Dragons end here\n\nhighp float index;\nhighp vec3 threadId;\n\nhighp vec3 indexTo3D(highp float idx, highp vec3 texDim) {\n  highp float z = floor(idx / (texDim.x * texDim.y));\n  idx -= z * texDim.x * texDim.y;\n  highp float y = floor(idx / texDim.x);\n  highp float x = integerMod(idx, texDim.x);\n  return vec3(x, y, z);\n}\n\nhighp float get(highp sampler2D tex, highp vec2 texSize, highp vec3 texDim, highp float z, highp float y, highp float x) {\n  highp vec3 xyz = vec3(x, y, z);\n  xyz = floor(xyz + 0.5);\n  __GET_WRAPAROUND__;\n  highp float index = round(xyz.x + texDim.x * (xyz.y + texDim.y * xyz.z));\n  __GET_TEXTURE_CHANNEL__;\n  highp float w = round(texSize.x);\n  vec2 st = vec2(integerMod(index, w), float(int(index) / int(w))) + 0.5;\n  __GET_TEXTURE_INDEX__;\n  highp vec4 texel = texture(tex, st / texSize);\n  __GET_RESULT__;\n}\n\nhighp float get(highp sampler2D tex, highp vec2 texSize, highp vec3 texDim, highp float y, highp float x) {\n  return get(tex, texSize, texDim, 0.0, y, x);\n}\n\nhighp float get(highp sampler2D tex, highp vec2 texSize, highp vec3 texDim, highp float x) {\n  return get(tex, texSize, texDim, 0.0, 0.0, x);\n}\n\nhighp vec4 actualColor;\nvoid color(float r, float g, float b, float a) {\n  actualColor = vec4(r,g,b,a);\n}\n\nvoid color(float r, float g, float b) {\n  color(r,g,b,1.0);\n}\n\n__MAIN_PARAMS__;\n__MAIN_CONSTANTS__;\n__KERNEL__;\n\nvoid main(void) {\n  index = floor(vTexCoord.s * float(uTexSize.x)) + floor(vTexCoord.t * float(uTexSize.y)) * uTexSize.x;\n  __MAIN_RESULT__;\n}"},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__.d(__webpack_exports__,"version",function(){return version});__webpack_require__.d(__webpack_exports__,"parse",function(){return parse});__webpack_require__.d(__webpack_exports__,"parseExpressionAt",function(){return parseExpressionAt});__webpack_require__.d(__webpack_exports__,"tokenizer",function(){return tokenizer});__webpack_require__.d(__webpack_exports__,"parse_dammit",function(){return parse_dammit});__webpack_require__.d(__webpack_exports__,"LooseParser",function(){return LooseParser});__webpack_require__.d(__webpack_exports__,"pluginsLoose",function(){return pluginsLoose});__webpack_require__.d(__webpack_exports__,"addLooseExports",function(){return addLooseExports});__webpack_require__.d(__webpack_exports__,"Parser",function(){return Parser});__webpack_require__.d(__webpack_exports__,"plugins",function(){return plugins});__webpack_require__.d(__webpack_exports__,"defaultOptions",function(){return defaultOptions});__webpack_require__.d(__webpack_exports__,"Position",function(){return Position});__webpack_require__.d(__webpack_exports__,"SourceLocation",function(){return SourceLocation});__webpack_require__.d(__webpack_exports__,"getLineInfo",function(){return getLineInfo});__webpack_require__.d(__webpack_exports__,"Node",function(){return Node});__webpack_require__.d(__webpack_exports__,"TokenType",function(){return TokenType});__webpack_require__.d(__webpack_exports__,"tokTypes",function(){return types});__webpack_require__.d(__webpack_exports__,"keywordTypes",function(){return keywords$1});__webpack_require__.d(__webpack_exports__,"TokContext",function(){return TokContext});__webpack_require__.d(__webpack_exports__,"tokContexts",function(){return types$1});__webpack_require__.d(__webpack_exports__,"isIdentifierChar",function(){return isIdentifierChar});__webpack_require__.d(__webpack_exports__,"isIdentifierStart",function(){return isIdentifierStart});__webpack_require__.d(__webpack_exports__,"Token",function(){return Token});__webpack_require__.d(__webpack_exports__,"isNewLine",function(){return isNewLine});__webpack_require__.d(__webpack_exports__,"lineBreak",function(){return lineBreak});__webpack_require__.d(__webpack_exports__,"lineBreakG",function(){return lineBreakG});__webpack_require__.d(__webpack_exports__,"nonASCIIwhitespace",function(){return nonASCIIwhitespace});var reservedWords={3:"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",5:"class enum extends super const export import",6:"enum",strict:"implements interface let package private protected public static yield",strictBind:"eval arguments"};var ecma5AndLessKeywords="break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this";var keywords={5:ecma5AndLessKeywords,6:ecma5AndLessKeywords+" const class extends export import super"};var keywordRelationalOperator=/^in(stanceof)?$/;var nonASCIIidentifierStartChars="ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࢠ-ࢴࢶ-ࢽऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲈᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄮㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿪ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞮꞰ-ꞷꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭥꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ";var nonASCIIidentifierChars="‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛ࣔ-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఃా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ංඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ູົຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠐-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭ᳲ-᳴᳷-᳹᷀-᷹᷻-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱꤀-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿";var nonASCIIidentifierStart=new RegExp("["+nonASCIIidentifierStartChars+"]");var nonASCIIidentifier=new RegExp("["+nonASCIIidentifierStartChars+nonASCIIidentifierChars+"]");nonASCIIidentifierStartChars=nonASCIIidentifierChars=null;var astralIdentifierStartCodes=[0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,26,45,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,785,52,76,44,33,24,27,35,42,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,54,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,86,25,391,63,32,0,257,0,11,39,8,0,22,0,12,39,3,3,55,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,698,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,881,68,12,0,67,12,65,1,31,6124,20,754,9486,286,82,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,4149,196,60,67,1213,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42710,42,4148,12,221,3,5761,15,7472,3104,541];var astralIdentifierCodes=[509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,1306,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,52,0,13,2,49,13,10,2,4,9,83,11,7,0,161,11,6,9,7,3,57,0,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,87,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,423,9,280,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,19719,9,135,4,60,6,26,9,1016,45,17,3,19723,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,2214,6,110,6,6,9,792487,239];function isInAstralSet(code,set){var pos=65536;for(var i=0;i<set.length;i+=2){pos+=set[i];if(pos>code){return false}pos+=set[i+1];if(pos>=code){return true}}}function isIdentifierStart(code,astral){if(code<65){return code===36}if(code<91){return true}if(code<97){return code===95}if(code<123){return true}if(code<=65535){return code>=170&&nonASCIIidentifierStart.test(String.fromCharCode(code))}if(astral===false){return false}return isInAstralSet(code,astralIdentifierStartCodes)}function isIdentifierChar(code,astral){if(code<48){return code===36}if(code<58){return true}if(code<65){return false}if(code<91){return true}if(code<97){return code===95}if(code<123){return true}if(code<=65535){return code>=170&&nonASCIIidentifier.test(String.fromCharCode(code))}if(astral===false){return false}return isInAstralSet(code,astralIdentifierStartCodes)||isInAstralSet(code,astralIdentifierCodes)}var TokenType=function TokenType(label,conf){if(conf===void 0)conf={};this.label=label;this.keyword=conf.keyword;this.beforeExpr=!!conf.beforeExpr;this.startsExpr=!!conf.startsExpr;this.isLoop=!!conf.isLoop;this.isAssign=!!conf.isAssign;this.prefix=!!conf.prefix;this.postfix=!!conf.postfix;this.binop=conf.binop||null;this.updateContext=null};function binop(name,prec){return new TokenType(name,{beforeExpr:true,binop:prec})}var beforeExpr={beforeExpr:true};var startsExpr={startsExpr:true};var keywords$1={};function kw(name,options){if(options===void 0)options={};options.keyword=name;return keywords$1[name]=new TokenType(name,options)}var types={num:new TokenType("num",startsExpr),regexp:new TokenType("regexp",startsExpr),string:new TokenType("string",startsExpr),name:new TokenType("name",startsExpr),eof:new TokenType("eof"),bracketL:new TokenType("[",{beforeExpr:true,startsExpr:true}),bracketR:new TokenType("]"),braceL:new TokenType("{",{beforeExpr:true,startsExpr:true}),braceR:new TokenType("}"),parenL:new TokenType("(",{beforeExpr:true,startsExpr:true}),parenR:new TokenType(")"),comma:new TokenType(",",beforeExpr),semi:new TokenType(";",beforeExpr),colon:new TokenType(":",beforeExpr),dot:new TokenType("."),question:new TokenType("?",beforeExpr),arrow:new TokenType("=>",beforeExpr),template:new TokenType("template"),invalidTemplate:new TokenType("invalidTemplate"),ellipsis:new TokenType("...",beforeExpr),backQuote:new TokenType("`",startsExpr),dollarBraceL:new TokenType("${",{beforeExpr:true,startsExpr:true}),eq:new TokenType("=",{beforeExpr:true,isAssign:true}),assign:new TokenType("_=",{beforeExpr:true,isAssign:true}),incDec:new TokenType("++/--",{prefix:true,postfix:true,startsExpr:true}),prefix:new TokenType("!/~",{beforeExpr:true,prefix:true,startsExpr:true}),logicalOR:binop("||",1),logicalAND:binop("&&",2),bitwiseOR:binop("|",3),bitwiseXOR:binop("^",4),bitwiseAND:binop("&",5),equality:binop("==/!=/===/!==",6),relational:binop("</>/<=/>=",7),bitShift:binop("<</>>/>>>",8),plusMin:new TokenType("+/-",{beforeExpr:true,binop:9,prefix:true,startsExpr:true}),modulo:binop("%",10),star:binop("*",10),slash:binop("/",10),starstar:new TokenType("**",{beforeExpr:true}),_break:kw("break"),_case:kw("case",beforeExpr),_catch:kw("catch"),_continue:kw("continue"),_debugger:kw("debugger"),_default:kw("default",beforeExpr),_do:kw("do",{isLoop:true,beforeExpr:true}),_else:kw("else",beforeExpr),_finally:kw("finally"),_for:kw("for",{isLoop:true}),_function:kw("function",startsExpr),_if:kw("if"),_return:kw("return",beforeExpr),_switch:kw("switch"),_throw:kw("throw",beforeExpr),_try:kw("try"),_var:kw("var"),_const:kw("const"),_while:kw("while",{isLoop:true}),_with:kw("with"),_new:kw("new",{beforeExpr:true,startsExpr:true}),_this:kw("this",startsExpr),_super:kw("super",startsExpr),_class:kw("class",startsExpr),_extends:kw("extends",beforeExpr),_export:kw("export"),_import:kw("import"),_null:kw("null",startsExpr),_true:kw("true",startsExpr),_false:kw("false",startsExpr),_in:kw("in",{beforeExpr:true,binop:7}),_instanceof:kw("instanceof",{beforeExpr:true,binop:7}),_typeof:kw("typeof",{beforeExpr:true,prefix:true,startsExpr:true}),_void:kw("void",{beforeExpr:true,prefix:true,startsExpr:true}),_delete:kw("delete",{beforeExpr:true,prefix:true,startsExpr:true})};var lineBreak=/\r\n?|\n|\u2028|\u2029/;var lineBreakG=new RegExp(lineBreak.source,"g");function isNewLine(code){return code===10||code===13||code===8232||code===8233}var nonASCIIwhitespace=/[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/;var skipWhiteSpace=/(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;var ref=Object.prototype;var hasOwnProperty=ref.hasOwnProperty;var toString=ref.toString;function has(obj,propName){return hasOwnProperty.call(obj,propName)}var isArray=Array.isArray||function(obj){return toString.call(obj)==="[object Array]"};var Position=function Position(line,col){this.line=line;this.column=col};Position.prototype.offset=function offset(n){return new Position(this.line,this.column+n)};var SourceLocation=function SourceLocation(p,start,end){this.start=start;this.end=end;if(p.sourceFile!==null){this.source=p.sourceFile}};function getLineInfo(input,offset){for(var line=1,cur=0;;){lineBreakG.lastIndex=cur;var match=lineBreakG.exec(input);if(match&&match.index<offset){++line;cur=match.index+match[0].length}else{return new Position(line,offset-cur)}}}var defaultOptions={ecmaVersion:7,sourceType:"script",onInsertedSemicolon:null,onTrailingComma:null,allowReserved:null,allowReturnOutsideFunction:false,allowImportExportEverywhere:false,allowHashBang:false,locations:false,onToken:null,onComment:null,ranges:false,program:null,sourceFile:null,directSourceFile:null,preserveParens:false,plugins:{}};function getOptions(opts){var options={};for(var opt in defaultOptions){options[opt]=opts&&has(opts,opt)?opts[opt]:defaultOptions[opt]}if(options.ecmaVersion>=2015){options.ecmaVersion-=2009}if(options.allowReserved==null){options.allowReserved=options.ecmaVersion<5}if(isArray(options.onToken)){var tokens=options.onToken;options.onToken=function(token){return tokens.push(token)}}if(isArray(options.onComment)){options.onComment=pushComment(options,options.onComment)}return options}function pushComment(options,array){return function(block,text,start,end,startLoc,endLoc){var comment={type:block?"Block":"Line",value:text,start:start,end:end};if(options.locations){comment.loc=new SourceLocation(this,startLoc,endLoc)}if(options.ranges){comment.range=[start,end]}array.push(comment)}}var plugins={};function keywordRegexp(words){return new RegExp("^(?:"+words.replace(/ /g,"|")+")$")}var Parser=function Parser(options,input,startPos){this.options=options=getOptions(options);this.sourceFile=options.sourceFile;this.keywords=keywordRegexp(keywords[options.ecmaVersion>=6?6:5]);var reserved="";if(!options.allowReserved){for(var v=options.ecmaVersion;;v--){if(reserved=reservedWords[v]){break}}if(options.sourceType=="module"){reserved+=" await"}}this.reservedWords=keywordRegexp(reserved);var reservedStrict=(reserved?reserved+" ":"")+reservedWords.strict;this.reservedWordsStrict=keywordRegexp(reservedStrict);this.reservedWordsStrictBind=keywordRegexp(reservedStrict+" "+reservedWords.strictBind);this.input=String(input);this.containsEsc=false;this.loadPlugins(options.plugins);if(startPos){this.pos=startPos;this.lineStart=this.input.lastIndexOf("\n",startPos-1)+1;this.curLine=this.input.slice(0,this.lineStart).split(lineBreak).length}else{this.pos=this.lineStart=0;this.curLine=1}this.type=types.eof;this.value=null;this.start=this.end=this.pos;this.startLoc=this.endLoc=this.curPosition();this.lastTokEndLoc=this.lastTokStartLoc=null;this.lastTokStart=this.lastTokEnd=this.pos;this.context=this.initialContext();this.exprAllowed=true;this.inModule=options.sourceType==="module";this.strict=this.inModule||this.strictDirective(this.pos);this.potentialArrowAt=-1;this.inFunction=this.inGenerator=this.inAsync=false;this.yieldPos=this.awaitPos=0;this.labels=[];if(this.pos===0&&options.allowHashBang&&this.input.slice(0,2)==="#!"){this.skipLineComment(2)}this.scopeStack=[];this.enterFunctionScope();this.regexpState=null};Parser.prototype.isKeyword=function isKeyword(word){return this.keywords.test(word)};Parser.prototype.isReservedWord=function isReservedWord(word){return this.reservedWords.test(word)};Parser.prototype.extend=function extend(name,f){this[name]=f(this[name])};Parser.prototype.loadPlugins=function loadPlugins(pluginConfigs){var this$1=this;for(var name in pluginConfigs){var plugin=plugins[name];if(!plugin){throw new Error("Plugin '"+name+"' not found")}plugin(this$1,pluginConfigs[name])}};Parser.prototype.parse=function parse(){var node=this.options.program||this.startNode();this.nextToken();return this.parseTopLevel(node)};var pp=Parser.prototype;var literal=/^(?:'((?:\\.|[^'])*?)'|"((?:\\.|[^"])*?)"|;)/;pp.strictDirective=function(start){var this$1=this;for(;;){skipWhiteSpace.lastIndex=start;start+=skipWhiteSpace.exec(this$1.input)[0].length;var match=literal.exec(this$1.input.slice(start));if(!match){return false}if((match[1]||match[2])=="use strict"){return true}start+=match[0].length}};pp.eat=function(type){if(this.type===type){this.next();return true}else{return false}};pp.isContextual=function(name){return this.type===types.name&&this.value===name&&!this.containsEsc};pp.eatContextual=function(name){if(!this.isContextual(name)){return false}this.next();return true};pp.expectContextual=function(name){if(!this.eatContextual(name)){this.unexpected()}};pp.canInsertSemicolon=function(){return this.type===types.eof||this.type===types.braceR||lineBreak.test(this.input.slice(this.lastTokEnd,this.start))};pp.insertSemicolon=function(){if(this.canInsertSemicolon()){if(this.options.onInsertedSemicolon){this.options.onInsertedSemicolon(this.lastTokEnd,this.lastTokEndLoc)}return true}};pp.semicolon=function(){if(!this.eat(types.semi)&&!this.insertSemicolon()){this.unexpected()}};pp.afterTrailingComma=function(tokType,notNext){if(this.type==tokType){if(this.options.onTrailingComma){this.options.onTrailingComma(this.lastTokStart,this.lastTokStartLoc)}if(!notNext){this.next()}return true}};pp.expect=function(type){this.eat(type)||this.unexpected()};pp.unexpected=function(pos){this.raise(pos!=null?pos:this.start,"Unexpected token")};function DestructuringErrors(){this.shorthandAssign=this.trailingComma=this.parenthesizedAssign=this.parenthesizedBind=this.doubleProto=-1}pp.checkPatternErrors=function(refDestructuringErrors,isAssign){if(!refDestructuringErrors){return}if(refDestructuringErrors.trailingComma>-1){this.raiseRecoverable(refDestructuringErrors.trailingComma,"Comma is not permitted after the rest element")}var parens=isAssign?refDestructuringErrors.parenthesizedAssign:refDestructuringErrors.parenthesizedBind;if(parens>-1){this.raiseRecoverable(parens,"Parenthesized pattern")}};pp.checkExpressionErrors=function(refDestructuringErrors,andThrow){if(!refDestructuringErrors){return false}var shorthandAssign=refDestructuringErrors.shorthandAssign;var doubleProto=refDestructuringErrors.doubleProto;if(!andThrow){return shorthandAssign>=0||doubleProto>=0}if(shorthandAssign>=0){this.raise(shorthandAssign,"Shorthand property assignments are valid only in destructuring patterns")}if(doubleProto>=0){this.raiseRecoverable(doubleProto,"Redefinition of __proto__ property")}};pp.checkYieldAwaitInDefaultParams=function(){if(this.yieldPos&&(!this.awaitPos||this.yieldPos<this.awaitPos)){this.raise(this.yieldPos,"Yield expression cannot be a default value")}if(this.awaitPos){this.raise(this.awaitPos,"Await expression cannot be a default value")}};pp.isSimpleAssignTarget=function(expr){if(expr.type==="ParenthesizedExpression"){return this.isSimpleAssignTarget(expr.expression)}return expr.type==="Identifier"||expr.type==="MemberExpression"};var pp$1=Parser.prototype;pp$1.parseTopLevel=function(node){var this$1=this;var exports={};if(!node.body){node.body=[]}while(this.type!==types.eof){var stmt=this$1.parseStatement(true,true,exports);node.body.push(stmt)}this.adaptDirectivePrologue(node.body);this.next();if(this.options.ecmaVersion>=6){node.sourceType=this.options.sourceType}return this.finishNode(node,"Program")};var loopLabel={kind:"loop"};var switchLabel={kind:"switch"};pp$1.isLet=function(){if(this.options.ecmaVersion<6||!this.isContextual("let")){return false}skipWhiteSpace.lastIndex=this.pos;var skip=skipWhiteSpace.exec(this.input);var next=this.pos+skip[0].length,nextCh=this.input.charCodeAt(next);if(nextCh===91||nextCh==123){return true}if(isIdentifierStart(nextCh,true)){var pos=next+1;while(isIdentifierChar(this.input.charCodeAt(pos),true)){++pos}var ident=this.input.slice(next,pos);if(!keywordRelationalOperator.test(ident)){return true}}return false};pp$1.isAsyncFunction=function(){if(this.options.ecmaVersion<8||!this.isContextual("async")){return false}skipWhiteSpace.lastIndex=this.pos;var skip=skipWhiteSpace.exec(this.input);var next=this.pos+skip[0].length;return!lineBreak.test(this.input.slice(this.pos,next))&&this.input.slice(next,next+8)==="function"&&(next+8==this.input.length||!isIdentifierChar(this.input.charAt(next+8)))};pp$1.parseStatement=function(declaration,topLevel,exports){var starttype=this.type,node=this.startNode(),kind;if(this.isLet()){starttype=types._var;kind="let"}switch(starttype){case types._break:case types._continue:return this.parseBreakContinueStatement(node,starttype.keyword);case types._debugger:return this.parseDebuggerStatement(node);case types._do:return this.parseDoStatement(node);case types._for:return this.parseForStatement(node);case types._function:if(!declaration&&this.options.ecmaVersion>=6){this.unexpected()}return this.parseFunctionStatement(node,false);case types._class:if(!declaration){this.unexpected()}return this.parseClass(node,true);case types._if:return this.parseIfStatement(node);case types._return:return this.parseReturnStatement(node);case types._switch:return this.parseSwitchStatement(node);case types._throw:return this.parseThrowStatement(node);case types._try:return this.parseTryStatement(node);case types._const:case types._var:kind=kind||this.value;if(!declaration&&kind!="var"){this.unexpected()}return this.parseVarStatement(node,kind);case types._while:return this.parseWhileStatement(node);case types._with:return this.parseWithStatement(node);case types.braceL:return this.parseBlock();case types.semi:return this.parseEmptyStatement(node);case types._export:case types._import:if(!this.options.allowImportExportEverywhere){if(!topLevel){this.raise(this.start,"'import' and 'export' may only appear at the top level")}if(!this.inModule){this.raise(this.start,"'import' and 'export' may appear only with 'sourceType: module'")}}return starttype===types._import?this.parseImport(node):this.parseExport(node,exports);default:if(this.isAsyncFunction()){if(!declaration){this.unexpected()}this.next();return this.parseFunctionStatement(node,true)}var maybeName=this.value,expr=this.parseExpression();if(starttype===types.name&&expr.type==="Identifier"&&this.eat(types.colon)){return this.parseLabeledStatement(node,maybeName,expr)}else{return this.parseExpressionStatement(node,expr)}}};pp$1.parseBreakContinueStatement=function(node,keyword){var this$1=this;var isBreak=keyword=="break";this.next();if(this.eat(types.semi)||this.insertSemicolon()){node.label=null}else if(this.type!==types.name){this.unexpected()}else{node.label=this.parseIdent();this.semicolon()}var i=0;for(;i<this.labels.length;++i){var lab=this$1.labels[i];if(node.label==null||lab.name===node.label.name){if(lab.kind!=null&&(isBreak||lab.kind==="loop")){break}if(node.label&&isBreak){break}}}if(i===this.labels.length){this.raise(node.start,"Unsyntactic "+keyword)}return this.finishNode(node,isBreak?"BreakStatement":"ContinueStatement")};pp$1.parseDebuggerStatement=function(node){this.next();this.semicolon();return this.finishNode(node,"DebuggerStatement")};pp$1.parseDoStatement=function(node){this.next();this.labels.push(loopLabel);node.body=this.parseStatement(false);this.labels.pop();this.expect(types._while);node.test=this.parseParenExpression();if(this.options.ecmaVersion>=6){this.eat(types.semi)}else{this.semicolon()}return this.finishNode(node,"DoWhileStatement")};pp$1.parseForStatement=function(node){this.next();var awaitAt=this.options.ecmaVersion>=9&&this.inAsync&&this.eatContextual("await")?this.lastTokStart:-1;this.labels.push(loopLabel);this.enterLexicalScope();this.expect(types.parenL);if(this.type===types.semi){if(awaitAt>-1){this.unexpected(awaitAt)}return this.parseFor(node,null)}var isLet=this.isLet();if(this.type===types._var||this.type===types._const||isLet){var init$1=this.startNode(),kind=isLet?"let":this.value;this.next();this.parseVar(init$1,true,kind);this.finishNode(init$1,"VariableDeclaration");if((this.type===types._in||this.options.ecmaVersion>=6&&this.isContextual("of"))&&init$1.declarations.length===1&&!(kind!=="var"&&init$1.declarations[0].init)){if(this.options.ecmaVersion>=9){if(this.type===types._in){if(awaitAt>-1){this.unexpected(awaitAt)}}else{node.await=awaitAt>-1}}return this.parseForIn(node,init$1)}if(awaitAt>-1){this.unexpected(awaitAt)}return this.parseFor(node,init$1)}var refDestructuringErrors=new DestructuringErrors;var init=this.parseExpression(true,refDestructuringErrors);if(this.type===types._in||this.options.ecmaVersion>=6&&this.isContextual("of")){if(this.options.ecmaVersion>=9){if(this.type===types._in){if(awaitAt>-1){this.unexpected(awaitAt)}}else{node.await=awaitAt>-1}}this.toAssignable(init,false,refDestructuringErrors);this.checkLVal(init);return this.parseForIn(node,init)}else{this.checkExpressionErrors(refDestructuringErrors,true)}if(awaitAt>-1){this.unexpected(awaitAt)}return this.parseFor(node,init)};pp$1.parseFunctionStatement=function(node,isAsync){this.next();return this.parseFunction(node,true,false,isAsync)};pp$1.parseIfStatement=function(node){this.next();node.test=this.parseParenExpression();node.consequent=this.parseStatement(!this.strict&&this.type==types._function);node.alternate=this.eat(types._else)?this.parseStatement(!this.strict&&this.type==types._function):null;return this.finishNode(node,"IfStatement")};pp$1.parseReturnStatement=function(node){if(!this.inFunction&&!this.options.allowReturnOutsideFunction){this.raise(this.start,"'return' outside of function")}this.next();if(this.eat(types.semi)||this.insertSemicolon()){node.argument=null}else{node.argument=this.parseExpression();this.semicolon()}return this.finishNode(node,"ReturnStatement")};pp$1.parseSwitchStatement=function(node){var this$1=this;this.next();node.discriminant=this.parseParenExpression();node.cases=[];this.expect(types.braceL);this.labels.push(switchLabel);this.enterLexicalScope();var cur;for(var sawDefault=false;this.type!=types.braceR;){if(this$1.type===types._case||this$1.type===types._default){var isCase=this$1.type===types._case;if(cur){this$1.finishNode(cur,"SwitchCase")}node.cases.push(cur=this$1.startNode());cur.consequent=[];this$1.next();if(isCase){cur.test=this$1.parseExpression()}else{if(sawDefault){this$1.raiseRecoverable(this$1.lastTokStart,"Multiple default clauses")}sawDefault=true;cur.test=null}this$1.expect(types.colon)}else{if(!cur){this$1.unexpected()}cur.consequent.push(this$1.parseStatement(true))}}this.exitLexicalScope();if(cur){this.finishNode(cur,"SwitchCase")}this.next();this.labels.pop();return this.finishNode(node,"SwitchStatement")};pp$1.parseThrowStatement=function(node){this.next();if(lineBreak.test(this.input.slice(this.lastTokEnd,this.start))){this.raise(this.lastTokEnd,"Illegal newline after throw")}node.argument=this.parseExpression();this.semicolon();return this.finishNode(node,"ThrowStatement")};var empty=[];pp$1.parseTryStatement=function(node){this.next();node.block=this.parseBlock();node.handler=null;if(this.type===types._catch){var clause=this.startNode();this.next();this.expect(types.parenL);clause.param=this.parseBindingAtom();this.enterLexicalScope();this.checkLVal(clause.param,"let");this.expect(types.parenR);clause.body=this.parseBlock(false);this.exitLexicalScope();node.handler=this.finishNode(clause,"CatchClause")}node.finalizer=this.eat(types._finally)?this.parseBlock():null;if(!node.handler&&!node.finalizer){this.raise(node.start,"Missing catch or finally clause")}return this.finishNode(node,"TryStatement")};pp$1.parseVarStatement=function(node,kind){this.next();this.parseVar(node,false,kind);this.semicolon();return this.finishNode(node,"VariableDeclaration")};pp$1.parseWhileStatement=function(node){this.next();node.test=this.parseParenExpression();this.labels.push(loopLabel);node.body=this.parseStatement(false);this.labels.pop();return this.finishNode(node,"WhileStatement")};pp$1.parseWithStatement=function(node){if(this.strict){this.raise(this.start,"'with' in strict mode")}this.next();node.object=this.parseParenExpression();node.body=this.parseStatement(false);return this.finishNode(node,"WithStatement")};pp$1.parseEmptyStatement=function(node){this.next();return this.finishNode(node,"EmptyStatement")};pp$1.parseLabeledStatement=function(node,maybeName,expr){var this$1=this;for(var i$1=0,list=this$1.labels;i$1<list.length;i$1+=1){var label=list[i$1];if(label.name===maybeName){this$1.raise(expr.start,"Label '"+maybeName+"' is already declared")}}var kind=this.type.isLoop?"loop":this.type===types._switch?"switch":null;for(var i=this.labels.length-1;i>=0;i--){var label$1=this$1.labels[i];if(label$1.statementStart==node.start){label$1.statementStart=this$1.start;label$1.kind=kind}else{break}}this.labels.push({name:maybeName,kind:kind,statementStart:this.start});node.body=this.parseStatement(true);if(node.body.type=="ClassDeclaration"||node.body.type=="VariableDeclaration"&&node.body.kind!="var"||node.body.type=="FunctionDeclaration"&&(this.strict||node.body.generator)){this.raiseRecoverable(node.body.start,"Invalid labeled declaration")}this.labels.pop();node.label=expr;return this.finishNode(node,"LabeledStatement")};pp$1.parseExpressionStatement=function(node,expr){node.expression=expr;this.semicolon();return this.finishNode(node,"ExpressionStatement")};pp$1.parseBlock=function(createNewLexicalScope){var this$1=this;if(createNewLexicalScope===void 0)createNewLexicalScope=true;var node=this.startNode();node.body=[];this.expect(types.braceL);if(createNewLexicalScope){this.enterLexicalScope()}while(!this.eat(types.braceR)){var stmt=this$1.parseStatement(true);node.body.push(stmt)}if(createNewLexicalScope){this.exitLexicalScope()}return this.finishNode(node,"BlockStatement")};pp$1.parseFor=function(node,init){node.init=init;this.expect(types.semi);node.test=this.type===types.semi?null:this.parseExpression();this.expect(types.semi);node.update=this.type===types.parenR?null:this.parseExpression();this.expect(types.parenR);this.exitLexicalScope();node.body=this.parseStatement(false);this.labels.pop();return this.finishNode(node,"ForStatement")};pp$1.parseForIn=function(node,init){var type=this.type===types._in?"ForInStatement":"ForOfStatement";this.next();if(type=="ForInStatement"){if(init.type==="AssignmentPattern"||init.type==="VariableDeclaration"&&init.declarations[0].init!=null&&(this.strict||init.declarations[0].id.type!=="Identifier")){this.raise(init.start,"Invalid assignment in for-in loop head")}}node.left=init;node.right=type=="ForInStatement"?this.parseExpression():this.parseMaybeAssign();this.expect(types.parenR);this.exitLexicalScope();node.body=this.parseStatement(false);this.labels.pop();return this.finishNode(node,type)};pp$1.parseVar=function(node,isFor,kind){var this$1=this;node.declarations=[];node.kind=kind;for(;;){var decl=this$1.startNode();this$1.parseVarId(decl,kind);if(this$1.eat(types.eq)){decl.init=this$1.parseMaybeAssign(isFor)}else if(kind==="const"&&!(this$1.type===types._in||this$1.options.ecmaVersion>=6&&this$1.isContextual("of"))){this$1.unexpected()}else if(decl.id.type!="Identifier"&&!(isFor&&(this$1.type===types._in||this$1.isContextual("of")))){this$1.raise(this$1.lastTokEnd,"Complex binding patterns require an initialization value")}else{decl.init=null}node.declarations.push(this$1.finishNode(decl,"VariableDeclarator"));if(!this$1.eat(types.comma)){break}}return node};pp$1.parseVarId=function(decl,kind){decl.id=this.parseBindingAtom(kind);this.checkLVal(decl.id,kind,false)};pp$1.parseFunction=function(node,isStatement,allowExpressionBody,isAsync){this.initFunction(node);if(this.options.ecmaVersion>=9||this.options.ecmaVersion>=6&&!isAsync){node.generator=this.eat(types.star)}if(this.options.ecmaVersion>=8){node.async=!!isAsync}if(isStatement){node.id=isStatement==="nullableID"&&this.type!=types.name?null:this.parseIdent();if(node.id){this.checkLVal(node.id,"var")}}var oldInGen=this.inGenerator,oldInAsync=this.inAsync,oldYieldPos=this.yieldPos,oldAwaitPos=this.awaitPos,oldInFunc=this.inFunction;this.inGenerator=node.generator;this.inAsync=node.async;this.yieldPos=0;this.awaitPos=0;this.inFunction=true;this.enterFunctionScope();if(!isStatement){node.id=this.type==types.name?this.parseIdent():null}this.parseFunctionParams(node);this.parseFunctionBody(node,allowExpressionBody);this.inGenerator=oldInGen;this.inAsync=oldInAsync;this.yieldPos=oldYieldPos;this.awaitPos=oldAwaitPos;this.inFunction=oldInFunc;return this.finishNode(node,isStatement?"FunctionDeclaration":"FunctionExpression")};pp$1.parseFunctionParams=function(node){this.expect(types.parenL);node.params=this.parseBindingList(types.parenR,false,this.options.ecmaVersion>=8);this.checkYieldAwaitInDefaultParams()};pp$1.parseClass=function(node,isStatement){var this$1=this;this.next();this.parseClassId(node,isStatement);this.parseClassSuper(node);var classBody=this.startNode();var hadConstructor=false;classBody.body=[];this.expect(types.braceL);while(!this.eat(types.braceR)){var member=this$1.parseClassMember(classBody);if(member&&member.type==="MethodDefinition"&&member.kind==="constructor"){if(hadConstructor){this$1.raise(member.start,"Duplicate constructor in the same class")}hadConstructor=true}}node.body=this.finishNode(classBody,"ClassBody");return this.finishNode(node,isStatement?"ClassDeclaration":"ClassExpression")};pp$1.parseClassMember=function(classBody){var this$1=this;if(this.eat(types.semi)){return null}var method=this.startNode();var tryContextual=function(k,noLineBreak){if(noLineBreak===void 0)noLineBreak=false;var start=this$1.start,startLoc=this$1.startLoc;if(!this$1.eatContextual(k)){return false}if(this$1.type!==types.parenL&&(!noLineBreak||!this$1.canInsertSemicolon())){return true}if(method.key){this$1.unexpected()}method.computed=false;method.key=this$1.startNodeAt(start,startLoc);method.key.name=k;this$1.finishNode(method.key,"Identifier");return false};method.kind="method";method.static=tryContextual("static");var isGenerator=this.eat(types.star);var isAsync=false;if(!isGenerator){if(this.options.ecmaVersion>=8&&tryContextual("async",true)){isAsync=true;isGenerator=this.options.ecmaVersion>=9&&this.eat(types.star)}else if(tryContextual("get")){method.kind="get"}else if(tryContextual("set")){method.kind="set"}}if(!method.key){this.parsePropertyName(method)}var key=method.key;if(!method.computed&&!method.static&&(key.type==="Identifier"&&key.name==="constructor"||key.type==="Literal"&&key.value==="constructor")){if(method.kind!=="method"){this.raise(key.start,"Constructor can't have get/set modifier")}if(isGenerator){this.raise(key.start,"Constructor can't be a generator")}if(isAsync){this.raise(key.start,"Constructor can't be an async method")}method.kind="constructor"}else if(method.static&&key.type==="Identifier"&&key.name==="prototype"){this.raise(key.start,"Classes may not have a static property named prototype")}this.parseClassMethod(classBody,method,isGenerator,isAsync);if(method.kind==="get"&&method.value.params.length!==0){this.raiseRecoverable(method.value.start,"getter should have no params")}if(method.kind==="set"&&method.value.params.length!==1){this.raiseRecoverable(method.value.start,"setter should have exactly one param")}if(method.kind==="set"&&method.value.params[0].type==="RestElement"){this.raiseRecoverable(method.value.params[0].start,"Setter cannot use rest params")}return method};pp$1.parseClassMethod=function(classBody,method,isGenerator,isAsync){method.value=this.parseMethod(isGenerator,isAsync);classBody.body.push(this.finishNode(method,"MethodDefinition"))};pp$1.parseClassId=function(node,isStatement){node.id=this.type===types.name?this.parseIdent():isStatement===true?this.unexpected():null};pp$1.parseClassSuper=function(node){node.superClass=this.eat(types._extends)?this.parseExprSubscripts():null};pp$1.parseExport=function(node,exports){var this$1=this;this.next();if(this.eat(types.star)){this.expectContextual("from");if(this.type!==types.string){this.unexpected()}node.source=this.parseExprAtom();this.semicolon();return this.finishNode(node,"ExportAllDeclaration")}if(this.eat(types._default)){this.checkExport(exports,"default",this.lastTokStart);var isAsync;if(this.type===types._function||(isAsync=this.isAsyncFunction())){var fNode=this.startNode();this.next();if(isAsync){this.next()}node.declaration=this.parseFunction(fNode,"nullableID",false,isAsync)}else if(this.type===types._class){var cNode=this.startNode();node.declaration=this.parseClass(cNode,"nullableID")}else{node.declaration=this.parseMaybeAssign();this.semicolon()}return this.finishNode(node,"ExportDefaultDeclaration")}if(this.shouldParseExportStatement()){node.declaration=this.parseStatement(true);if(node.declaration.type==="VariableDeclaration"){this.checkVariableExport(exports,node.declaration.declarations)}else{this.checkExport(exports,node.declaration.id.name,node.declaration.id.start)}node.specifiers=[];node.source=null}else{node.declaration=null;node.specifiers=this.parseExportSpecifiers(exports);if(this.eatContextual("from")){if(this.type!==types.string){this.unexpected()}node.source=this.parseExprAtom()}else{for(var i=0,list=node.specifiers;i<list.length;i+=1){var spec=list[i];this$1.checkUnreserved(spec.local)}node.source=null}this.semicolon()}return this.finishNode(node,"ExportNamedDeclaration")};pp$1.checkExport=function(exports,name,pos){if(!exports){return}if(has(exports,name)){this.raiseRecoverable(pos,"Duplicate export '"+name+"'")}exports[name]=true};pp$1.checkPatternExport=function(exports,pat){var this$1=this;var type=pat.type;if(type=="Identifier"){this.checkExport(exports,pat.name,pat.start)}else if(type=="ObjectPattern"){for(var i=0,list=pat.properties;i<list.length;i+=1){var prop=list[i];this$1.checkPatternExport(exports,prop)}}else if(type=="ArrayPattern"){for(var i$1=0,list$1=pat.elements;i$1<list$1.length;i$1+=1){var elt=list$1[i$1];if(elt){this$1.checkPatternExport(exports,elt)}}}else if(type=="Property"){this.checkPatternExport(exports,pat.value)}else if(type=="AssignmentPattern"){this.checkPatternExport(exports,pat.left)}else if(type=="RestElement"){this.checkPatternExport(exports,pat.argument)}else if(type=="ParenthesizedExpression"){this.checkPatternExport(exports,pat.expression)}};pp$1.checkVariableExport=function(exports,decls){var this$1=this;if(!exports){return}for(var i=0,list=decls;i<list.length;i+=1){var decl=list[i];this$1.checkPatternExport(exports,decl.id)}};pp$1.shouldParseExportStatement=function(){return this.type.keyword==="var"||this.type.keyword==="const"||this.type.keyword==="class"||this.type.keyword==="function"||this.isLet()||this.isAsyncFunction()};pp$1.parseExportSpecifiers=function(exports){var this$1=this;var nodes=[],first=true;this.expect(types.braceL);while(!this.eat(types.braceR)){if(!first){this$1.expect(types.comma);if(this$1.afterTrailingComma(types.braceR)){break}}else{first=false}var node=this$1.startNode();node.local=this$1.parseIdent(true);node.exported=this$1.eatContextual("as")?this$1.parseIdent(true):node.local;this$1.checkExport(exports,node.exported.name,node.exported.start);nodes.push(this$1.finishNode(node,"ExportSpecifier"))}return nodes};pp$1.parseImport=function(node){this.next();if(this.type===types.string){node.specifiers=empty;node.source=this.parseExprAtom()}else{node.specifiers=this.parseImportSpecifiers();this.expectContextual("from");node.source=this.type===types.string?this.parseExprAtom():this.unexpected()}this.semicolon();return this.finishNode(node,"ImportDeclaration")};pp$1.parseImportSpecifiers=function(){var this$1=this;var nodes=[],first=true;if(this.type===types.name){var node=this.startNode();node.local=this.parseIdent();this.checkLVal(node.local,"let");nodes.push(this.finishNode(node,"ImportDefaultSpecifier"));if(!this.eat(types.comma)){return nodes}}if(this.type===types.star){var node$1=this.startNode();this.next();this.expectContextual("as");node$1.local=this.parseIdent();this.checkLVal(node$1.local,"let");nodes.push(this.finishNode(node$1,"ImportNamespaceSpecifier"));return nodes}this.expect(types.braceL);while(!this.eat(types.braceR)){if(!first){this$1.expect(types.comma);if(this$1.afterTrailingComma(types.braceR)){break}}else{first=false}var node$2=this$1.startNode();node$2.imported=this$1.parseIdent(true);if(this$1.eatContextual("as")){node$2.local=this$1.parseIdent()}else{this$1.checkUnreserved(node$2.imported);node$2.local=node$2.imported}this$1.checkLVal(node$2.local,"let");nodes.push(this$1.finishNode(node$2,"ImportSpecifier"))}return nodes};pp$1.adaptDirectivePrologue=function(statements){for(var i=0;i<statements.length&&this.isDirectiveCandidate(statements[i]);++i){statements[i].directive=statements[i].expression.raw.slice(1,-1)}};pp$1.isDirectiveCandidate=function(statement){return statement.type==="ExpressionStatement"&&statement.expression.type==="Literal"&&typeof statement.expression.value==="string"&&(this.input[statement.start]==='"'||this.input[statement.start]==="'")};var pp$2=Parser.prototype;pp$2.toAssignable=function(node,isBinding,refDestructuringErrors){var this$1=this;if(this.options.ecmaVersion>=6&&node){switch(node.type){case"Identifier":if(this.inAsync&&node.name==="await"){this.raise(node.start,"Can not use 'await' as identifier inside an async function")}break;case"ObjectPattern":case"ArrayPattern":case"RestElement":break;case"ObjectExpression":node.type="ObjectPattern";if(refDestructuringErrors){this.checkPatternErrors(refDestructuringErrors,true)}for(var i=0,list=node.properties;i<list.length;i+=1){var prop=list[i];this$1.toAssignable(prop,isBinding);if(prop.type==="RestElement"&&(prop.argument.type==="ArrayPattern"||prop.argument.type==="ObjectPattern")){this$1.raise(prop.argument.start,"Unexpected token")}}break;case"Property":if(node.kind!=="init"){this.raise(node.key.start,"Object pattern can't contain getter or setter")}this.toAssignable(node.value,isBinding);break;case"ArrayExpression":node.type="ArrayPattern";if(refDestructuringErrors){this.checkPatternErrors(refDestructuringErrors,true)}this.toAssignableList(node.elements,isBinding);break;case"SpreadElement":node.type="RestElement";this.toAssignable(node.argument,isBinding);if(node.argument.type==="AssignmentPattern"){this.raise(node.argument.start,"Rest elements cannot have a default value")}break;case"AssignmentExpression":if(node.operator!=="="){this.raise(node.left.end,"Only '=' operator can be used for specifying default value.")}node.type="AssignmentPattern";delete node.operator;this.toAssignable(node.left,isBinding);case"AssignmentPattern":break;case"ParenthesizedExpression":this.toAssignable(node.expression,isBinding);break;case"MemberExpression":if(!isBinding){break}default:this.raise(node.start,"Assigning to rvalue")}}else if(refDestructuringErrors){this.checkPatternErrors(refDestructuringErrors,true)}return node};pp$2.toAssignableList=function(exprList,isBinding){var this$1=this;var end=exprList.length;for(var i=0;i<end;i++){var elt=exprList[i];if(elt){this$1.toAssignable(elt,isBinding)}}if(end){var last=exprList[end-1];if(this.options.ecmaVersion===6&&isBinding&&last&&last.type==="RestElement"&&last.argument.type!=="Identifier"){this.unexpected(last.argument.start)}}return exprList};pp$2.parseSpread=function(refDestructuringErrors){var node=this.startNode();this.next();node.argument=this.parseMaybeAssign(false,refDestructuringErrors);return this.finishNode(node,"SpreadElement")};pp$2.parseRestBinding=function(){var node=this.startNode();this.next();if(this.options.ecmaVersion===6&&this.type!==types.name){this.unexpected()}node.argument=this.parseBindingAtom();return this.finishNode(node,"RestElement")};pp$2.parseBindingAtom=function(){if(this.options.ecmaVersion>=6){switch(this.type){case types.bracketL:var node=this.startNode();this.next();node.elements=this.parseBindingList(types.bracketR,true,true);return this.finishNode(node,"ArrayPattern");case types.braceL:return this.parseObj(true)}}return this.parseIdent()};pp$2.parseBindingList=function(close,allowEmpty,allowTrailingComma){var this$1=this;var elts=[],first=true;while(!this.eat(close)){if(first){first=false}else{this$1.expect(types.comma)}if(allowEmpty&&this$1.type===types.comma){elts.push(null)}else if(allowTrailingComma&&this$1.afterTrailingComma(close)){break}else if(this$1.type===types.ellipsis){var rest=this$1.parseRestBinding();this$1.parseBindingListItem(rest);elts.push(rest);if(this$1.type===types.comma){this$1.raise(this$1.start,"Comma is not permitted after the rest element")}this$1.expect(close);break}else{var elem=this$1.parseMaybeDefault(this$1.start,this$1.startLoc);this$1.parseBindingListItem(elem);elts.push(elem)}}return elts};pp$2.parseBindingListItem=function(param){return param};pp$2.parseMaybeDefault=function(startPos,startLoc,left){left=left||this.parseBindingAtom();if(this.options.ecmaVersion<6||!this.eat(types.eq)){return left}var node=this.startNodeAt(startPos,startLoc);node.left=left;node.right=this.parseMaybeAssign();return this.finishNode(node,"AssignmentPattern")};pp$2.checkLVal=function(expr,bindingType,checkClashes){var this$1=this;switch(expr.type){case"Identifier":if(this.strict&&this.reservedWordsStrictBind.test(expr.name)){this.raiseRecoverable(expr.start,(bindingType?"Binding ":"Assigning to ")+expr.name+" in strict mode")}if(checkClashes){if(has(checkClashes,expr.name)){this.raiseRecoverable(expr.start,"Argument name clash")}checkClashes[expr.name]=true}if(bindingType&&bindingType!=="none"){if(bindingType==="var"&&!this.canDeclareVarName(expr.name)||bindingType!=="var"&&!this.canDeclareLexicalName(expr.name)){this.raiseRecoverable(expr.start,"Identifier '"+expr.name+"' has already been declared")}if(bindingType==="var"){this.declareVarName(expr.name)}else{this.declareLexicalName(expr.name)}}break;case"MemberExpression":if(bindingType){this.raiseRecoverable(expr.start,"Binding member expression")}break;case"ObjectPattern":for(var i=0,list=expr.properties;i<list.length;i+=1){var prop=list[i];this$1.checkLVal(prop,bindingType,checkClashes)}break;case"Property":this.checkLVal(expr.value,bindingType,checkClashes);break;case"ArrayPattern":for(var i$1=0,list$1=expr.elements;i$1<list$1.length;i$1+=1){var elem=list$1[i$1];if(elem){this$1.checkLVal(elem,bindingType,checkClashes)}}break;case"AssignmentPattern":this.checkLVal(expr.left,bindingType,checkClashes);break;case"RestElement":this.checkLVal(expr.argument,bindingType,checkClashes);break;case"ParenthesizedExpression":this.checkLVal(expr.expression,bindingType,checkClashes);break;default:this.raise(expr.start,(bindingType?"Binding":"Assigning to")+" rvalue")}};var pp$3=Parser.prototype;pp$3.checkPropClash=function(prop,propHash,refDestructuringErrors){if(this.options.ecmaVersion>=9&&prop.type==="SpreadElement"){return}if(this.options.ecmaVersion>=6&&(prop.computed||prop.method||prop.shorthand)){return}var key=prop.key;var name;switch(key.type){case"Identifier":name=key.name;break;case"Literal":name=String(key.value);break;default:return}var kind=prop.kind;if(this.options.ecmaVersion>=6){if(name==="__proto__"&&kind==="init"){if(propHash.proto){if(refDestructuringErrors&&refDestructuringErrors.doubleProto<0){refDestructuringErrors.doubleProto=key.start}else{this.raiseRecoverable(key.start,"Redefinition of __proto__ property")}}propHash.proto=true}return}name="$"+name;var other=propHash[name];if(other){var redefinition;if(kind==="init"){redefinition=this.strict&&other.init||other.get||other.set}else{redefinition=other.init||other[kind]}if(redefinition){this.raiseRecoverable(key.start,"Redefinition of property")}}else{other=propHash[name]={init:false,get:false,set:false}}other[kind]=true};pp$3.parseExpression=function(noIn,refDestructuringErrors){var this$1=this;var startPos=this.start,startLoc=this.startLoc;var expr=this.parseMaybeAssign(noIn,refDestructuringErrors);if(this.type===types.comma){var node=this.startNodeAt(startPos,startLoc);node.expressions=[expr];while(this.eat(types.comma)){node.expressions.push(this$1.parseMaybeAssign(noIn,refDestructuringErrors))}return this.finishNode(node,"SequenceExpression")}return expr};pp$3.parseMaybeAssign=function(noIn,refDestructuringErrors,afterLeftParse){if(this.inGenerator&&this.isContextual("yield")){return this.parseYield()}var ownDestructuringErrors=false,oldParenAssign=-1,oldTrailingComma=-1;if(refDestructuringErrors){oldParenAssign=refDestructuringErrors.parenthesizedAssign;oldTrailingComma=refDestructuringErrors.trailingComma;refDestructuringErrors.parenthesizedAssign=refDestructuringErrors.trailingComma=-1}else{refDestructuringErrors=new DestructuringErrors;ownDestructuringErrors=true}var startPos=this.start,startLoc=this.startLoc;if(this.type==types.parenL||this.type==types.name){this.potentialArrowAt=this.start}var left=this.parseMaybeConditional(noIn,refDestructuringErrors);if(afterLeftParse){left=afterLeftParse.call(this,left,startPos,startLoc)}if(this.type.isAssign){var node=this.startNodeAt(startPos,startLoc);node.operator=this.value;node.left=this.type===types.eq?this.toAssignable(left,false,refDestructuringErrors):left;if(!ownDestructuringErrors){DestructuringErrors.call(refDestructuringErrors)}refDestructuringErrors.shorthandAssign=-1;this.checkLVal(left);this.next();node.right=this.parseMaybeAssign(noIn);return this.finishNode(node,"AssignmentExpression")}else{if(ownDestructuringErrors){this.checkExpressionErrors(refDestructuringErrors,true)}}if(oldParenAssign>-1){refDestructuringErrors.parenthesizedAssign=oldParenAssign}if(oldTrailingComma>-1){refDestructuringErrors.trailingComma=oldTrailingComma}return left};pp$3.parseMaybeConditional=function(noIn,refDestructuringErrors){var startPos=this.start,startLoc=this.startLoc;var expr=this.parseExprOps(noIn,refDestructuringErrors);if(this.checkExpressionErrors(refDestructuringErrors)){return expr}if(this.eat(types.question)){var node=this.startNodeAt(startPos,startLoc);node.test=expr;node.consequent=this.parseMaybeAssign();this.expect(types.colon);node.alternate=this.parseMaybeAssign(noIn);return this.finishNode(node,"ConditionalExpression")}return expr};pp$3.parseExprOps=function(noIn,refDestructuringErrors){var startPos=this.start,startLoc=this.startLoc;var expr=this.parseMaybeUnary(refDestructuringErrors,false);if(this.checkExpressionErrors(refDestructuringErrors)){return expr}return expr.start==startPos&&expr.type==="ArrowFunctionExpression"?expr:this.parseExprOp(expr,startPos,startLoc,-1,noIn)};pp$3.parseExprOp=function(left,leftStartPos,leftStartLoc,minPrec,noIn){var prec=this.type.binop;if(prec!=null&&(!noIn||this.type!==types._in)){if(prec>minPrec){var logical=this.type===types.logicalOR||this.type===types.logicalAND;var op=this.value;this.next();var startPos=this.start,startLoc=this.startLoc;var right=this.parseExprOp(this.parseMaybeUnary(null,false),startPos,startLoc,prec,noIn);var node=this.buildBinary(leftStartPos,leftStartLoc,left,right,op,logical);return this.parseExprOp(node,leftStartPos,leftStartLoc,minPrec,noIn)}}return left};pp$3.buildBinary=function(startPos,startLoc,left,right,op,logical){var node=this.startNodeAt(startPos,startLoc);node.left=left;node.operator=op;node.right=right;return this.finishNode(node,logical?"LogicalExpression":"BinaryExpression")};pp$3.parseMaybeUnary=function(refDestructuringErrors,sawUnary){var this$1=this;var startPos=this.start,startLoc=this.startLoc,expr;if(this.inAsync&&this.isContextual("await")){expr=this.parseAwait();sawUnary=true}else if(this.type.prefix){var node=this.startNode(),update=this.type===types.incDec;node.operator=this.value;node.prefix=true;this.next();node.argument=this.parseMaybeUnary(null,true);this.checkExpressionErrors(refDestructuringErrors,true);if(update){this.checkLVal(node.argument)}else if(this.strict&&node.operator==="delete"&&node.argument.type==="Identifier"){this.raiseRecoverable(node.start,"Deleting local variable in strict mode")}else{sawUnary=true}expr=this.finishNode(node,update?"UpdateExpression":"UnaryExpression")}else{expr=this.parseExprSubscripts(refDestructuringErrors);if(this.checkExpressionErrors(refDestructuringErrors)){return expr}while(this.type.postfix&&!this.canInsertSemicolon()){var node$1=this$1.startNodeAt(startPos,startLoc);node$1.operator=this$1.value;node$1.prefix=false;node$1.argument=expr;this$1.checkLVal(expr);this$1.next();expr=this$1.finishNode(node$1,"UpdateExpression")}}if(!sawUnary&&this.eat(types.starstar)){return this.buildBinary(startPos,startLoc,expr,this.parseMaybeUnary(null,false),"**",false)}else{return expr}};pp$3.parseExprSubscripts=function(refDestructuringErrors){var startPos=this.start,startLoc=this.startLoc;var expr=this.parseExprAtom(refDestructuringErrors);var skipArrowSubscripts=expr.type==="ArrowFunctionExpression"&&this.input.slice(this.lastTokStart,this.lastTokEnd)!==")";if(this.checkExpressionErrors(refDestructuringErrors)||skipArrowSubscripts){return expr}var result=this.parseSubscripts(expr,startPos,startLoc);if(refDestructuringErrors&&result.type==="MemberExpression"){if(refDestructuringErrors.parenthesizedAssign>=result.start){refDestructuringErrors.parenthesizedAssign=-1}if(refDestructuringErrors.parenthesizedBind>=result.start){refDestructuringErrors.parenthesizedBind=-1}}return result};pp$3.parseSubscripts=function(base,startPos,startLoc,noCalls){var this$1=this;var maybeAsyncArrow=this.options.ecmaVersion>=8&&base.type==="Identifier"&&base.name==="async"&&this.lastTokEnd==base.end&&!this.canInsertSemicolon()&&this.input.slice(base.start,base.end)==="async";for(var computed=void 0;;){if((computed=this$1.eat(types.bracketL))||this$1.eat(types.dot)){var node=this$1.startNodeAt(startPos,startLoc);node.object=base;node.property=computed?this$1.parseExpression():this$1.parseIdent(true);node.computed=!!computed;if(computed){this$1.expect(types.bracketR)}base=this$1.finishNode(node,"MemberExpression")}else if(!noCalls&&this$1.eat(types.parenL)){var refDestructuringErrors=new DestructuringErrors,oldYieldPos=this$1.yieldPos,oldAwaitPos=this$1.awaitPos;this$1.yieldPos=0;this$1.awaitPos=0;var exprList=this$1.parseExprList(types.parenR,this$1.options.ecmaVersion>=8,false,refDestructuringErrors);if(maybeAsyncArrow&&!this$1.canInsertSemicolon()&&this$1.eat(types.arrow)){this$1.checkPatternErrors(refDestructuringErrors,false);this$1.checkYieldAwaitInDefaultParams();this$1.yieldPos=oldYieldPos;this$1.awaitPos=oldAwaitPos;return this$1.parseArrowExpression(this$1.startNodeAt(startPos,startLoc),exprList,true)}this$1.checkExpressionErrors(refDestructuringErrors,true);this$1.yieldPos=oldYieldPos||this$1.yieldPos;this$1.awaitPos=oldAwaitPos||this$1.awaitPos;var node$1=this$1.startNodeAt(startPos,startLoc);node$1.callee=base;node$1.arguments=exprList;base=this$1.finishNode(node$1,"CallExpression")}else if(this$1.type===types.backQuote){var node$2=this$1.startNodeAt(startPos,startLoc);node$2.tag=base;node$2.quasi=this$1.parseTemplate({isTagged:true});base=this$1.finishNode(node$2,"TaggedTemplateExpression")}else{return base}}};pp$3.parseExprAtom=function(refDestructuringErrors){var node,canBeArrow=this.potentialArrowAt==this.start;switch(this.type){case types._super:if(!this.inFunction){this.raise(this.start,"'super' outside of function or class")}node=this.startNode();this.next();if(this.type!==types.dot&&this.type!==types.bracketL&&this.type!==types.parenL){this.unexpected()}return this.finishNode(node,"Super");case types._this:node=this.startNode();this.next();return this.finishNode(node,"ThisExpression");case types.name:var startPos=this.start,startLoc=this.startLoc,containsEsc=this.containsEsc;var id=this.parseIdent(this.type!==types.name);if(this.options.ecmaVersion>=8&&!containsEsc&&id.name==="async"&&!this.canInsertSemicolon()&&this.eat(types._function)){return this.parseFunction(this.startNodeAt(startPos,startLoc),false,false,true)}if(canBeArrow&&!this.canInsertSemicolon()){if(this.eat(types.arrow)){return this.parseArrowExpression(this.startNodeAt(startPos,startLoc),[id],false)}if(this.options.ecmaVersion>=8&&id.name==="async"&&this.type===types.name&&!containsEsc){id=this.parseIdent();if(this.canInsertSemicolon()||!this.eat(types.arrow)){this.unexpected()}return this.parseArrowExpression(this.startNodeAt(startPos,startLoc),[id],true)}}return id;case types.regexp:var value=this.value;node=this.parseLiteral(value.value);node.regex={pattern:value.pattern,flags:value.flags};return node;case types.num:case types.string:return this.parseLiteral(this.value);case types._null:case types._true:case types._false:node=this.startNode();node.value=this.type===types._null?null:this.type===types._true;node.raw=this.type.keyword;this.next();return this.finishNode(node,"Literal");case types.parenL:var start=this.start,expr=this.parseParenAndDistinguishExpression(canBeArrow);if(refDestructuringErrors){if(refDestructuringErrors.parenthesizedAssign<0&&!this.isSimpleAssignTarget(expr)){refDestructuringErrors.parenthesizedAssign=start}if(refDestructuringErrors.parenthesizedBind<0){refDestructuringErrors.parenthesizedBind=start}}return expr;case types.bracketL:node=this.startNode();this.next();node.elements=this.parseExprList(types.bracketR,true,true,refDestructuringErrors);return this.finishNode(node,"ArrayExpression");case types.braceL:return this.parseObj(false,refDestructuringErrors);case types._function:node=this.startNode();this.next();return this.parseFunction(node,false);case types._class:return this.parseClass(this.startNode(),false);case types._new:return this.parseNew();case types.backQuote:return this.parseTemplate();default:this.unexpected()}};pp$3.parseLiteral=function(value){var node=this.startNode();node.value=value;node.raw=this.input.slice(this.start,this.end);this.next();return this.finishNode(node,"Literal")};pp$3.parseParenExpression=function(){this.expect(types.parenL);var val=this.parseExpression();this.expect(types.parenR);return val};pp$3.parseParenAndDistinguishExpression=function(canBeArrow){var this$1=this;var startPos=this.start,startLoc=this.startLoc,val,allowTrailingComma=this.options.ecmaVersion>=8;if(this.options.ecmaVersion>=6){this.next();var innerStartPos=this.start,innerStartLoc=this.startLoc;var exprList=[],first=true,lastIsComma=false;var refDestructuringErrors=new DestructuringErrors,oldYieldPos=this.yieldPos,oldAwaitPos=this.awaitPos,spreadStart;this.yieldPos=0;this.awaitPos=0;while(this.type!==types.parenR){first?first=false:this$1.expect(types.comma);if(allowTrailingComma&&this$1.afterTrailingComma(types.parenR,true)){lastIsComma=true;break}else if(this$1.type===types.ellipsis){spreadStart=this$1.start;exprList.push(this$1.parseParenItem(this$1.parseRestBinding()));if(this$1.type===types.comma){this$1.raise(this$1.start,"Comma is not permitted after the rest element")}break}else{exprList.push(this$1.parseMaybeAssign(false,refDestructuringErrors,this$1.parseParenItem))}}var innerEndPos=this.start,innerEndLoc=this.startLoc;this.expect(types.parenR);if(canBeArrow&&!this.canInsertSemicolon()&&this.eat(types.arrow)){this.checkPatternErrors(refDestructuringErrors,false);this.checkYieldAwaitInDefaultParams();this.yieldPos=oldYieldPos;this.awaitPos=oldAwaitPos;return this.parseParenArrowList(startPos,startLoc,exprList)}if(!exprList.length||lastIsComma){this.unexpected(this.lastTokStart)}if(spreadStart){this.unexpected(spreadStart)}this.checkExpressionErrors(refDestructuringErrors,true);this.yieldPos=oldYieldPos||this.yieldPos;this.awaitPos=oldAwaitPos||this.awaitPos;if(exprList.length>1){val=this.startNodeAt(innerStartPos,innerStartLoc);val.expressions=exprList;this.finishNodeAt(val,"SequenceExpression",innerEndPos,innerEndLoc)}else{val=exprList[0]}}else{val=this.parseParenExpression()}if(this.options.preserveParens){var par=this.startNodeAt(startPos,startLoc);par.expression=val;return this.finishNode(par,"ParenthesizedExpression")}else{return val}};pp$3.parseParenItem=function(item){return item};pp$3.parseParenArrowList=function(startPos,startLoc,exprList){return this.parseArrowExpression(this.startNodeAt(startPos,startLoc),exprList)};var empty$1=[];pp$3.parseNew=function(){var node=this.startNode();var meta=this.parseIdent(true);if(this.options.ecmaVersion>=6&&this.eat(types.dot)){node.meta=meta;var containsEsc=this.containsEsc;node.property=this.parseIdent(true);if(node.property.name!=="target"||containsEsc){this.raiseRecoverable(node.property.start,"The only valid meta property for new is new.target")}if(!this.inFunction){this.raiseRecoverable(node.start,"new.target can only be used in functions")}return this.finishNode(node,"MetaProperty")}var startPos=this.start,startLoc=this.startLoc;node.callee=this.parseSubscripts(this.parseExprAtom(),startPos,startLoc,true);if(this.eat(types.parenL)){node.arguments=this.parseExprList(types.parenR,this.options.ecmaVersion>=8,false)}else{node.arguments=empty$1}return this.finishNode(node,"NewExpression")};pp$3.parseTemplateElement=function(ref){var isTagged=ref.isTagged;var elem=this.startNode();if(this.type===types.invalidTemplate){if(!isTagged){this.raiseRecoverable(this.start,"Bad escape sequence in untagged template literal")}elem.value={raw:this.value,cooked:null}}else{elem.value={raw:this.input.slice(this.start,this.end).replace(/\r\n?/g,"\n"),cooked:this.value}}this.next();elem.tail=this.type===types.backQuote;return this.finishNode(elem,"TemplateElement")};pp$3.parseTemplate=function(ref){var this$1=this;if(ref===void 0)ref={};var isTagged=ref.isTagged;if(isTagged===void 0)isTagged=false;var node=this.startNode();this.next();node.expressions=[];var curElt=this.parseTemplateElement({isTagged:isTagged});node.quasis=[curElt];while(!curElt.tail){this$1.expect(types.dollarBraceL);node.expressions.push(this$1.parseExpression());this$1.expect(types.braceR);node.quasis.push(curElt=this$1.parseTemplateElement({isTagged:isTagged}))}this.next();return this.finishNode(node,"TemplateLiteral")};pp$3.isAsyncProp=function(prop){return!prop.computed&&prop.key.type==="Identifier"&&prop.key.name==="async"&&(this.type===types.name||this.type===types.num||this.type===types.string||this.type===types.bracketL||this.type.keyword||this.options.ecmaVersion>=9&&this.type===types.star)&&!lineBreak.test(this.input.slice(this.lastTokEnd,this.start))};pp$3.parseObj=function(isPattern,refDestructuringErrors){var this$1=this;var node=this.startNode(),first=true,propHash={};node.properties=[];this.next();while(!this.eat(types.braceR)){if(!first){this$1.expect(types.comma);if(this$1.afterTrailingComma(types.braceR)){break}}else{first=false}var prop=this$1.parseProperty(isPattern,refDestructuringErrors);if(!isPattern){this$1.checkPropClash(prop,propHash,refDestructuringErrors)}node.properties.push(prop)}return this.finishNode(node,isPattern?"ObjectPattern":"ObjectExpression")};pp$3.parseProperty=function(isPattern,refDestructuringErrors){var prop=this.startNode(),isGenerator,isAsync,startPos,startLoc;if(this.options.ecmaVersion>=9&&this.eat(types.ellipsis)){if(isPattern){prop.argument=this.parseIdent(false);if(this.type===types.comma){this.raise(this.start,"Comma is not permitted after the rest element")}return this.finishNode(prop,"RestElement")}if(this.type===types.parenL&&refDestructuringErrors){if(refDestructuringErrors.parenthesizedAssign<0){refDestructuringErrors.parenthesizedAssign=this.start}if(refDestructuringErrors.parenthesizedBind<0){refDestructuringErrors.parenthesizedBind=this.start}}prop.argument=this.parseMaybeAssign(false,refDestructuringErrors);if(this.type===types.comma&&refDestructuringErrors&&refDestructuringErrors.trailingComma<0){refDestructuringErrors.trailingComma=this.start}return this.finishNode(prop,"SpreadElement")}if(this.options.ecmaVersion>=6){prop.method=false;prop.shorthand=false;if(isPattern||refDestructuringErrors){startPos=this.start;startLoc=this.startLoc}if(!isPattern){isGenerator=this.eat(types.star)}}var containsEsc=this.containsEsc;this.parsePropertyName(prop);if(!isPattern&&!containsEsc&&this.options.ecmaVersion>=8&&!isGenerator&&this.isAsyncProp(prop)){isAsync=true;isGenerator=this.options.ecmaVersion>=9&&this.eat(types.star);this.parsePropertyName(prop,refDestructuringErrors)}else{isAsync=false}this.parsePropertyValue(prop,isPattern,isGenerator,isAsync,startPos,startLoc,refDestructuringErrors,containsEsc);return this.finishNode(prop,"Property")};pp$3.parsePropertyValue=function(prop,isPattern,isGenerator,isAsync,startPos,startLoc,refDestructuringErrors,containsEsc){if((isGenerator||isAsync)&&this.type===types.colon){this.unexpected()}if(this.eat(types.colon)){prop.value=isPattern?this.parseMaybeDefault(this.start,this.startLoc):this.parseMaybeAssign(false,refDestructuringErrors);prop.kind="init"}else if(this.options.ecmaVersion>=6&&this.type===types.parenL){if(isPattern){this.unexpected()}prop.kind="init";prop.method=true;prop.value=this.parseMethod(isGenerator,isAsync)}else if(!isPattern&&!containsEsc&&this.options.ecmaVersion>=5&&!prop.computed&&prop.key.type==="Identifier"&&(prop.key.name==="get"||prop.key.name==="set")&&(this.type!=types.comma&&this.type!=types.braceR)){if(isGenerator||isAsync){this.unexpected()}prop.kind=prop.key.name;this.parsePropertyName(prop);prop.value=this.parseMethod(false);var paramCount=prop.kind==="get"?0:1;if(prop.value.params.length!==paramCount){var start=prop.value.start;if(prop.kind==="get"){this.raiseRecoverable(start,"getter should have no params")}else{this.raiseRecoverable(start,"setter should have exactly one param")}}else{if(prop.kind==="set"&&prop.value.params[0].type==="RestElement"){this.raiseRecoverable(prop.value.params[0].start,"Setter cannot use rest params")}}}else if(this.options.ecmaVersion>=6&&!prop.computed&&prop.key.type==="Identifier"){this.checkUnreserved(prop.key);prop.kind="init";if(isPattern){prop.value=this.parseMaybeDefault(startPos,startLoc,prop.key)}else if(this.type===types.eq&&refDestructuringErrors){if(refDestructuringErrors.shorthandAssign<0){refDestructuringErrors.shorthandAssign=this.start}prop.value=this.parseMaybeDefault(startPos,startLoc,prop.key)}else{prop.value=prop.key}prop.shorthand=true}else{this.unexpected()}};pp$3.parsePropertyName=function(prop){if(this.options.ecmaVersion>=6){if(this.eat(types.bracketL)){prop.computed=true;prop.key=this.parseMaybeAssign();this.expect(types.bracketR);return prop.key}else{prop.computed=false}}return prop.key=this.type===types.num||this.type===types.string?this.parseExprAtom():this.parseIdent(true)};pp$3.initFunction=function(node){node.id=null;if(this.options.ecmaVersion>=6){node.generator=false;node.expression=false}if(this.options.ecmaVersion>=8){node.async=false}};pp$3.parseMethod=function(isGenerator,isAsync){var node=this.startNode(),oldInGen=this.inGenerator,oldInAsync=this.inAsync,oldYieldPos=this.yieldPos,oldAwaitPos=this.awaitPos,oldInFunc=this.inFunction;this.initFunction(node);if(this.options.ecmaVersion>=6){node.generator=isGenerator}if(this.options.ecmaVersion>=8){node.async=!!isAsync}this.inGenerator=node.generator;this.inAsync=node.async;this.yieldPos=0;this.awaitPos=0;this.inFunction=true;this.enterFunctionScope();this.expect(types.parenL);node.params=this.parseBindingList(types.parenR,false,this.options.ecmaVersion>=8);this.checkYieldAwaitInDefaultParams();this.parseFunctionBody(node,false);this.inGenerator=oldInGen;this.inAsync=oldInAsync;this.yieldPos=oldYieldPos;this.awaitPos=oldAwaitPos;this.inFunction=oldInFunc;return this.finishNode(node,"FunctionExpression")};pp$3.parseArrowExpression=function(node,params,isAsync){var oldInGen=this.inGenerator,oldInAsync=this.inAsync,oldYieldPos=this.yieldPos,oldAwaitPos=this.awaitPos,oldInFunc=this.inFunction;this.enterFunctionScope();this.initFunction(node);if(this.options.ecmaVersion>=8){node.async=!!isAsync}this.inGenerator=false;this.inAsync=node.async;this.yieldPos=0;this.awaitPos=0;this.inFunction=true;node.params=this.toAssignableList(params,true);this.parseFunctionBody(node,true);this.inGenerator=oldInGen;this.inAsync=oldInAsync;this.yieldPos=oldYieldPos;this.awaitPos=oldAwaitPos;this.inFunction=oldInFunc;return this.finishNode(node,"ArrowFunctionExpression")};pp$3.parseFunctionBody=function(node,isArrowFunction){var isExpression=isArrowFunction&&this.type!==types.braceL;var oldStrict=this.strict,useStrict=false;if(isExpression){node.body=this.parseMaybeAssign();node.expression=true;this.checkParams(node,false)}else{var nonSimple=this.options.ecmaVersion>=7&&!this.isSimpleParamList(node.params);if(!oldStrict||nonSimple){useStrict=this.strictDirective(this.end);if(useStrict&&nonSimple){this.raiseRecoverable(node.start,"Illegal 'use strict' directive in function with non-simple parameter list")}}var oldLabels=this.labels;this.labels=[];if(useStrict){this.strict=true}this.checkParams(node,!oldStrict&&!useStrict&&!isArrowFunction&&this.isSimpleParamList(node.params));node.body=this.parseBlock(false);node.expression=false;this.adaptDirectivePrologue(node.body.body);this.labels=oldLabels}this.exitFunctionScope();if(this.strict&&node.id){this.checkLVal(node.id,"none")}this.strict=oldStrict};pp$3.isSimpleParamList=function(params){for(var i=0,list=params;i<list.length;i+=1){var param=list[i];if(param.type!=="Identifier"){return false}}return true};pp$3.checkParams=function(node,allowDuplicates){var this$1=this;var nameHash={};for(var i=0,list=node.params;i<list.length;i+=1){var param=list[i];this$1.checkLVal(param,"var",allowDuplicates?null:nameHash)}};pp$3.parseExprList=function(close,allowTrailingComma,allowEmpty,refDestructuringErrors){var this$1=this;var elts=[],first=true;while(!this.eat(close)){if(!first){this$1.expect(types.comma);if(allowTrailingComma&&this$1.afterTrailingComma(close)){break}}else{first=false}var elt=void 0;if(allowEmpty&&this$1.type===types.comma){elt=null}else if(this$1.type===types.ellipsis){elt=this$1.parseSpread(refDestructuringErrors);if(refDestructuringErrors&&this$1.type===types.comma&&refDestructuringErrors.trailingComma<0){refDestructuringErrors.trailingComma=this$1.start}}else{elt=this$1.parseMaybeAssign(false,refDestructuringErrors)}elts.push(elt)}return elts};pp$3.checkUnreserved=function(ref){var start=ref.start;var end=ref.end;var name=ref.name;if(this.inGenerator&&name==="yield"){this.raiseRecoverable(start,"Can not use 'yield' as identifier inside a generator")}if(this.inAsync&&name==="await"){this.raiseRecoverable(start,"Can not use 'await' as identifier inside an async function")}if(this.isKeyword(name)){this.raise(start,"Unexpected keyword '"+name+"'")}if(this.options.ecmaVersion<6&&this.input.slice(start,end).indexOf("\\")!=-1){return}var re=this.strict?this.reservedWordsStrict:this.reservedWords;if(re.test(name)){if(!this.inAsync&&name==="await"){this.raiseRecoverable(start,"Can not use keyword 'await' outside an async function")}this.raiseRecoverable(start,"The keyword '"+name+"' is reserved")}};pp$3.parseIdent=function(liberal,isBinding){var node=this.startNode();if(liberal&&this.options.allowReserved=="never"){liberal=false}if(this.type===types.name){node.name=this.value}else if(this.type.keyword){node.name=this.type.keyword;if((node.name==="class"||node.name==="function")&&(this.lastTokEnd!==this.lastTokStart+1||this.input.charCodeAt(this.lastTokStart)!==46)){this.context.pop()}}else{this.unexpected()}this.next();this.finishNode(node,"Identifier");if(!liberal){this.checkUnreserved(node)}return node};pp$3.parseYield=function(){if(!this.yieldPos){this.yieldPos=this.start}var node=this.startNode();this.next();if(this.type==types.semi||this.canInsertSemicolon()||this.type!=types.star&&!this.type.startsExpr){node.delegate=false;node.argument=null}else{node.delegate=this.eat(types.star);node.argument=this.parseMaybeAssign()}return this.finishNode(node,"YieldExpression")};pp$3.parseAwait=function(){if(!this.awaitPos){this.awaitPos=this.start}var node=this.startNode();this.next();node.argument=this.parseMaybeUnary(null,true);return this.finishNode(node,"AwaitExpression")};var pp$4=Parser.prototype;pp$4.raise=function(pos,message){var loc=getLineInfo(this.input,pos);message+=" ("+loc.line+":"+loc.column+")";var err=new SyntaxError(message);err.pos=pos;err.loc=loc;err.raisedAt=this.pos;throw err};pp$4.raiseRecoverable=pp$4.raise;pp$4.curPosition=function(){if(this.options.locations){return new Position(this.curLine,this.pos-this.lineStart)}};var pp$5=Parser.prototype;var assign=Object.assign||function(target){var sources=[],len=arguments.length-1;while(len-- >0)sources[len]=arguments[len+1];for(var i=0,list=sources;i<list.length;i+=1){var source=list[i];for(var key in source){if(has(source,key)){target[key]=source[key]}}}return target};pp$5.enterFunctionScope=function(){this.scopeStack.push({var:{},lexical:{},childVar:{},parentLexical:{}})};pp$5.exitFunctionScope=function(){this.scopeStack.pop()};pp$5.enterLexicalScope=function(){var parentScope=this.scopeStack[this.scopeStack.length-1];var childScope={var:{},lexical:{},childVar:{},parentLexical:{}};this.scopeStack.push(childScope);assign(childScope.parentLexical,parentScope.lexical,parentScope.parentLexical)};pp$5.exitLexicalScope=function(){var childScope=this.scopeStack.pop();var parentScope=this.scopeStack[this.scopeStack.length-1];assign(parentScope.childVar,childScope.var,childScope.childVar)};pp$5.canDeclareVarName=function(name){var currentScope=this.scopeStack[this.scopeStack.length-1];return!has(currentScope.lexical,name)&&!has(currentScope.parentLexical,name)};pp$5.canDeclareLexicalName=function(name){var currentScope=this.scopeStack[this.scopeStack.length-1];return!has(currentScope.lexical,name)&&!has(currentScope.var,name)&&!has(currentScope.childVar,name)};pp$5.declareVarName=function(name){this.scopeStack[this.scopeStack.length-1].var[name]=true};pp$5.declareLexicalName=function(name){this.scopeStack[this.scopeStack.length-1].lexical[name]=true};var Node=function Node(parser,pos,loc){this.type="";this.start=pos;this.end=0;if(parser.options.locations){this.loc=new SourceLocation(parser,loc)}if(parser.options.directSourceFile){this.sourceFile=parser.options.directSourceFile}if(parser.options.ranges){this.range=[pos,0]}};var pp$6=Parser.prototype;pp$6.startNode=function(){return new Node(this,this.start,this.startLoc)};pp$6.startNodeAt=function(pos,loc){return new Node(this,pos,loc)};function finishNodeAt(node,type,pos,loc){node.type=type;node.end=pos;if(this.options.locations){node.loc.end=loc}if(this.options.ranges){node.range[1]=pos}return node}pp$6.finishNode=function(node,type){return finishNodeAt.call(this,node,type,this.lastTokEnd,this.lastTokEndLoc)};pp$6.finishNodeAt=function(node,type,pos,loc){return finishNodeAt.call(this,node,type,pos,loc)};var TokContext=function TokContext(token,isExpr,preserveSpace,override,generator){this.token=token;this.isExpr=!!isExpr;this.preserveSpace=!!preserveSpace;this.override=override;this.generator=!!generator};var types$1={b_stat:new TokContext("{",false),b_expr:new TokContext("{",true),b_tmpl:new TokContext("${",false),p_stat:new TokContext("(",false),p_expr:new TokContext("(",true),q_tmpl:new TokContext("`",true,true,function(p){return p.tryReadTemplateToken()}),f_stat:new TokContext("function",false),f_expr:new TokContext("function",true),f_expr_gen:new TokContext("function",true,false,null,true),f_gen:new TokContext("function",false,false,null,true)};var pp$7=Parser.prototype;pp$7.initialContext=function(){return[types$1.b_stat]};pp$7.braceIsBlock=function(prevType){var parent=this.curContext();if(parent===types$1.f_expr||parent===types$1.f_stat){return true}if(prevType===types.colon&&(parent===types$1.b_stat||parent===types$1.b_expr)){return!parent.isExpr}if(prevType===types._return||prevType==types.name&&this.exprAllowed){return lineBreak.test(this.input.slice(this.lastTokEnd,this.start))}if(prevType===types._else||prevType===types.semi||prevType===types.eof||prevType===types.parenR||prevType==types.arrow){return true}if(prevType==types.braceL){return parent===types$1.b_stat}if(prevType==types._var||prevType==types.name){return false}return!this.exprAllowed};pp$7.inGeneratorContext=function(){var this$1=this;for(var i=this.context.length-1;i>=1;i--){var context=this$1.context[i];if(context.token==="function"){return context.generator}}return false};pp$7.updateContext=function(prevType){var update,type=this.type;if(type.keyword&&prevType==types.dot){this.exprAllowed=false}else if(update=type.updateContext){update.call(this,prevType)}else{this.exprAllowed=type.beforeExpr}};types.parenR.updateContext=types.braceR.updateContext=function(){if(this.context.length==1){this.exprAllowed=true;return}var out=this.context.pop();if(out===types$1.b_stat&&this.curContext().token==="function"){out=this.context.pop()}this.exprAllowed=!out.isExpr};types.braceL.updateContext=function(prevType){this.context.push(this.braceIsBlock(prevType)?types$1.b_stat:types$1.b_expr);this.exprAllowed=true};types.dollarBraceL.updateContext=function(){this.context.push(types$1.b_tmpl);this.exprAllowed=true};types.parenL.updateContext=function(prevType){var statementParens=prevType===types._if||prevType===types._for||prevType===types._with||prevType===types._while;this.context.push(statementParens?types$1.p_stat:types$1.p_expr);this.exprAllowed=true};types.incDec.updateContext=function(){};types._function.updateContext=types._class.updateContext=function(prevType){if(prevType.beforeExpr&&prevType!==types.semi&&prevType!==types._else&&!((prevType===types.colon||prevType===types.braceL)&&this.curContext()===types$1.b_stat)){this.context.push(types$1.f_expr)}else{this.context.push(types$1.f_stat)}this.exprAllowed=false};types.backQuote.updateContext=function(){if(this.curContext()===types$1.q_tmpl){this.context.pop()}else{this.context.push(types$1.q_tmpl)}this.exprAllowed=false};types.star.updateContext=function(prevType){if(prevType==types._function){var index=this.context.length-1;if(this.context[index]===types$1.f_expr){this.context[index]=types$1.f_expr_gen}else{this.context[index]=types$1.f_gen}}this.exprAllowed=true};types.name.updateContext=function(prevType){var allowed=false;if(this.options.ecmaVersion>=6){if(this.value=="of"&&!this.exprAllowed||this.value=="yield"&&this.inGeneratorContext()){allowed=true}}this.exprAllowed=allowed};var data={$LONE:["ASCII","ASCII_Hex_Digit","AHex","Alphabetic","Alpha","Any","Assigned","Bidi_Control","Bidi_C","Bidi_Mirrored","Bidi_M","Case_Ignorable","CI","Cased","Changes_When_Casefolded","CWCF","Changes_When_Casemapped","CWCM","Changes_When_Lowercased","CWL","Changes_When_NFKC_Casefolded","CWKCF","Changes_When_Titlecased","CWT","Changes_When_Uppercased","CWU","Dash","Default_Ignorable_Code_Point","DI","Deprecated","Dep","Diacritic","Dia","Emoji","Emoji_Component","Emoji_Modifier","Emoji_Modifier_Base","Emoji_Presentation","Extender","Ext","Grapheme_Base","Gr_Base","Grapheme_Extend","Gr_Ext","Hex_Digit","Hex","IDS_Binary_Operator","IDSB","IDS_Trinary_Operator","IDST","ID_Continue","IDC","ID_Start","IDS","Ideographic","Ideo","Join_Control","Join_C","Logical_Order_Exception","LOE","Lowercase","Lower","Math","Noncharacter_Code_Point","NChar","Pattern_Syntax","Pat_Syn","Pattern_White_Space","Pat_WS","Quotation_Mark","QMark","Radical","Regional_Indicator","RI","Sentence_Terminal","STerm","Soft_Dotted","SD","Terminal_Punctuation","Term","Unified_Ideograph","UIdeo","Uppercase","Upper","Variation_Selector","VS","White_Space","space","XID_Continue","XIDC","XID_Start","XIDS"],General_Category:["Cased_Letter","LC","Close_Punctuation","Pe","Connector_Punctuation","Pc","Control","Cc","cntrl","Currency_Symbol","Sc","Dash_Punctuation","Pd","Decimal_Number","Nd","digit","Enclosing_Mark","Me","Final_Punctuation","Pf","Format","Cf","Initial_Punctuation","Pi","Letter","L","Letter_Number","Nl","Line_Separator","Zl","Lowercase_Letter","Ll","Mark","M","Combining_Mark","Math_Symbol","Sm","Modifier_Letter","Lm","Modifier_Symbol","Sk","Nonspacing_Mark","Mn","Number","N","Open_Punctuation","Ps","Other","C","Other_Letter","Lo","Other_Number","No","Other_Punctuation","Po","Other_Symbol","So","Paragraph_Separator","Zp","Private_Use","Co","Punctuation","P","punct","Separator","Z","Space_Separator","Zs","Spacing_Mark","Mc","Surrogate","Cs","Symbol","S","Titlecase_Letter","Lt","Unassigned","Cn","Uppercase_Letter","Lu"],Script:["Adlam","Adlm","Ahom","Anatolian_Hieroglyphs","Hluw","Arabic","Arab","Armenian","Armn","Avestan","Avst","Balinese","Bali","Bamum","Bamu","Bassa_Vah","Bass","Batak","Batk","Bengali","Beng","Bhaiksuki","Bhks","Bopomofo","Bopo","Brahmi","Brah","Braille","Brai","Buginese","Bugi","Buhid","Buhd","Canadian_Aboriginal","Cans","Carian","Cari","Caucasian_Albanian","Aghb","Chakma","Cakm","Cham","Cherokee","Cher","Common","Zyyy","Coptic","Copt","Qaac","Cuneiform","Xsux","Cypriot","Cprt","Cyrillic","Cyrl","Deseret","Dsrt","Devanagari","Deva","Duployan","Dupl","Egyptian_Hieroglyphs","Egyp","Elbasan","Elba","Ethiopic","Ethi","Georgian","Geor","Glagolitic","Glag","Gothic","Goth","Grantha","Gran","Greek","Grek","Gujarati","Gujr","Gurmukhi","Guru","Han","Hani","Hangul","Hang","Hanunoo","Hano","Hatran","Hatr","Hebrew","Hebr","Hiragana","Hira","Imperial_Aramaic","Armi","Inherited","Zinh","Qaai","Inscriptional_Pahlavi","Phli","Inscriptional_Parthian","Prti","Javanese","Java","Kaithi","Kthi","Kannada","Knda","Katakana","Kana","Kayah_Li","Kali","Kharoshthi","Khar","Khmer","Khmr","Khojki","Khoj","Khudawadi","Sind","Lao","Laoo","Latin","Latn","Lepcha","Lepc","Limbu","Limb","Linear_A","Lina","Linear_B","Linb","Lisu","Lycian","Lyci","Lydian","Lydi","Mahajani","Mahj","Malayalam","Mlym","Mandaic","Mand","Manichaean","Mani","Marchen","Marc","Masaram_Gondi","Gonm","Meetei_Mayek","Mtei","Mende_Kikakui","Mend","Meroitic_Cursive","Merc","Meroitic_Hieroglyphs","Mero","Miao","Plrd","Modi","Mongolian","Mong","Mro","Mroo","Multani","Mult","Myanmar","Mymr","Nabataean","Nbat","New_Tai_Lue","Talu","Newa","Nko","Nkoo","Nushu","Nshu","Ogham","Ogam","Ol_Chiki","Olck","Old_Hungarian","Hung","Old_Italic","Ital","Old_North_Arabian","Narb","Old_Permic","Perm","Old_Persian","Xpeo","Old_South_Arabian","Sarb","Old_Turkic","Orkh","Oriya","Orya","Osage","Osge","Osmanya","Osma","Pahawh_Hmong","Hmng","Palmyrene","Palm","Pau_Cin_Hau","Pauc","Phags_Pa","Phag","Phoenician","Phnx","Psalter_Pahlavi","Phlp","Rejang","Rjng","Runic","Runr","Samaritan","Samr","Saurashtra","Saur","Sharada","Shrd","Shavian","Shaw","Siddham","Sidd","SignWriting","Sgnw","Sinhala","Sinh","Sora_Sompeng","Sora","Soyombo","Soyo","Sundanese","Sund","Syloti_Nagri","Sylo","Syriac","Syrc","Tagalog","Tglg","Tagbanwa","Tagb","Tai_Le","Tale","Tai_Tham","Lana","Tai_Viet","Tavt","Takri","Takr","Tamil","Taml","Tangut","Tang","Telugu","Telu","Thaana","Thaa","Thai","Tibetan","Tibt","Tifinagh","Tfng","Tirhuta","Tirh","Ugaritic","Ugar","Vai","Vaii","Warang_Citi","Wara","Yi","Yiii","Zanabazar_Square","Zanb"]};Array.prototype.push.apply(data.$LONE,data.General_Category);data.gc=data.General_Category;data.sc=data.Script_Extensions=data.scx=data.Script;var pp$9=Parser.prototype;var RegExpValidationState=function RegExpValidationState(parser){this.parser=parser;this.validFlags="gim"+(parser.options.ecmaVersion>=6?"uy":"")+(parser.options.ecmaVersion>=9?"s":"");this.source="";this.flags="";this.start=0;this.switchU=false;this.switchN=false;this.pos=0;this.lastIntValue=0;this.lastStringValue="";this.lastAssertionIsQuantifiable=false;this.numCapturingParens=0;this.maxBackReference=0;this.groupNames=[];this.backReferenceNames=[]};RegExpValidationState.prototype.reset=function reset(start,pattern,flags){var unicode=flags.indexOf("u")!==-1;this.start=start|0;this.source=pattern+"";this.flags=flags;this.switchU=unicode&&this.parser.options.ecmaVersion>=6;this.switchN=unicode&&this.parser.options.ecmaVersion>=9};RegExpValidationState.prototype.raise=function raise(message){this.parser.raiseRecoverable(this.start,"Invalid regular expression: /"+this.source+"/: "+message)};RegExpValidationState.prototype.at=function at(i){var s=this.source;var l=s.length;if(i>=l){return-1}var c=s.charCodeAt(i);if(!this.switchU||c<=55295||c>=57344||i+1>=l){return c}return(c<<10)+s.charCodeAt(i+1)-56613888};RegExpValidationState.prototype.nextIndex=function nextIndex(i){var s=this.source;var l=s.length;if(i>=l){return l}var c=s.charCodeAt(i);if(!this.switchU||c<=55295||c>=57344||i+1>=l){return i+1}return i+2};RegExpValidationState.prototype.current=function current(){return this.at(this.pos)};RegExpValidationState.prototype.lookahead=function lookahead(){return this.at(this.nextIndex(this.pos))};RegExpValidationState.prototype.advance=function advance(){this.pos=this.nextIndex(this.pos)};RegExpValidationState.prototype.eat=function eat(ch){if(this.current()===ch){this.advance();return true}return false};function codePointToString$1(ch){if(ch<=65535){return String.fromCharCode(ch)}ch-=65536;return String.fromCharCode((ch>>10)+55296,(ch&1023)+56320)}pp$9.validateRegExpFlags=function(state){var this$1=this;var validFlags=state.validFlags;var flags=state.flags;for(var i=0;i<flags.length;i++){var flag=flags.charAt(i);if(validFlags.indexOf(flag)==-1){this$1.raise(state.start,"Invalid regular expression flag")}if(flags.indexOf(flag,i+1)>-1){this$1.raise(state.start,"Duplicate regular expression flag")}}};pp$9.validateRegExpPattern=function(state){this.regexp_pattern(state);if(!state.switchN&&this.options.ecmaVersion>=9&&state.groupNames.length>0){state.switchN=true;this.regexp_pattern(state)}};pp$9.regexp_pattern=function(state){state.pos=0;state.lastIntValue=0;state.lastStringValue="";state.lastAssertionIsQuantifiable=false;state.numCapturingParens=0;state.maxBackReference=0;state.groupNames.length=0;state.backReferenceNames.length=0;this.regexp_disjunction(state);if(state.pos!==state.source.length){if(state.eat(41)){state.raise("Unmatched ')'")}if(state.eat(93)||state.eat(125)){state.raise("Lone quantifier brackets")}}if(state.maxBackReference>state.numCapturingParens){state.raise("Invalid escape")}for(var i=0,list=state.backReferenceNames;i<list.length;i+=1){var name=list[i];if(state.groupNames.indexOf(name)===-1){state.raise("Invalid named capture referenced")}}};pp$9.regexp_disjunction=function(state){var this$1=this;this.regexp_alternative(state);while(state.eat(124)){this$1.regexp_alternative(state)}if(this.regexp_eatQuantifier(state,true)){state.raise("Nothing to repeat")}if(state.eat(123)){state.raise("Lone quantifier brackets")}};pp$9.regexp_alternative=function(state){while(state.pos<state.source.length&&this.regexp_eatTerm(state)){}};pp$9.regexp_eatTerm=function(state){if(this.regexp_eatAssertion(state)){if(state.lastAssertionIsQuantifiable&&this.regexp_eatQuantifier(state)){if(state.switchU){state.raise("Invalid quantifier")}}return true}if(state.switchU?this.regexp_eatAtom(state):this.regexp_eatExtendedAtom(state)){this.regexp_eatQuantifier(state);return true}return false};pp$9.regexp_eatAssertion=function(state){var start=state.pos;state.lastAssertionIsQuantifiable=false;if(state.eat(94)||state.eat(36)){return true}if(state.eat(92)){if(state.eat(66)||state.eat(98)){return true}state.pos=start}if(state.eat(40)&&state.eat(63)){var lookbehind=false;if(this.options.ecmaVersion>=9){lookbehind=state.eat(60)}if(state.eat(61)||state.eat(33)){this.regexp_disjunction(state);if(!state.eat(41)){state.raise("Unterminated group")}state.lastAssertionIsQuantifiable=!lookbehind;return true}}state.pos=start;return false};pp$9.regexp_eatQuantifier=function(state,noError){if(noError===void 0)noError=false;if(this.regexp_eatQuantifierPrefix(state,noError)){state.eat(63);return true}return false};pp$9.regexp_eatQuantifierPrefix=function(state,noError){return state.eat(42)||state.eat(43)||state.eat(63)||this.regexp_eatBracedQuantifier(state,noError)};pp$9.regexp_eatBracedQuantifier=function(state,noError){var start=state.pos;if(state.eat(123)){var min=0,max=-1;if(this.regexp_eatDecimalDigits(state)){min=state.lastIntValue;if(state.eat(44)&&this.regexp_eatDecimalDigits(state)){max=state.lastIntValue}if(state.eat(125)){if(max!==-1&&max<min&&!noError){state.raise("numbers out of order in {} quantifier")}return true}}if(state.switchU&&!noError){state.raise("Incomplete quantifier")}state.pos=start}return false};pp$9.regexp_eatAtom=function(state){return this.regexp_eatPatternCharacters(state)||state.eat(46)||this.regexp_eatReverseSolidusAtomEscape(state)||this.regexp_eatCharacterClass(state)||this.regexp_eatUncapturingGroup(state)||this.regexp_eatCapturingGroup(state)};pp$9.regexp_eatReverseSolidusAtomEscape=function(state){var start=state.pos;if(state.eat(92)){if(this.regexp_eatAtomEscape(state)){return true}state.pos=start}return false};pp$9.regexp_eatUncapturingGroup=function(state){var start=state.pos;if(state.eat(40)){if(state.eat(63)&&state.eat(58)){this.regexp_disjunction(state);if(state.eat(41)){return true}state.raise("Unterminated group")}state.pos=start}return false};pp$9.regexp_eatCapturingGroup=function(state){if(state.eat(40)){if(this.options.ecmaVersion>=9){this.regexp_groupSpecifier(state)}else if(state.current()===63){state.raise("Invalid group")}this.regexp_disjunction(state);if(state.eat(41)){state.numCapturingParens+=1;return true}state.raise("Unterminated group")}return false};pp$9.regexp_eatExtendedAtom=function(state){return state.eat(46)||this.regexp_eatReverseSolidusAtomEscape(state)||this.regexp_eatCharacterClass(state)||this.regexp_eatUncapturingGroup(state)||this.regexp_eatCapturingGroup(state)||this.regexp_eatInvalidBracedQuantifier(state)||this.regexp_eatExtendedPatternCharacter(state)};pp$9.regexp_eatInvalidBracedQuantifier=function(state){if(this.regexp_eatBracedQuantifier(state,true)){state.raise("Nothing to repeat")}return false};pp$9.regexp_eatSyntaxCharacter=function(state){var ch=state.current();if(isSyntaxCharacter(ch)){state.lastIntValue=ch;state.advance();return true}return false};function isSyntaxCharacter(ch){return ch===36||ch>=40&&ch<=43||ch===46||ch===63||ch>=91&&ch<=94||ch>=123&&ch<=125}pp$9.regexp_eatPatternCharacters=function(state){var start=state.pos;var ch=0;while((ch=state.current())!==-1&&!isSyntaxCharacter(ch)){state.advance()}return state.pos!==start};pp$9.regexp_eatExtendedPatternCharacter=function(state){var ch=state.current();if(ch!==-1&&ch!==36&&!(ch>=40&&ch<=43)&&ch!==46&&ch!==63&&ch!==91&&ch!==94&&ch!==124){state.advance();return true}return false};pp$9.regexp_groupSpecifier=function(state){if(state.eat(63)){if(this.regexp_eatGroupName(state)){if(state.groupNames.indexOf(state.lastStringValue)!==-1){state.raise("Duplicate capture group name")}state.groupNames.push(state.lastStringValue);return}state.raise("Invalid group")}};pp$9.regexp_eatGroupName=function(state){state.lastStringValue="";if(state.eat(60)){if(this.regexp_eatRegExpIdentifierName(state)&&state.eat(62)){return true}state.raise("Invalid capture group name")}return false};pp$9.regexp_eatRegExpIdentifierName=function(state){state.lastStringValue="";if(this.regexp_eatRegExpIdentifierStart(state)){state.lastStringValue+=codePointToString$1(state.lastIntValue);while(this.regexp_eatRegExpIdentifierPart(state)){state.lastStringValue+=codePointToString$1(state.lastIntValue)}return true}return false};pp$9.regexp_eatRegExpIdentifierStart=function(state){var start=state.pos;var ch=state.current();state.advance();if(ch===92&&this.regexp_eatRegExpUnicodeEscapeSequence(state)){ch=state.lastIntValue}if(isRegExpIdentifierStart(ch)){state.lastIntValue=ch;return true}state.pos=start;return false};function isRegExpIdentifierStart(ch){return isIdentifierStart(ch,true)||ch===36||ch===95}pp$9.regexp_eatRegExpIdentifierPart=function(state){var start=state.pos;var ch=state.current();state.advance();if(ch===92&&this.regexp_eatRegExpUnicodeEscapeSequence(state)){ch=state.lastIntValue}if(isRegExpIdentifierPart(ch)){state.lastIntValue=ch;return true}state.pos=start;return false};function isRegExpIdentifierPart(ch){return isIdentifierChar(ch,true)||ch===36||ch===95||ch===8204||ch===8205}pp$9.regexp_eatAtomEscape=function(state){if(this.regexp_eatBackReference(state)||this.regexp_eatCharacterClassEscape(state)||this.regexp_eatCharacterEscape(state)||state.switchN&&this.regexp_eatKGroupName(state)){return true}if(state.switchU){if(state.current()===99){state.raise("Invalid unicode escape")}state.raise("Invalid escape")}return false};pp$9.regexp_eatBackReference=function(state){var start=state.pos;if(this.regexp_eatDecimalEscape(state)){var n=state.lastIntValue;if(state.switchU){if(n>state.maxBackReference){state.maxBackReference=n}return true}if(n<=state.numCapturingParens){return true}state.pos=start}return false};pp$9.regexp_eatKGroupName=function(state){if(state.eat(107)){if(this.regexp_eatGroupName(state)){state.backReferenceNames.push(state.lastStringValue);return true}state.raise("Invalid named reference")}return false};pp$9.regexp_eatCharacterEscape=function(state){return this.regexp_eatControlEscape(state)||this.regexp_eatCControlLetter(state)||this.regexp_eatZero(state)||this.regexp_eatHexEscapeSequence(state)||this.regexp_eatRegExpUnicodeEscapeSequence(state)||!state.switchU&&this.regexp_eatLegacyOctalEscapeSequence(state)||this.regexp_eatIdentityEscape(state)};pp$9.regexp_eatCControlLetter=function(state){var start=state.pos;if(state.eat(99)){if(this.regexp_eatControlLetter(state)){return true}state.pos=start}return false};pp$9.regexp_eatZero=function(state){if(state.current()===48&&!isDecimalDigit(state.lookahead())){state.lastIntValue=0;state.advance();return true}return false};pp$9.regexp_eatControlEscape=function(state){var ch=state.current();if(ch===116){state.lastIntValue=9;state.advance();return true}if(ch===110){state.lastIntValue=10;state.advance();return true}if(ch===118){state.lastIntValue=11;state.advance();return true}if(ch===102){state.lastIntValue=12;state.advance();return true}if(ch===114){state.lastIntValue=13;state.advance();return true}return false};pp$9.regexp_eatControlLetter=function(state){var ch=state.current();if(isControlLetter(ch)){state.lastIntValue=ch%32;state.advance();return true}return false};function isControlLetter(ch){return ch>=65&&ch<=90||ch>=97&&ch<=122}pp$9.regexp_eatRegExpUnicodeEscapeSequence=function(state){var start=state.pos;if(state.eat(117)){if(this.regexp_eatFixedHexDigits(state,4)){var lead=state.lastIntValue;if(state.switchU&&lead>=55296&&lead<=56319){var leadSurrogateEnd=state.pos;if(state.eat(92)&&state.eat(117)&&this.regexp_eatFixedHexDigits(state,4)){var trail=state.lastIntValue;if(trail>=56320&&trail<=57343){state.lastIntValue=(lead-55296)*1024+(trail-56320)+65536;return true}}state.pos=leadSurrogateEnd;state.lastIntValue=lead}return true}if(state.switchU&&state.eat(123)&&this.regexp_eatHexDigits(state)&&state.eat(125)&&isValidUnicode(state.lastIntValue)){return true}if(state.switchU){state.raise("Invalid unicode escape")}state.pos=start}return false};function isValidUnicode(ch){return ch>=0&&ch<=1114111}pp$9.regexp_eatIdentityEscape=function(state){if(state.switchU){if(this.regexp_eatSyntaxCharacter(state)){return true}if(state.eat(47)){state.lastIntValue=47;return true}return false}var ch=state.current();if(ch!==99&&(!state.switchN||ch!==107)){state.lastIntValue=ch;state.advance();return true}return false};pp$9.regexp_eatDecimalEscape=function(state){state.lastIntValue=0;var ch=state.current();if(ch>=49&&ch<=57){do{state.lastIntValue=10*state.lastIntValue+(ch-48);state.advance()}while((ch=state.current())>=48&&ch<=57);return true}return false};pp$9.regexp_eatCharacterClassEscape=function(state){var ch=state.current();if(isCharacterClassEscape(ch)){state.lastIntValue=-1;state.advance();return true}if(state.switchU&&this.options.ecmaVersion>=9&&(ch===80||ch===112)){state.lastIntValue=-1;state.advance();if(state.eat(123)&&this.regexp_eatUnicodePropertyValueExpression(state)&&state.eat(125)){return true}state.raise("Invalid property name")}return false};function isCharacterClassEscape(ch){return ch===100||ch===68||ch===115||ch===83||ch===119||ch===87}pp$9.regexp_eatUnicodePropertyValueExpression=function(state){var start=state.pos;if(this.regexp_eatUnicodePropertyName(state)&&state.eat(61)){var name=state.lastStringValue;if(this.regexp_eatUnicodePropertyValue(state)){var value=state.lastStringValue;this.regexp_validateUnicodePropertyNameAndValue(state,name,value);return true}}state.pos=start;if(this.regexp_eatLoneUnicodePropertyNameOrValue(state)){var nameOrValue=state.lastStringValue;this.regexp_validateUnicodePropertyNameOrValue(state,nameOrValue);return true}return false};pp$9.regexp_validateUnicodePropertyNameAndValue=function(state,name,value){if(!data.hasOwnProperty(name)||data[name].indexOf(value)===-1){state.raise("Invalid property name")}};pp$9.regexp_validateUnicodePropertyNameOrValue=function(state,nameOrValue){if(data.$LONE.indexOf(nameOrValue)===-1){state.raise("Invalid property name")}};pp$9.regexp_eatUnicodePropertyName=function(state){var ch=0;state.lastStringValue="";while(isUnicodePropertyNameCharacter(ch=state.current())){state.lastStringValue+=codePointToString$1(ch);state.advance()}return state.lastStringValue!==""};function isUnicodePropertyNameCharacter(ch){return isControlLetter(ch)||ch===95}pp$9.regexp_eatUnicodePropertyValue=function(state){var ch=0;state.lastStringValue="";while(isUnicodePropertyValueCharacter(ch=state.current())){state.lastStringValue+=codePointToString$1(ch);state.advance()}return state.lastStringValue!==""};function isUnicodePropertyValueCharacter(ch){return isUnicodePropertyNameCharacter(ch)||isDecimalDigit(ch)}pp$9.regexp_eatLoneUnicodePropertyNameOrValue=function(state){return this.regexp_eatUnicodePropertyValue(state)};pp$9.regexp_eatCharacterClass=function(state){if(state.eat(91)){state.eat(94);this.regexp_classRanges(state);if(state.eat(93)){return true}state.raise("Unterminated character class")}return false};pp$9.regexp_classRanges=function(state){var this$1=this;while(this.regexp_eatClassAtom(state)){var left=state.lastIntValue;if(state.eat(45)&&this$1.regexp_eatClassAtom(state)){var right=state.lastIntValue;if(state.switchU&&(left===-1||right===-1)){state.raise("Invalid character class")}if(left!==-1&&right!==-1&&left>right){state.raise("Range out of order in character class")}}}};pp$9.regexp_eatClassAtom=function(state){var start=state.pos;if(state.eat(92)){if(this.regexp_eatClassEscape(state)){return true}if(state.switchU){var ch$1=state.current();if(ch$1===99||isOctalDigit(ch$1)){state.raise("Invalid class escape")}state.raise("Invalid escape")}state.pos=start}var ch=state.current();if(ch!==93){state.lastIntValue=ch;state.advance();return true}return false};pp$9.regexp_eatClassEscape=function(state){var start=state.pos;if(state.eat(98)){state.lastIntValue=8;return true}if(state.switchU&&state.eat(45)){state.lastIntValue=45;return true}if(!state.switchU&&state.eat(99)){if(this.regexp_eatClassControlLetter(state)){return true}state.pos=start}return this.regexp_eatCharacterClassEscape(state)||this.regexp_eatCharacterEscape(state)};pp$9.regexp_eatClassControlLetter=function(state){var ch=state.current();if(isDecimalDigit(ch)||ch===95){state.lastIntValue=ch%32;state.advance();return true}return false};pp$9.regexp_eatHexEscapeSequence=function(state){var start=state.pos;if(state.eat(120)){if(this.regexp_eatFixedHexDigits(state,2)){return true}if(state.switchU){state.raise("Invalid escape")}state.pos=start}return false};pp$9.regexp_eatDecimalDigits=function(state){var start=state.pos;var ch=0;state.lastIntValue=0;while(isDecimalDigit(ch=state.current())){state.lastIntValue=10*state.lastIntValue+(ch-48);state.advance()}return state.pos!==start};function isDecimalDigit(ch){return ch>=48&&ch<=57}pp$9.regexp_eatHexDigits=function(state){var start=state.pos;var ch=0;state.lastIntValue=0;while(isHexDigit(ch=state.current())){state.lastIntValue=16*state.lastIntValue+hexToInt(ch);state.advance()}return state.pos!==start};function isHexDigit(ch){return ch>=48&&ch<=57||ch>=65&&ch<=70||ch>=97&&ch<=102}function hexToInt(ch){if(ch>=65&&ch<=70){return 10+(ch-65)}if(ch>=97&&ch<=102){return 10+(ch-97)}return ch-48}pp$9.regexp_eatLegacyOctalEscapeSequence=function(state){if(this.regexp_eatOctalDigit(state)){var n1=state.lastIntValue;if(this.regexp_eatOctalDigit(state)){var n2=state.lastIntValue;if(n1<=3&&this.regexp_eatOctalDigit(state)){state.lastIntValue=n1*64+n2*8+state.lastIntValue}else{state.lastIntValue=n1*8+n2}}else{state.lastIntValue=n1}return true}return false};pp$9.regexp_eatOctalDigit=function(state){var ch=state.current();if(isOctalDigit(ch)){state.lastIntValue=ch-48;state.advance();return true}state.lastIntValue=0;return false};function isOctalDigit(ch){return ch>=48&&ch<=55}pp$9.regexp_eatFixedHexDigits=function(state,length){var start=state.pos;state.lastIntValue=0;for(var i=0;i<length;++i){var ch=state.current();if(!isHexDigit(ch)){state.pos=start;return false}state.lastIntValue=16*state.lastIntValue+hexToInt(ch);state.advance()}return true};var Token=function Token(p){this.type=p.type;this.value=p.value;this.start=p.start;this.end=p.end;if(p.options.locations){this.loc=new SourceLocation(p,p.startLoc,p.endLoc)}if(p.options.ranges){this.range=[p.start,p.end]}};var pp$8=Parser.prototype;pp$8.next=function(){if(this.options.onToken){this.options.onToken(new Token(this))}this.lastTokEnd=this.end;this.lastTokStart=this.start;this.lastTokEndLoc=this.endLoc;this.lastTokStartLoc=this.startLoc;this.nextToken()};pp$8.getToken=function(){this.next();return new Token(this)};if(typeof Symbol!=="undefined"){pp$8[Symbol.iterator]=function(){var this$1=this;return{next:function(){var token=this$1.getToken();return{done:token.type===types.eof,value:token}}}}}pp$8.curContext=function(){return this.context[this.context.length-1]};pp$8.nextToken=function(){var curContext=this.curContext();if(!curContext||!curContext.preserveSpace){this.skipSpace()}this.start=this.pos;if(this.options.locations){this.startLoc=this.curPosition()}if(this.pos>=this.input.length){return this.finishToken(types.eof)}if(curContext.override){return curContext.override(this)}else{this.readToken(this.fullCharCodeAtPos())}};pp$8.readToken=function(code){if(isIdentifierStart(code,this.options.ecmaVersion>=6)||code===92){return this.readWord()}return this.getTokenFromCode(code)};pp$8.fullCharCodeAtPos=function(){var code=this.input.charCodeAt(this.pos);if(code<=55295||code>=57344){return code}var next=this.input.charCodeAt(this.pos+1);return(code<<10)+next-56613888};pp$8.skipBlockComment=function(){var this$1=this;var startLoc=this.options.onComment&&this.curPosition();var start=this.pos,end=this.input.indexOf("*/",this.pos+=2);if(end===-1){this.raise(this.pos-2,"Unterminated comment")}this.pos=end+2;if(this.options.locations){lineBreakG.lastIndex=start;var match;while((match=lineBreakG.exec(this.input))&&match.index<this.pos){++this$1.curLine;this$1.lineStart=match.index+match[0].length}}if(this.options.onComment){this.options.onComment(true,this.input.slice(start+2,end),start,this.pos,startLoc,this.curPosition())}};pp$8.skipLineComment=function(startSkip){var this$1=this;var start=this.pos;var startLoc=this.options.onComment&&this.curPosition();var ch=this.input.charCodeAt(this.pos+=startSkip);while(this.pos<this.input.length&&!isNewLine(ch)){ch=this$1.input.charCodeAt(++this$1.pos)}if(this.options.onComment){this.options.onComment(false,this.input.slice(start+startSkip,this.pos),start,this.pos,startLoc,this.curPosition())}};pp$8.skipSpace=function(){var this$1=this;loop:while(this.pos<this.input.length){var ch=this$1.input.charCodeAt(this$1.pos);switch(ch){case 32:case 160:++this$1.pos;break;case 13:if(this$1.input.charCodeAt(this$1.pos+1)===10){++this$1.pos}case 10:case 8232:case 8233:++this$1.pos;if(this$1.options.locations){++this$1.curLine;this$1.lineStart=this$1.pos}break;case 47:switch(this$1.input.charCodeAt(this$1.pos+1)){case 42:this$1.skipBlockComment();break;case 47:this$1.skipLineComment(2);break;default:break loop}break;default:if(ch>8&&ch<14||ch>=5760&&nonASCIIwhitespace.test(String.fromCharCode(ch))){++this$1.pos}else{break loop}}}};pp$8.finishToken=function(type,val){this.end=this.pos;if(this.options.locations){this.endLoc=this.curPosition()}var prevType=this.type;this.type=type;this.value=val;this.updateContext(prevType)};pp$8.readToken_dot=function(){var next=this.input.charCodeAt(this.pos+1);if(next>=48&&next<=57){return this.readNumber(true)}var next2=this.input.charCodeAt(this.pos+2);if(this.options.ecmaVersion>=6&&next===46&&next2===46){this.pos+=3;return this.finishToken(types.ellipsis)}else{++this.pos;return this.finishToken(types.dot)}};pp$8.readToken_slash=function(){var next=this.input.charCodeAt(this.pos+1);if(this.exprAllowed){++this.pos;return this.readRegexp()}if(next===61){return this.finishOp(types.assign,2)}return this.finishOp(types.slash,1)};pp$8.readToken_mult_modulo_exp=function(code){var next=this.input.charCodeAt(this.pos+1);var size=1;var tokentype=code===42?types.star:types.modulo;if(this.options.ecmaVersion>=7&&code==42&&next===42){++size;tokentype=types.starstar;next=this.input.charCodeAt(this.pos+2)}if(next===61){return this.finishOp(types.assign,size+1)}return this.finishOp(tokentype,size)};pp$8.readToken_pipe_amp=function(code){var next=this.input.charCodeAt(this.pos+1);if(next===code){return this.finishOp(code===124?types.logicalOR:types.logicalAND,2)}if(next===61){return this.finishOp(types.assign,2)}return this.finishOp(code===124?types.bitwiseOR:types.bitwiseAND,1)};pp$8.readToken_caret=function(){var next=this.input.charCodeAt(this.pos+1);if(next===61){return this.finishOp(types.assign,2)}return this.finishOp(types.bitwiseXOR,1)};pp$8.readToken_plus_min=function(code){var next=this.input.charCodeAt(this.pos+1);if(next===code){if(next==45&&!this.inModule&&this.input.charCodeAt(this.pos+2)==62&&(this.lastTokEnd===0||lineBreak.test(this.input.slice(this.lastTokEnd,this.pos)))){this.skipLineComment(3);this.skipSpace();return this.nextToken()}return this.finishOp(types.incDec,2)}if(next===61){return this.finishOp(types.assign,2)}return this.finishOp(types.plusMin,1)};pp$8.readToken_lt_gt=function(code){var next=this.input.charCodeAt(this.pos+1);var size=1;if(next===code){size=code===62&&this.input.charCodeAt(this.pos+2)===62?3:2;if(this.input.charCodeAt(this.pos+size)===61){return this.finishOp(types.assign,size+1)}return this.finishOp(types.bitShift,size)}if(next==33&&code==60&&!this.inModule&&this.input.charCodeAt(this.pos+2)==45&&this.input.charCodeAt(this.pos+3)==45){this.skipLineComment(4);this.skipSpace();return this.nextToken()}if(next===61){size=2}return this.finishOp(types.relational,size)};pp$8.readToken_eq_excl=function(code){var next=this.input.charCodeAt(this.pos+1);if(next===61){return this.finishOp(types.equality,this.input.charCodeAt(this.pos+2)===61?3:2)}if(code===61&&next===62&&this.options.ecmaVersion>=6){this.pos+=2;return this.finishToken(types.arrow)}return this.finishOp(code===61?types.eq:types.prefix,1)};pp$8.getTokenFromCode=function(code){switch(code){case 46:return this.readToken_dot();case 40:++this.pos;return this.finishToken(types.parenL);case 41:++this.pos;return this.finishToken(types.parenR);case 59:++this.pos;return this.finishToken(types.semi);case 44:++this.pos;return this.finishToken(types.comma);case 91:++this.pos;return this.finishToken(types.bracketL);case 93:++this.pos;return this.finishToken(types.bracketR);case 123:++this.pos;return this.finishToken(types.braceL);case 125:++this.pos;return this.finishToken(types.braceR);case 58:++this.pos;return this.finishToken(types.colon);case 63:++this.pos;return this.finishToken(types.question);case 96:if(this.options.ecmaVersion<6){break}++this.pos;return this.finishToken(types.backQuote);case 48:var next=this.input.charCodeAt(this.pos+1);if(next===120||next===88){return this.readRadixNumber(16)}if(this.options.ecmaVersion>=6){if(next===111||next===79){return this.readRadixNumber(8)}if(next===98||next===66){return this.readRadixNumber(2)}}case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return this.readNumber(false);case 34:case 39:return this.readString(code);case 47:return this.readToken_slash();case 37:case 42:return this.readToken_mult_modulo_exp(code);case 124:case 38:return this.readToken_pipe_amp(code);case 94:return this.readToken_caret();case 43:case 45:return this.readToken_plus_min(code);case 60:case 62:return this.readToken_lt_gt(code);case 61:case 33:return this.readToken_eq_excl(code);case 126:return this.finishOp(types.prefix,1)}this.raise(this.pos,"Unexpected character '"+codePointToString(code)+"'")};pp$8.finishOp=function(type,size){var str=this.input.slice(this.pos,this.pos+size);this.pos+=size;return this.finishToken(type,str)};pp$8.readRegexp=function(){var this$1=this;var escaped,inClass,start=this.pos;for(;;){if(this$1.pos>=this$1.input.length){this$1.raise(start,"Unterminated regular expression")}var ch=this$1.input.charAt(this$1.pos);if(lineBreak.test(ch)){this$1.raise(start,"Unterminated regular expression")}if(!escaped){if(ch==="["){inClass=true}else if(ch==="]"&&inClass){inClass=false}else if(ch==="/"&&!inClass){break}escaped=ch==="\\"}else{escaped=false}++this$1.pos}var pattern=this.input.slice(start,this.pos);++this.pos;var flagsStart=this.pos;var flags=this.readWord1();if(this.containsEsc){this.unexpected(flagsStart)}var state=this.regexpState||(this.regexpState=new RegExpValidationState(this));state.reset(start,pattern,flags);this.validateRegExpFlags(state);this.validateRegExpPattern(state);var value=null;try{value=new RegExp(pattern,flags)}catch(e){}return this.finishToken(types.regexp,{pattern:pattern,flags:flags,value:value})};pp$8.readInt=function(radix,len){var this$1=this;var start=this.pos,total=0;for(var i=0,e=len==null?Infinity:len;i<e;++i){var code=this$1.input.charCodeAt(this$1.pos),val=void 0;if(code>=97){val=code-97+10}else if(code>=65){val=code-65+10}else if(code>=48&&code<=57){val=code-48}else{val=Infinity}if(val>=radix){break}++this$1.pos;total=total*radix+val}if(this.pos===start||len!=null&&this.pos-start!==len){return null}return total};pp$8.readRadixNumber=function(radix){this.pos+=2;var val=this.readInt(radix);if(val==null){this.raise(this.start+2,"Expected number in radix "+radix)}if(isIdentifierStart(this.fullCharCodeAtPos())){this.raise(this.pos,"Identifier directly after number")}return this.finishToken(types.num,val)};pp$8.readNumber=function(startsWithDot){var start=this.pos;if(!startsWithDot&&this.readInt(10)===null){this.raise(start,"Invalid number")}var octal=this.pos-start>=2&&this.input.charCodeAt(start)===48;if(octal&&this.strict){this.raise(start,"Invalid number")}if(octal&&/[89]/.test(this.input.slice(start,this.pos))){octal=false}var next=this.input.charCodeAt(this.pos);if(next===46&&!octal){++this.pos;this.readInt(10);next=this.input.charCodeAt(this.pos)}if((next===69||next===101)&&!octal){next=this.input.charCodeAt(++this.pos);if(next===43||next===45){++this.pos}if(this.readInt(10)===null){this.raise(start,"Invalid number")}}if(isIdentifierStart(this.fullCharCodeAtPos())){this.raise(this.pos,"Identifier directly after number")}var str=this.input.slice(start,this.pos);var val=octal?parseInt(str,8):parseFloat(str);return this.finishToken(types.num,val)};pp$8.readCodePoint=function(){var ch=this.input.charCodeAt(this.pos),code;if(ch===123){if(this.options.ecmaVersion<6){this.unexpected()}var codePos=++this.pos;code=this.readHexChar(this.input.indexOf("}",this.pos)-this.pos);++this.pos;if(code>1114111){this.invalidStringToken(codePos,"Code point out of bounds")}}else{code=this.readHexChar(4)}return code};function codePointToString(code){if(code<=65535){return String.fromCharCode(code)}code-=65536;return String.fromCharCode((code>>10)+55296,(code&1023)+56320)}pp$8.readString=function(quote){var this$1=this;var out="",chunkStart=++this.pos;for(;;){if(this$1.pos>=this$1.input.length){this$1.raise(this$1.start,"Unterminated string constant")}var ch=this$1.input.charCodeAt(this$1.pos);if(ch===quote){break}if(ch===92){out+=this$1.input.slice(chunkStart,this$1.pos);out+=this$1.readEscapedChar(false);chunkStart=this$1.pos}else{if(isNewLine(ch)){this$1.raise(this$1.start,"Unterminated string constant")}++this$1.pos}}out+=this.input.slice(chunkStart,this.pos++);return this.finishToken(types.string,out)};var INVALID_TEMPLATE_ESCAPE_ERROR={};pp$8.tryReadTemplateToken=function(){this.inTemplateElement=true;try{this.readTmplToken()}catch(err){if(err===INVALID_TEMPLATE_ESCAPE_ERROR){this.readInvalidTemplateToken()}else{throw err}}this.inTemplateElement=false};pp$8.invalidStringToken=function(position,message){if(this.inTemplateElement&&this.options.ecmaVersion>=9){throw INVALID_TEMPLATE_ESCAPE_ERROR}else{this.raise(position,message)}};pp$8.readTmplToken=function(){var this$1=this;var out="",chunkStart=this.pos;for(;;){if(this$1.pos>=this$1.input.length){this$1.raise(this$1.start,"Unterminated template")}var ch=this$1.input.charCodeAt(this$1.pos);if(ch===96||ch===36&&this$1.input.charCodeAt(this$1.pos+1)===123){if(this$1.pos===this$1.start&&(this$1.type===types.template||this$1.type===types.invalidTemplate)){if(ch===36){this$1.pos+=2;return this$1.finishToken(types.dollarBraceL)}else{++this$1.pos;return this$1.finishToken(types.backQuote)}}out+=this$1.input.slice(chunkStart,this$1.pos);return this$1.finishToken(types.template,out)}if(ch===92){out+=this$1.input.slice(chunkStart,this$1.pos);out+=this$1.readEscapedChar(true);chunkStart=this$1.pos}else if(isNewLine(ch)){out+=this$1.input.slice(chunkStart,this$1.pos);++this$1.pos;switch(ch){case 13:if(this$1.input.charCodeAt(this$1.pos)===10){++this$1.pos}case 10:out+="\n";break;default:out+=String.fromCharCode(ch);break}if(this$1.options.locations){++this$1.curLine;this$1.lineStart=this$1.pos}chunkStart=this$1.pos}else{++this$1.pos}}};pp$8.readInvalidTemplateToken=function(){var this$1=this;for(;this.pos<this.input.length;this.pos++){switch(this$1.input[this$1.pos]){case"\\":++this$1.pos;break;case"$":if(this$1.input[this$1.pos+1]!=="{"){break}case"`":return this$1.finishToken(types.invalidTemplate,this$1.input.slice(this$1.start,this$1.pos))}}this.raise(this.start,"Unterminated template")};pp$8.readEscapedChar=function(inTemplate){var ch=this.input.charCodeAt(++this.pos);++this.pos;switch(ch){case 110:return"\n";case 114:return"\r";case 120:return String.fromCharCode(this.readHexChar(2));case 117:return codePointToString(this.readCodePoint());case 116:return"\t";case 98:return"\b";case 118:return"\v";case 102:return"\f";case 13:if(this.input.charCodeAt(this.pos)===10){++this.pos}case 10:if(this.options.locations){this.lineStart=this.pos;++this.curLine}return"";default:if(ch>=48&&ch<=55){var octalStr=this.input.substr(this.pos-1,3).match(/^[0-7]+/)[0];var octal=parseInt(octalStr,8);if(octal>255){octalStr=octalStr.slice(0,-1);octal=parseInt(octalStr,8)}this.pos+=octalStr.length-1;ch=this.input.charCodeAt(this.pos);if((octalStr!=="0"||ch==56||ch==57)&&(this.strict||inTemplate)){this.invalidStringToken(this.pos-1-octalStr.length,inTemplate?"Octal literal in template string":"Octal literal in strict mode")}return String.fromCharCode(octal)}return String.fromCharCode(ch)}};pp$8.readHexChar=function(len){var codePos=this.pos;var n=this.readInt(16,len);if(n===null){this.invalidStringToken(codePos,"Bad character escape sequence")}return n};pp$8.readWord1=function(){var this$1=this;this.containsEsc=false;var word="",first=true,chunkStart=this.pos;var astral=this.options.ecmaVersion>=6;while(this.pos<this.input.length){var ch=this$1.fullCharCodeAtPos();if(isIdentifierChar(ch,astral)){this$1.pos+=ch<=65535?1:2}else if(ch===92){this$1.containsEsc=true;word+=this$1.input.slice(chunkStart,this$1.pos);var escStart=this$1.pos;if(this$1.input.charCodeAt(++this$1.pos)!=117){this$1.invalidStringToken(this$1.pos,"Expecting Unicode escape sequence \\uXXXX")}++this$1.pos;var esc=this$1.readCodePoint();if(!(first?isIdentifierStart:isIdentifierChar)(esc,astral)){this$1.invalidStringToken(escStart,"Invalid Unicode escape")}word+=codePointToString(esc);chunkStart=this$1.pos}else{break}first=false}return word+this.input.slice(chunkStart,this.pos)};pp$8.readWord=function(){var word=this.readWord1();var type=types.name;if(this.keywords.test(word)){if(this.containsEsc){this.raiseRecoverable(this.start,"Escape sequence in keyword "+word)}type=keywords$1[word]}return this.finishToken(type,word)};var version="5.5.3";function parse(input,options){return new Parser(options,input).parse()}function parseExpressionAt(input,pos,options){var p=new Parser(options,input,pos);p.nextToken();return p.parseExpression()}function tokenizer(input,options){return new Parser(options,input)}var parse_dammit;var LooseParser;var pluginsLoose;function addLooseExports(parse,Parser$$1,plugins$$1){parse_dammit=parse;LooseParser=Parser$$1;pluginsLoose=plugins$$1}},function(module,exports,__webpack_require__){"use strict";var utils=__webpack_require__(1);var kernelRunShortcut=__webpack_require__(13);function removeFnNoise(fn){if(/^function /.test(fn)){fn=fn.substring(9)}return fn.replace(/[_]typeof/g,"typeof")}function removeNoise(str){return str.replace(/[_]typeof/g,"typeof")}module.exports=function(gpuKernel,name){return"() => {\n    "+kernelRunShortcut.toString()+";\n    const utils = {\n      allPropertiesOf: "+removeNoise(utils.allPropertiesOf.toString())+",\n      clone: "+removeNoise(utils.clone.toString())+",\n      splitArray: "+removeNoise(utils.splitArray.toString())+",\n      getArgumentType: "+removeNoise(utils.getArgumentType.toString())+",\n      getDimensions: "+removeNoise(utils.getDimensions.toString())+",\n      dimToTexSize: "+removeNoise(utils.dimToTexSize.toString())+",\n      flattenTo: "+removeNoise(utils.flattenTo.toString())+",\n      flatten2dArrayTo: "+removeNoise(utils.flatten2dArrayTo.toString())+",\n      flatten3dArrayTo: "+removeNoise(utils.flatten3dArrayTo.toString())+",\n      systemEndianness: '"+removeNoise(utils.systemEndianness())+"',\n      initWebGl: "+removeNoise(utils.initWebGl.toString())+",\n      isArray: "+removeNoise(utils.isArray.toString())+"\n    };\n    const Utils = utils;\n    const canvases = [];\n    const maxTexSizes = {};\n    class "+(name||"Kernel")+" {\n      constructor() {\n        this.maxTexSize = null;\n        this.argumentsLength = 0;\n        this._canvas = null;\n        this._webGl = null;\n        this.built = false;\n        this.program = null;\n        this.paramNames = "+JSON.stringify(gpuKernel.paramNames)+";\n        this.paramTypes = "+JSON.stringify(gpuKernel.paramTypes)+";\n        this.texSize = "+JSON.stringify(gpuKernel.texSize)+";\n        this.output = "+JSON.stringify(gpuKernel.output)+";\n        this.compiledFragShaderString = `"+gpuKernel.compiledFragShaderString+"`;\n\t\t    this.compiledVertShaderString = `"+gpuKernel.compiledVertShaderString+"`;\n\t\t    this.programUniformLocationCache = {};\n\t\t    this.textureCache = {};\n\t\t    this.subKernelOutputTextures = null;\n\t\t    this.subKernelOutputVariableNames = null;\n\t\t    this.uniform1fCache = {};\n\t\t    this.uniform1iCache = {};\n\t\t    this.uniform2fCache = {};\n\t\t    this.uniform2fvCache = {};\n\t\t    this.uniform3fvCache = {};\n      }\n      "+removeFnNoise(gpuKernel._getFragShaderString.toString())+"\n      "+removeFnNoise(gpuKernel._getVertShaderString.toString())+"\n      validateOptions() {}\n      setupParams() {}\n      setCanvas(canvas) { this._canvas = canvas; return this; }\n      setWebGl(webGl) { this._webGl = webGl; return this; }\n      "+removeFnNoise(gpuKernel.getUniformLocation.toString())+"\n      "+removeFnNoise(gpuKernel.setupParams.toString())+"\n      "+removeFnNoise(gpuKernel.build.toString())+"\n\t\t  "+removeFnNoise(gpuKernel.run.toString())+"\n\t\t  "+removeFnNoise(gpuKernel._addArgument.toString())+"\n\t\t  "+removeFnNoise(gpuKernel.getArgumentTexture.toString())+"\n\t\t  "+removeFnNoise(gpuKernel.getTextureCache.toString())+"\n\t\t  "+removeFnNoise(gpuKernel.getOutputTexture.toString())+"\n\t\t  "+removeFnNoise(gpuKernel.renderOutput.toString())+"\n\t\t  "+removeFnNoise(gpuKernel.updateMaxTexSize.toString())+"\n\t\t  "+removeFnNoise(gpuKernel._setupOutputTexture.toString())+"\n\t\t  "+removeFnNoise(gpuKernel.detachTextureCache.toString())+"\n\t\t  "+removeFnNoise(gpuKernel.setUniform1f.toString())+"\n\t\t  "+removeFnNoise(gpuKernel.setUniform1i.toString())+"\n\t\t  "+removeFnNoise(gpuKernel.setUniform2f.toString())+"\n\t\t  "+removeFnNoise(gpuKernel.setUniform2fv.toString())+"\n\t\t  "+removeFnNoise(gpuKernel.setUniform3fv.toString())+" \n    };\n    return kernelRunShortcut(new Kernel());\n  };"}},function(module,exports,__webpack_require__){"use strict";module.exports="precision highp float;\nprecision highp int;\nprecision highp sampler2D;\n\nattribute highp vec2 aPos;\nattribute highp vec2 aTexCoord;\n\nvarying highp vec2 vTexCoord;\nuniform vec2 ratio;\n\nvoid main(void) {\n  gl_Position = vec4((aPos + vec2(1)) * ratio + vec2(-1), 0, 1);\n  vTexCoord = aTexCoord;\n}"},function(module,exports,__webpack_require__){"use strict";module.exports="__HEADER__;\nprecision highp float;\nprecision highp int;\nprecision highp sampler2D;\n\nconst float LOOP_MAX = __LOOP_MAX__;\n#define EPSILON 0.0000001;\n\n__CONSTANTS__;\n\nvarying highp vec2 vTexCoord;\n\nvec4 round(vec4 x) {\n  return floor(x + 0.5);\n}\n\nhighp float round(highp float x) {\n  return floor(x + 0.5);\n}\n\nvec2 integerMod(vec2 x, float y) {\n  vec2 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec3 integerMod(vec3 x, float y) {\n  vec3 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec4 integerMod(vec4 x, vec4 y) {\n  vec4 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nhighp float integerMod(highp float x, highp float y) {\n  highp float res = floor(mod(x, y));\n  return res * (res > floor(y) - 1.0 ? 0.0 : 1.0);\n}\n\nhighp int integerMod(highp int x, highp int y) {\n  return int(integerMod(float(x), float(y)));\n}\n\n// Here be dragons!\n// DO NOT OPTIMIZE THIS CODE\n// YOU WILL BREAK SOMETHING ON SOMEBODY'S MACHINE\n// LEAVE IT AS IT IS, LEST YOU WASTE YOUR OWN TIME\nconst vec2 MAGIC_VEC = vec2(1.0, -256.0);\nconst vec4 SCALE_FACTOR = vec4(1.0, 256.0, 65536.0, 0.0);\nconst vec4 SCALE_FACTOR_INV = vec4(1.0, 0.00390625, 0.0000152587890625, 0.0); // 1, 1/256, 1/65536\nhighp float decode32(highp vec4 rgba) {\n  __DECODE32_ENDIANNESS__;\n  rgba *= 255.0;\n  vec2 gte128;\n  gte128.x = rgba.b >= 128.0 ? 1.0 : 0.0;\n  gte128.y = rgba.a >= 128.0 ? 1.0 : 0.0;\n  float exponent = 2.0 * rgba.a - 127.0 + dot(gte128, MAGIC_VEC);\n  float res = exp2(round(exponent));\n  rgba.b = rgba.b - 128.0 * gte128.x;\n  res = dot(rgba, SCALE_FACTOR) * exp2(round(exponent-23.0)) + res;\n  res *= gte128.y * -2.0 + 1.0;\n  return res;\n}\n\nhighp vec4 encode32(highp float f) {\n  highp float F = abs(f);\n  highp float sign = f < 0.0 ? 1.0 : 0.0;\n  highp float exponent = floor(log2(F));\n  highp float mantissa = (exp2(-exponent) * F);\n  // exponent += floor(log2(mantissa));\n  vec4 rgba = vec4(F * exp2(23.0-exponent)) * SCALE_FACTOR_INV;\n  rgba.rg = integerMod(rgba.rg, 256.0);\n  rgba.b = integerMod(rgba.b, 128.0);\n  rgba.a = exponent*0.5 + 63.5;\n  rgba.ba += vec2(integerMod(exponent+127.0, 2.0), sign) * 128.0;\n  rgba = floor(rgba);\n  rgba *= 0.003921569; // 1/255\n  __ENCODE32_ENDIANNESS__;\n  return rgba;\n}\n// Dragons end here\n\nhighp float index;\nhighp vec3 threadId;\n\nhighp vec3 indexTo3D(highp float idx, highp vec3 texDim) {\n  highp float z = floor(idx / (texDim.x * texDim.y));\n  idx -= z * texDim.x * texDim.y;\n  highp float y = floor(idx / texDim.x);\n  highp float x = integerMod(idx, texDim.x);\n  return vec3(x, y, z);\n}\n\nhighp float get(highp sampler2D tex, highp vec2 texSize, highp vec3 texDim, highp float z, highp float y, highp float x) {\n  highp vec3 xyz = vec3(x, y, z);\n  xyz = floor(xyz + 0.5);\n  __GET_WRAPAROUND__;\n  highp float index = round(xyz.x + texDim.x * (xyz.y + texDim.y * xyz.z));\n  __GET_TEXTURE_CHANNEL__;\n  highp float w = round(texSize.x);\n  vec2 st = vec2(integerMod(index, w), float(int(index) / int(w))) + 0.5;\n  __GET_TEXTURE_INDEX__;\n  highp vec4 texel = texture2D(tex, st / texSize);\n  __GET_RESULT__;\n}\n\nhighp float get(highp sampler2D tex, highp vec2 texSize, highp vec3 texDim, highp float y, highp float x) {\n  return get(tex, texSize, texDim, 0.0, y, x);\n}\n\nhighp float get(highp sampler2D tex, highp vec2 texSize, highp vec3 texDim, highp float x) {\n  return get(tex, texSize, texDim, 0.0, 0.0, x);\n}\n\nhighp vec4 actualColor;\nvoid color(float r, float g, float b, float a) {\n  actualColor = vec4(r,g,b,a);\n}\n\nvoid color(float r, float g, float b) {\n  color(r,g,b,1.0);\n}\n\n__MAIN_PARAMS__;\n__MAIN_CONSTANTS__;\n__KERNEL__;\n\nvoid main(void) {\n  index = floor(vTexCoord.s * float(uTexSize.x)) + floor(vTexCoord.t * float(uTexSize.y)) * uTexSize.x;\n  __MAIN_RESULT__;\n}"},function(module,exports,__webpack_require__){"use strict";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function")}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return call&&(typeof call==="object"||typeof call==="function")?call:self}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass)}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass}var utils=__webpack_require__(1);var WebGLRunner=__webpack_require__(14);var WebGL2Runner=__webpack_require__(23);var CPURunner=__webpack_require__(20);var WebGLValidatorKernel=__webpack_require__(38);var WebGL2ValidatorKernel=__webpack_require__(37);var GPUCore=__webpack_require__(36);var GPU=function(_GPUCore){_inherits(GPU,_GPUCore);function GPU(settings){_classCallCheck(this,GPU);var _this=_possibleConstructorReturn(this,(GPU.__proto__||Object.getPrototypeOf(GPU)).call(this,settings));settings=settings||{};_this._canvas=settings.canvas||null;_this._webGl=settings.webGl||null;var mode=settings.mode;var detectedMode=void 0;if(!utils.isWebGlSupported()){if(mode&&mode!=="cpu"){throw new Error('A requested mode of "'+mode+'" and is not supported')}else{console.warn("Warning: gpu not supported, falling back to cpu support");detectedMode="cpu"}}else{detectedMode=mode||"gpu"}_this.kernels=[];var runnerSettings={canvas:_this._canvas,webGl:_this._webGl};switch(detectedMode){case"cpu":_this._runner=new CPURunner(runnerSettings);break;case"gpu":var Runner=_this.getGPURunner();_this._runner=new Runner(runnerSettings);break;case"webgl2":_this._runner=new WebGL2Runner(runnerSettings);break;case"webgl":_this._runner=new WebGLRunner(runnerSettings);break;case"webgl2-validator":_this._runner=new WebGL2Runner(runnerSettings);_this._runner.Kernel=WebGL2ValidatorKernel;break;case"webgl-validator":_this._runner=new WebGLRunner(runnerSettings);_this._runner.Kernel=WebGLValidatorKernel;break;default:throw new Error('"'+mode+'" mode is not defined')}return _this}_createClass(GPU,[{key:"createKernel",value:function createKernel(fn,settings){if(typeof fn==="undefined"){throw"Missing fn parameter"}if(!utils.isFunction(fn)&&typeof fn!=="string"){throw"fn parameter not a function"}var kernel=this._runner.buildKernel(fn,settings||{});if(!this._canvas){this._canvas=kernel.getCanvas()}if(!this._runner.canvas){this._runner.canvas=kernel.getCanvas()}this.kernels.push(kernel);return kernel}},{key:"createKernelMap",value:function createKernelMap(){var fn=void 0;var settings=void 0;if(typeof arguments[arguments.length-2]==="function"){fn=arguments[arguments.length-2];settings=arguments[arguments.length-1]}else{fn=arguments[arguments.length-1]}if(!utils.isWebGlDrawBuffersSupported()){this._runner=new CPURunner(settings)}var kernel=this.createKernel(fn,settings);if(Array.isArray(arguments[0])){var functions=arguments[0];for(var i=0;i<functions.length;i++){kernel.addSubKernel(functions[i])}}else{var _functions=arguments[0];for(var p in _functions){if(!_functions.hasOwnProperty(p))continue;kernel.addSubKernelProperty(p,_functions[p])}}return kernel}},{key:"combineKernels",value:function combineKernels(){var lastKernel=arguments[arguments.length-2];var combinedKernel=arguments[arguments.length-1];if(this.getMode()==="cpu")return combinedKernel;var canvas=arguments[0].getCanvas();var webGl=arguments[0].getWebGl();for(var i=0;i<arguments.length-1;i++){arguments[i].setCanvas(canvas).setWebGl(webGl).setOutputToTexture(true)}return function(){combinedKernel.apply(null,arguments);var texSize=lastKernel.texSize;var gl=lastKernel.getWebGl();var threadDim=lastKernel.threadDim;var result=void 0;if(lastKernel.floatOutput){result=new Float32Array(texSize[0]*texSize[1]*4);gl.readPixels(0,0,texSize[0],texSize[1],gl.RGBA,gl.FLOAT,result)}else{var bytes=new Uint8Array(texSize[0]*texSize[1]*4);gl.readPixels(0,0,texSize[0],texSize[1],gl.RGBA,gl.UNSIGNED_BYTE,bytes);result=new Float32Array(bytes.buffer)}result=result.subarray(0,threadDim[0]*threadDim[1]*threadDim[2]);if(lastKernel.output.length===1){return result}else if(lastKernel.output.length===2){return utils.splitArray(result,lastKernel.output[0])}else if(lastKernel.output.length===3){var cube=utils.splitArray(result,lastKernel.output[0]*lastKernel.output[1]);return cube.map(function(x){return utils.splitArray(x,lastKernel.output[0])})}}}},{key:"getGPURunner",value:function getGPURunner(){if(typeof WebGL2RenderingContext!=="undefined")return WebGL2Runner;if(typeof WebGLRenderingContext!=="undefined")return WebGLRunner}},{key:"addFunction",value:function addFunction(fn,paramTypes,returnType){this._runner.functionBuilder.addFunction(null,fn,paramTypes,returnType);return this}},{key:"addNativeFunction",value:function addNativeFunction(name,nativeFunction){this._runner.functionBuilder.addNativeFunction(name,nativeFunction);return this}},{key:"getMode",value:function getMode(){return this._runner.getMode()}},{key:"isWebGlSupported",value:function isWebGlSupported(){return utils.isWebGlSupported()}},{key:"getCanvas",value:function getCanvas(){return this._canvas}},{key:"getWebGl",value:function getWebGl(){return this._webGl}}]);return GPU}(GPUCore);Object.assign(GPU,GPUCore);module.exports=GPU},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);var gpu_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(9);var gpu_js__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(gpu_js__WEBPACK_IMPORTED_MODULE_0__);function kernel(width,height,canvas){const gpu=new gpu_js__WEBPACK_IMPORTED_MODULE_0___default.a;return gpu.createKernel(function(d,w,min,max,scaleFn){const x=this.thread.x;const y=this.thread.y*w;const index=x+y;const value=d[index];const range=1;let v=0;if(scaleFn===0){v=(value-min)*(range/(max-min))}else if(scaleFn===1){v=Math.sqrt((value-min)*(range/(max-min)))}else if(scaleFn===2){v=Math.pow((value-min)*(range/(max-min)),.333)}else if(scaleFn===3){v=Math.log((value-min)*(range/(max-min)))}else if(scaleFn===4){v=Math.log(Math.log((value-min)*(range/(max-min))))}else if(scaleFn===5){v=Math.sqrt(Math.log((value-min)*(range/(max-min))))}else{v=value}this.color(v,v,v,1)},{canvas:canvas}).setOutput([width,height]).setGraphical(true)}__webpack_exports__["default"]=kernel},function(module,exports,__webpack_require__){"use strict";var __decorate=this&&this.__decorate||function(decorators,target,key,desc){var c=arguments.length,r=c<3?target:desc===null?desc=Object.getOwnPropertyDescriptor(target,key):desc,d;if(typeof Reflect==="object"&&typeof Reflect.decorate==="function")r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)if(d=decorators[i])r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r;return c>3&&r&&Object.defineProperty(target,key,r),r};Object.defineProperty(exports,"__esModule",{value:true});var mobx_1=__webpack_require__(2);var gpuKernel_1=__webpack_require__(47);var scaleFunctions_1=__webpack_require__(30);var Image=function(){function Image(id,imageData,metaData,header){this.stats={min:0,max:0,sum:0,sum2:0,range:0,stdDev:0,histo:new Array(600).fill(0),histomax:0};this.min=0;this.max=500;this.scaleMode=0;this.id=id;this.imageData=imageData;this.metaData=metaData;this.header=header;this.calulateStats()}Image.prototype.initRenderer=function(canvas){canvas.getContext("webgl2",{preserveDrawingBuffer:true});this.renderer=gpuKernel_1.default(this.metaData.width,this.metaData.height,canvas);this.render()};Image.prototype.render=function(){this.renderer(this.imageData,this.metaData.width,this.min,this.max,this.scaleMode)};Image.prototype.updateScaleMode=function(scaleMode){this.scaleMode=scaleFunctions_1.default.indexOf(scaleMode);this.render()};Image.prototype.calulateStats=function(){for(var _i=0,_a=this.imageData;_i<_a.length;_i++){var intensity=_a[_i];if(intensity>this.stats.max){this.stats.max=intensity}if(intensity<this.stats.min){this.stats.min=intensity}this.stats.sum+=intensity;this.stats.sum2+=intensity*intensity}this.stats.range=Math.max(1,this.stats.max-this.stats.min);this.stats.stdDev=Math.sqrt(this.imageData.length*this.stats.sum2-this.stats.sum*this.stats.sum)/this.imageData.length;for(var _b=0,_c=this.imageData;_b<_c.length;_b++){var intensity=_c[_b];var bin=Math.floor((this.stats.histo.length-1)*(intensity-this.stats.min)/this.stats.range);if(++this.stats.histo[bin]>this.stats.histomax){this.stats.histomax=this.stats.histo[bin]}}};__decorate([mobx_1.observable],Image.prototype,"renderer",void 0);__decorate([mobx_1.observable],Image.prototype,"min",void 0);__decorate([mobx_1.observable],Image.prototype,"max",void 0);__decorate([mobx_1.observable],Image.prototype,"scaleMode",void 0);__decorate([mobx_1.action],Image.prototype,"initRenderer",null);__decorate([mobx_1.action],Image.prototype,"render",null);__decorate([mobx_1.action],Image.prototype,"updateScaleMode",null);return Image}();exports.default=Image},function(module,exports){(function(){var Base,BinaryTable,CompressedImage,DataUnit,Decompress,FITS,HDU,Header,HeaderVerify,Image,ImageUtils,Parser,Table,Tabular,_ref,_ref1,__hasProp={}.hasOwnProperty,__extends=function(child,parent){for(var key in parent){if(__hasProp.call(parent,key))child[key]=parent[key]}function ctor(){this.constructor=child}ctor.prototype=parent.prototype;child.prototype=new ctor;child.__super__=parent.prototype;return child},__slice=[].slice;if(this.astro==null){this.astro={}}Base=function(){function Base(){}Base.include=function(obj){var key,value;for(key in obj){value=obj[key];this.prototype[key]=value}return this};Base.extend=function(obj){var key,value;for(key in obj){value=obj[key];this[key]=value}return this};Base.prototype.proxy=function(func){var _this=this;return function(){return func.apply(_this,arguments)}};Base.prototype.invoke=function(callback,opts,data){var context;context=(opts!=null?opts.context:void 0)!=null?opts.context:this;if(callback!=null){return callback.call(context,data,opts)}};return Base}();Parser=function(_super){__extends(Parser,_super);Parser.prototype.LINEWIDTH=80;Parser.prototype.BLOCKLENGTH=2880;File.prototype.slice=File.prototype.slice||File.prototype.webkitSlice;Blob.prototype.slice=Blob.prototype.slice||Blob.prototype.webkitSlice;function Parser(arg,callback,opts){var xhr,_this=this;this.arg=arg;this.callback=callback;this.opts=opts;this.hdus=[];this.blockCount=0;this.begin=0;this.end=this.BLOCKLENGTH;this.offset=0;this.headerStorage=new Uint8Array;if(typeof this.arg==="string"){this.readNextBlock=this._readBlockFromBuffer;xhr=new XMLHttpRequest;xhr.open("GET",this.arg);xhr.responseType="arraybuffer";xhr.onload=function(){if(xhr.status!==200){_this.invoke(_this.callback,_this.opts);return}_this.arg=xhr.response;_this.length=_this.arg.byteLength;return _this.readFromBuffer()};xhr.send()}else{this.length=this.arg.size;this.readNextBlock=this._readBlockFromFile;this.readFromFile()}}Parser.prototype.readFromBuffer=function(){var block;block=this.arg.slice(this.begin+this.offset,this.end+this.offset);return this.readBlock(block)};Parser.prototype.readFromFile=function(){var block,_this=this;this.reader=new FileReader;this.reader.onloadend=function(e){return _this.readBlock(e.target.result)};block=this.arg.slice(this.begin+this.offset,this.end+this.offset);return this.reader.readAsArrayBuffer(block)};Parser.prototype.readBlock=function(block){var arr,dataLength,dataunit,header,rowIndex,rows,s,slice,tmp,value,_i,_len,_ref;arr=new Uint8Array(block);tmp=new Uint8Array(this.headerStorage);this.headerStorage=new Uint8Array(this.end);this.headerStorage.set(tmp,0);this.headerStorage.set(arr,this.begin);rows=this.BLOCKLENGTH/this.LINEWIDTH;while(rows--){rowIndex=rows*this.LINEWIDTH;if(arr[rowIndex]===32){continue}if(arr[rowIndex]===69&&arr[rowIndex+1]===78&&arr[rowIndex+2]===68&&arr[rowIndex+3]===32){s="";_ref=this.headerStorage;for(_i=0,_len=_ref.length;_i<_len;_i++){value=_ref[_i];s+=String.fromCharCode(value)}header=new Header(s);this.start=this.end+this.offset;dataLength=header.getDataLength();slice=this.arg.slice(this.start,this.start+dataLength);if(header.hasDataUnit()){dataunit=this.createDataUnit(header,slice)}this.hdus.push(new HDU(header,dataunit));this.offset+=this.end+dataLength+this.excessBytes(dataLength);if(this.offset===this.length){this.headerStorage=null;this.invoke(this.callback,this.opts,this);return}this.blockCount=0;this.begin=this.blockCount*this.BLOCKLENGTH;this.end=this.begin+this.BLOCKLENGTH;this.headerStorage=new Uint8Array;block=this.arg.slice(this.begin+this.offset,this.end+this.offset);this.readNextBlock(block);return}break}this.blockCount+=1;this.begin=this.blockCount*this.BLOCKLENGTH;this.end=this.begin+this.BLOCKLENGTH;block=this.arg.slice(this.begin+this.offset,this.end+this.offset);this.readNextBlock(block)};Parser.prototype._readBlockFromBuffer=function(block){return this.readBlock(block)};Parser.prototype._readBlockFromFile=function(block){return this.reader.readAsArrayBuffer(block)};Parser.prototype.createDataUnit=function(header,blob){var type;type=header.getDataType();return new astro.FITS[type](header,blob)};Parser.prototype.excessBytes=function(length){return(this.BLOCKLENGTH-length%this.BLOCKLENGTH)%this.BLOCKLENGTH};Parser.prototype.isEOF=function(){if(this.offset===this.length){return true}else{return false}};return Parser}(Base);FITS=function(_super){__extends(FITS,_super);function FITS(arg,callback,opts){var parser,_this=this;this.arg=arg;parser=new Parser(this.arg,function(fits){_this.hdus=parser.hdus;return _this.invoke(callback,opts,_this)})}FITS.prototype.getHDU=function(index){var hdu,_i,_len,_ref;if(index!=null&&this.hdus[index]!=null){return this.hdus[index]}_ref=this.hdus;for(_i=0,_len=_ref.length;_i<_len;_i++){hdu=_ref[_i];if(hdu.hasData()){return hdu}}};FITS.prototype.getHeader=function(index){return this.getHDU(index).header};FITS.prototype.getDataUnit=function(index){return this.getHDU(index).data};return FITS}(Base);FITS.version="0.6.5";this.astro.FITS=FITS;DataUnit=function(_super){__extends(DataUnit,_super);DataUnit.swapEndian={B:function(value){return value},I:function(value){return value<<8|value>>8},J:function(value){return(value&255)<<24|(value&65280)<<8|value>>8&65280|value>>24&255}};DataUnit.swapEndian[8]=DataUnit.swapEndian["B"];DataUnit.swapEndian[16]=DataUnit.swapEndian["I"];DataUnit.swapEndian[32]=DataUnit.swapEndian["J"];function DataUnit(header,data){if(data instanceof ArrayBuffer){this.buffer=data}else{this.blob=data}}return DataUnit}(Base);this.astro.FITS.DataUnit=DataUnit;HeaderVerify={verifyOrder:function(keyword,order){if(order!==this.cardIndex){return console.warn(""+keyword+" should appear at index "+this.cardIndex+" in the FITS header")}},verifyBetween:function(keyword,value,lower,upper){if(!(value>=lower&&value<=upper)){throw"The "+keyword+" value of "+value+" is not between "+lower+" and "+upper}},verifyBoolean:function(value){if(value==="T"){return true}else{return false}},VerifyFns:{SIMPLE:function(){var args,value;args=1<=arguments.length?__slice.call(arguments,0):[];value=arguments[0];this.primary=true;this.verifyOrder("SIMPLE",0);return this.verifyBoolean(value)},XTENSION:function(){var args;args=1<=arguments.length?__slice.call(arguments,0):[];this.extension=true;this.extensionType=arguments[0];this.verifyOrder("XTENSION",0);return this.extensionType},BITPIX:function(){var args,key,value;args=1<=arguments.length?__slice.call(arguments,0):[];key="BITPIX";value=parseInt(arguments[0]);this.verifyOrder(key,1);if(value!==8&&value!==16&&value!==32&&value!==-32&&value!==-64){throw""+key+" value "+value+" is not permitted"}return value},NAXIS:function(){var args,array,key,required,value,_ref;args=1<=arguments.length?__slice.call(arguments,0):[];key="NAXIS";value=parseInt(arguments[0]);array=arguments[1];if(!array){this.verifyOrder(key,2);this.verifyBetween(key,value,0,999);if(this.isExtension()){if((_ref=this.extensionType)==="TABLE"||_ref==="BINTABLE"){required=2;if(value!==required){throw""+key+" must be "+required+" for TABLE and BINTABLE extensions"}}}}return value},PCOUNT:function(){var args,key,order,required,value,_ref;args=1<=arguments.length?__slice.call(arguments,0):[];key="PCOUNT";value=parseInt(arguments[0]);order=1+1+1+this.get("NAXIS");this.verifyOrder(key,order);if(this.isExtension()){if((_ref=this.extensionType)==="IMAGE"||_ref==="TABLE"){required=0;if(value!==required){throw""+key+" must be "+required+" for the "+this.extensionType+" extensions"}}}return value},GCOUNT:function(){var args,key,order,required,value,_ref;args=1<=arguments.length?__slice.call(arguments,0):[];key="GCOUNT";value=parseInt(arguments[0]);order=1+1+1+this.get("NAXIS")+1;this.verifyOrder(key,order);if(this.isExtension()){if((_ref=this.extensionType)==="IMAGE"||_ref==="TABLE"||_ref==="BINTABLE"){required=1;if(value!==required){throw""+key+" must be "+required+" for the "+this.extensionType+" extensions"}}}return value},EXTEND:function(){var args,value;args=1<=arguments.length?__slice.call(arguments,0):[];value=arguments[0];if(!this.isPrimary()){throw"EXTEND must only appear in the primary header"}return this.verifyBoolean(value)},BSCALE:function(){var args;args=1<=arguments.length?__slice.call(arguments,0):[];return parseFloat(arguments[0])},BZERO:function(){var args;args=1<=arguments.length?__slice.call(arguments,0):[];return parseFloat(arguments[0])},BLANK:function(){var args,value;args=1<=arguments.length?__slice.call(arguments,0):[];value=arguments[0];if(!(this.get("BITPIX")>0)){console.warn("BLANK is not to be used for BITPIX = "+this.get("BITPIX"))}return parseInt(value)},DATAMIN:function(){var args;args=1<=arguments.length?__slice.call(arguments,0):[];return parseFloat(arguments[0])},DATAMAX:function(){var args;args=1<=arguments.length?__slice.call(arguments,0):[];return parseFloat(arguments[0])},EXTVER:function(){var args;args=1<=arguments.length?__slice.call(arguments,0):[];return parseInt(arguments[0])},EXTLEVEL:function(){var args;args=1<=arguments.length?__slice.call(arguments,0):[];return parseInt(arguments[0])},TFIELDS:function(){var args,value;args=1<=arguments.length?__slice.call(arguments,0):[];value=parseInt(arguments[0]);this.verifyBetween("TFIELDS",value,0,999);return value},TBCOL:function(){var args,index,value;args=1<=arguments.length?__slice.call(arguments,0):[];value=arguments[0];index=arguments[2];this.verifyBetween("TBCOL",index,0,this.get("TFIELDS"));return value},ZIMAGE:function(){var args;args=1<=arguments.length?__slice.call(arguments,0):[];return this.verifyBoolean(arguments[0])},ZCMPTYPE:function(){var args,value;args=1<=arguments.length?__slice.call(arguments,0):[];value=arguments[0];if(value!=="GZIP_1"&&value!=="RICE_1"&&value!=="PLIO_1"&&value!=="HCOMPRESS_1"){throw"ZCMPTYPE value "+value+" is not permitted"}if(value!=="RICE_1"){throw"Compress type "+value+" is not yet implement"}return value},ZBITPIX:function(){var args,value;args=1<=arguments.length?__slice.call(arguments,0):[];value=parseInt(arguments[0]);if(value!==8&&value!==16&&value!==32&&value!==64&&value!==-32&&value!==-64){throw"ZBITPIX value "+value+" is not permitted"}return value},ZNAXIS:function(){var args,array,value;args=1<=arguments.length?__slice.call(arguments,0):[];value=parseInt(arguments[0]);array=arguments[1];value=value;if(!array){this.verifyBetween("ZNAXIS",value,0,999)}return value},ZTILE:function(){var args;args=1<=arguments.length?__slice.call(arguments,0):[];return parseInt(arguments[0])},ZSIMPLE:function(){var args;args=1<=arguments.length?__slice.call(arguments,0):[];if(arguments[0]==="T"){return true}else{return false}},ZPCOUNT:function(){var args;args=1<=arguments.length?__slice.call(arguments,0):[];return parseInt(arguments[0])},ZGCOUNT:function(){var args;args=1<=arguments.length?__slice.call(arguments,0):[];return parseInt(arguments[0])},ZDITHER0:function(){var args;args=1<=arguments.length?__slice.call(arguments,0):[];return parseInt(arguments[0])}}};this.astro.FITS.HeaderVerify=HeaderVerify;Header=function(_super){__extends(Header,_super);Header.include(HeaderVerify);Header.prototype.arrayPattern=/(\D+)(\d+)/;Header.prototype.maxLines=600;function Header(block){var method,name,_ref;this.primary=false;this.extension=false;this.verifyCard={};_ref=this.VerifyFns;for(name in _ref){method=_ref[name];this.verifyCard[name]=this.proxy(method)}this.cards={};this.cards["COMMENT"]=[];this.cards["HISTORY"]=[];this.cardIndex=0;this.block=block;this.readBlock(block)}Header.prototype.get=function(key){if(this.contains(key)){return this.cards[key].value}else{return null}};Header.prototype.set=function(key,value,comment){comment=comment||"";this.cards[key]={index:this.cardIndex,value:value,comment:comment};return this.cardIndex+=1};Header.prototype.contains=function(key){return this.cards.hasOwnProperty(key)};Header.prototype.readLine=function(l){var blank,comment,firstByte,indicator,key,value,_ref;key=l.slice(0,8).trim();blank=key==="";if(blank){return}indicator=l.slice(8,10);value=l.slice(10);if(indicator!=="= "){if(key==="COMMENT"||key==="HISTORY"){this.cards[key].push(value.trim())}return}_ref=value.split(" /"),value=_ref[0],comment=_ref[1];value=value.trim();firstByte=value[0];if(firstByte==="'"){value=value.slice(1,-1).trim()}else{if(value!=="T"&&value!=="F"){value=parseFloat(value)}}value=this.validate(key,value);return this.set(key,value,comment)};Header.prototype.validate=function(key,value){var baseKey,index,isArray,match,_ref;index=null;baseKey=key;isArray=this.arrayPattern.test(key);if(isArray){match=this.arrayPattern.exec(key);_ref=match.slice(1),baseKey=_ref[0],index=_ref[1]}if(baseKey in this.verifyCard){value=this.verifyCard[baseKey](value,isArray,index)}return value};Header.prototype.readBlock=function(block){var i,line,lineWidth,nLines,_i,_ref,_results;lineWidth=80;nLines=block.length/lineWidth;nLines=nLines<this.maxLines?nLines:this.maxLines;_results=[];for(i=_i=0,_ref=nLines-1;0<=_ref?_i<=_ref:_i>=_ref;i=0<=_ref?++_i:--_i){line=block.slice(i*lineWidth,(i+1)*lineWidth);_results.push(this.readLine(line))}return _results};Header.prototype.hasDataUnit=function(){if(this.get("NAXIS")===0){return false}else{return true}};Header.prototype.getDataLength=function(){var i,length,naxis,_i,_ref;if(!this.hasDataUnit()){return 0}naxis=[];for(i=_i=1,_ref=this.get("NAXIS");1<=_ref?_i<=_ref:_i>=_ref;i=1<=_ref?++_i:--_i){naxis.push(this.get("NAXIS"+i))}length=naxis.reduce(function(a,b){return a*b})*Math.abs(this.get("BITPIX"))/8;length+=this.get("PCOUNT");return length};Header.prototype.getDataType=function(){switch(this.extensionType){case"BINTABLE":if(this.contains("ZIMAGE")){return"CompressedImage"}return"BinaryTable";case"TABLE":return"Table";default:if(this.hasDataUnit()){return"Image"}else{return null}}};Header.prototype.isPrimary=function(){return this.primary};Header.prototype.isExtension=function(){return this.extension};return Header}(Base);this.astro.FITS.Header=Header;ImageUtils={getExtent:function(arr){var index,max,min,value;index=arr.length;while(index--){value=arr[index];if(isNaN(value)){continue}min=max=value;break}if(index===-1){return[NaN,NaN]}while(index--){value=arr[index];if(isNaN(value)){continue}if(value<min){min=value}if(value>max){max=value}}return[min,max]},getPixel:function(arr,x,y){return arr[y*this.width+x]}};this.astro.FITS.ImageUtils=ImageUtils;Image=function(_super){__extends(Image,_super);Image.include(ImageUtils);Image.prototype.allocationSize=16777216;function Image(header,data){var begin,frame,i,naxis,_i,_j,_ref;Image.__super__.constructor.apply(this,arguments);naxis=header.get("NAXIS");this.bitpix=header.get("BITPIX");this.naxis=[];for(i=_i=1;1<=naxis?_i<=naxis:_i>=naxis;i=1<=naxis?++_i:--_i){this.naxis.push(header.get("NAXIS"+i))}this.width=header.get("NAXIS1");this.height=header.get("NAXIS2")||1;this.depth=header.get("NAXIS3")||1;this.bzero=header.get("BZERO")||0;this.bscale=header.get("BSCALE")||1;this.bytes=Math.abs(this.bitpix)/8;this.length=this.naxis.reduce(function(a,b){return a*b})*Math.abs(this.bitpix)/8;this.frame=0;this.frameOffsets=[];this.frameLength=this.bytes*this.width*this.height;this.nBuffers=this.buffer!=null?1:2;for(i=_j=0,_ref=this.depth-1;0<=_ref?_j<=_ref:_j>=_ref;i=0<=_ref?++_j:--_j){begin=i*this.frameLength;frame={begin:begin};if(this.buffer!=null){frame.buffers=[this.buffer.slice(begin,begin+this.frameLength)]}this.frameOffsets.push(frame)}}Image.prototype._getFrame=function(buffer,bitpix,bzero,bscale){var arr,bytes,dataType,i,nPixels,swapEndian,tmp,value;bytes=Math.abs(bitpix)/8;nPixels=i=buffer.byteLength/bytes;dataType=Math.abs(bitpix);if(bitpix>0){switch(bitpix){case 8:tmp=new Uint8Array(buffer);tmp=new Uint16Array(tmp);swapEndian=function(value){return value};break;case 16:tmp=new Int16Array(buffer);swapEndian=function(value){return(value&255)<<8|value>>8&255};break;case 32:tmp=new Int32Array(buffer);swapEndian=function(value){return(value&255)<<24|(value&65280)<<8|value>>8&65280|value>>24&255}}if(!(parseInt(bzero)===bzero&&parseInt(bscale)===bscale)){arr=new Float32Array(tmp.length)}else{arr=tmp}while(nPixels--){tmp[nPixels]=swapEndian(tmp[nPixels]);arr[nPixels]=bzero+bscale*tmp[nPixels]}}else{arr=new Uint32Array(buffer);swapEndian=function(value){return(value&255)<<24|(value&65280)<<8|value>>8&65280|value>>24&255};while(i--){value=arr[i];arr[i]=swapEndian(value)}arr=new Float32Array(buffer);while(nPixels--){arr[nPixels]=bzero+bscale*arr[nPixels]}}return arr};Image.prototype._getFrameAsync=function(buffers,callback,opts){var URL,blobGetFrame,blobOnMessage,fn1,fn2,i,mime,msg,onmessage,pixels,start,urlGetFrame,urlOnMessage,worker,_this=this;onmessage=function(e){var arr,bitpix,bscale,buffer,bzero,data,url;data=e.data;buffer=data.buffer;bitpix=data.bitpix;bzero=data.bzero;bscale=data.bscale;url=data.url;importScripts(url);arr=_getFrame(buffer,bitpix,bzero,bscale);return postMessage(arr)};fn1=onmessage.toString().replace("return postMessage","postMessage");fn1="onmessage = "+fn1;fn2=this._getFrame.toString();fn2=fn2.replace("function","function _getFrame");mime="application/javascript";blobOnMessage=new Blob([fn1],{type:mime});blobGetFrame=new Blob([fn2],{type:mime});URL=window.URL||window.webkitURL;urlOnMessage=URL.createObjectURL(blobOnMessage);urlGetFrame=URL.createObjectURL(blobGetFrame);worker=new Worker(urlOnMessage);msg={buffer:buffers[0],bitpix:this.bitpix,bzero:this.bzero,bscale:this.bscale,url:urlGetFrame};i=0;pixels=null;start=0;worker.onmessage=function(e){var arr;arr=e.data;if(pixels==null){pixels=new arr.constructor(_this.width*_this.height)}pixels.set(arr,start);start+=arr.length;i+=1;if(i===_this.nBuffers){_this.invoke(callback,opts,pixels);URL.revokeObjectURL(urlOnMessage);URL.revokeObjectURL(urlGetFrame);return worker.terminate()}else{msg.buffer=buffers[i];return worker.postMessage(msg,[buffers[i]])}};worker.postMessage(msg,[buffers[0]])};Image.prototype.getFrame=function(frame,callback,opts){var begin,blobFrame,blobs,buffers,bytesPerBuffer,frameInfo,i,nRowsPerBuffer,reader,start,_i,_ref,_this=this;this.frame=frame||this.frame;frameInfo=this.frameOffsets[this.frame];buffers=frameInfo.buffers;if((buffers!=null?buffers.length:void 0)===this.nBuffers){return this._getFrameAsync(buffers,callback,opts)}else{this.frameOffsets[this.frame].buffers=[];begin=frameInfo.begin;blobFrame=this.blob.slice(begin,begin+this.frameLength);blobs=[];nRowsPerBuffer=Math.floor(this.height/this.nBuffers);bytesPerBuffer=nRowsPerBuffer*this.bytes*this.width;for(i=_i=0,_ref=this.nBuffers-1;0<=_ref?_i<=_ref:_i>=_ref;i=0<=_ref?++_i:--_i){start=i*bytesPerBuffer;if(i===this.nBuffers-1){blobs.push(blobFrame.slice(start))}else{blobs.push(blobFrame.slice(start,start+bytesPerBuffer))}}buffers=[];reader=new FileReader;reader.frame=this.frame;i=0;reader.onloadend=function(e){var buffer;frame=e.target.frame;buffer=e.target.result;_this.frameOffsets[frame].buffers.push(buffer);i+=1;if(i===_this.nBuffers){return _this.getFrame(frame,callback,opts)}else{return reader.readAsArrayBuffer(blobs[i])}};return reader.readAsArrayBuffer(blobs[0])}};Image.prototype.getFrames=function(frame,number,callback,opts){var cb,_this=this;cb=function(arr,opts){_this.invoke(callback,opts,arr);number-=1;frame+=1;if(!number){return}return _this.getFrame(frame,cb,opts)};return this.getFrame(frame,cb,opts)};Image.prototype.isDataCube=function(){if(this.naxis.length>2){return true}else{return false}};return Image}(DataUnit);this.astro.FITS.Image=Image;Tabular=function(_super){__extends(Tabular,_super);Tabular.prototype.maxMemory=1048576;function Tabular(header,data){Tabular.__super__.constructor.apply(this,arguments);this.rowByteSize=header.get("NAXIS1");this.rows=header.get("NAXIS2");this.cols=header.get("TFIELDS");this.length=this.rowByteSize*this.rows;this.heapLength=header.get("PCOUNT");this.columns=this.getColumns(header);if(this.buffer!=null){this.rowsInMemory=this._rowsInMemoryBuffer;this.heap=this.buffer.slice(this.length,this.length+this.heapLength)}else{this.rowsInMemory=this._rowsInMemoryBlob;this.firstRowInBuffer=this.lastRowInBuffer=0;this.nRowsInBuffer=Math.floor(this.maxMemory/this.rowByteSize)}this.accessors=[];this.descriptors=[];this.elementByteLengths=[];this.setAccessors(header)}Tabular.prototype._rowsInMemoryBuffer=function(){return true};Tabular.prototype._rowsInMemoryBlob=function(firstRow,lastRow){if(firstRow<this.firstRowInBuffer){return false}if(lastRow>this.lastRowInBuffer){return false}return true};Tabular.prototype.getColumns=function(header){var columns,i,key,_i,_ref;columns=[];for(i=_i=1,_ref=this.cols;1<=_ref?_i<=_ref:_i>=_ref;i=1<=_ref?++_i:--_i){key="TTYPE"+i;if(!header.contains(key)){return null}columns.push(header.get(key))}return columns};Tabular.prototype.getColumn=function(name,callback,opts){var accessor,cb,column,descriptor,elementByteLength,elementByteOffset,factor,i,index,iterations,rowsPerIteration,_this=this;if(this.blob!=null){index=this.columns.indexOf(name);descriptor=this.descriptors[index];accessor=this.accessors[index];elementByteLength=this.elementByteLengths[index];elementByteOffset=this.elementByteLengths.slice(0,index);if(elementByteOffset.length===0){elementByteOffset=0}else{elementByteOffset=elementByteOffset.reduce(function(a,b){return a+b})}column=this.typedArray[descriptor]!=null?new this.typedArray[descriptor](this.rows):[];rowsPerIteration=~~(this.maxMemory/this.rowByteSize);rowsPerIteration=Math.min(rowsPerIteration,this.rows);factor=this.rows/rowsPerIteration;iterations=Math.floor(factor)===factor?factor:Math.floor(factor)+1;i=0;index=0;cb=function(buffer,opts){var nRows,offset,startRow,view;nRows=buffer.byteLength/_this.rowByteSize;view=new DataView(buffer);offset=elementByteOffset;while(nRows--){column[i]=accessor(view,offset)[0];i+=1;offset+=_this.rowByteSize}iterations-=1;index+=1;if(iterations){startRow=index*rowsPerIteration;return _this.getTableBuffer(startRow,rowsPerIteration,cb,opts)}else{_this.invoke(callback,opts,column)}};return this.getTableBuffer(0,rowsPerIteration,cb,opts)}else{cb=function(rows,opts){column=rows.map(function(d){return d[name]});return _this.invoke(callback,opts,column)};return this.getRows(0,this.rows,cb,opts)}};Tabular.prototype.getTableBuffer=function(row,number,callback,opts){var begin,blobRows,end,reader,_this=this;number=Math.min(this.rows-row,number);begin=row*this.rowByteSize;end=begin+number*this.rowByteSize;blobRows=this.blob.slice(begin,end);reader=new FileReader;reader.row=row;reader.number=number;reader.onloadend=function(e){return _this.invoke(callback,opts,e.target.result)};return reader.readAsArrayBuffer(blobRows)};Tabular.prototype.getRows=function(row,number,callback,opts){var begin,blobRows,buffer,end,reader,rows,_this=this;if(this.rowsInMemory(row,row+number)){if(this.blob!=null){buffer=this.buffer}else{begin=row*this.rowByteSize;end=begin+number*this.rowByteSize;buffer=this.buffer.slice(begin,end)}rows=this._getRows(buffer,number);this.invoke(callback,opts,rows);return rows}else{begin=row*this.rowByteSize;end=begin+Math.max(this.nRowsInBuffer*this.rowByteSize,number*this.rowByteSize);blobRows=this.blob.slice(begin,end);reader=new FileReader;reader.row=row;reader.number=number;reader.onloadend=function(e){var target;target=e.target;_this.buffer=target.result;_this.firstRowInBuffer=_this.lastRowInBuffer=target.row;_this.lastRowInBuffer+=target.number;return _this.getRows(row,number,callback,opts)};return reader.readAsArrayBuffer(blobRows)}};return Tabular}(DataUnit);this.astro.FITS.Tabular=Tabular;Table=function(_super){__extends(Table,_super);function Table(){_ref=Table.__super__.constructor.apply(this,arguments);return _ref}Table.prototype.dataAccessors={A:function(value){return value.trim()},I:function(value){return parseInt(value)},F:function(value){return parseFloat(value)},E:function(value){return parseFloat(value)},D:function(value){return parseFloat(value)}};Table.prototype.setAccessors=function(header){var descriptor,form,i,match,pattern,type,_i,_ref1,_results,_this=this;pattern=/([AIFED])(\d+)\.*(\d+)*/;_results=[];for(i=_i=1,_ref1=this.cols;1<=_ref1?_i<=_ref1:_i>=_ref1;i=1<=_ref1?++_i:--_i){form=header.get("TFORM"+i);type=header.get("TTYPE"+i);match=pattern.exec(form);descriptor=match[1];_results.push(function(descriptor){var accessor;accessor=function(value){return _this.dataAccessors[descriptor](value)};return _this.accessors.push(accessor)}(descriptor))}return _results};Table.prototype._getRows=function(buffer){var accessor,arr,begin,end,i,index,line,nRows,row,rows,subarray,value,_i,_j,_k,_len,_len1,_ref1,_ref2;nRows=buffer.byteLength/this.rowByteSize;arr=new Uint8Array(buffer);rows=[];for(i=_i=0,_ref1=nRows-1;0<=_ref1?_i<=_ref1:_i>=_ref1;i=0<=_ref1?++_i:--_i){begin=i*this.rowByteSize;end=begin+this.rowByteSize;subarray=arr.subarray(begin,end);line="";for(_j=0,_len=subarray.length;_j<_len;_j++){value=subarray[_j];line+=String.fromCharCode(value)}line=line.trim().split(/\s+/);row={};_ref2=this.accessors;for(index=_k=0,_len1=_ref2.length;_k<_len1;index=++_k){accessor=_ref2[index];value=line[index];row[this.columns[index]]=accessor(value)}rows.push(row)}return rows};return Table}(Tabular);this.astro.FITS.Table=Table;BinaryTable=function(_super){__extends(BinaryTable,_super);function BinaryTable(){_ref1=BinaryTable.__super__.constructor.apply(this,arguments);return _ref1}BinaryTable.prototype.typedArray={B:Uint8Array,I:Uint16Array,J:Uint32Array,E:Float32Array,D:Float64Array,1:Uint8Array,2:Uint16Array,4:Uint32Array};BinaryTable.offsets={L:1,B:1,I:2,J:4,K:8,A:1,E:4,D:8,C:8,M:16};BinaryTable.prototype.dataAccessors={L:function(view,offset){var val,x;x=view.getInt8(offset);offset+=1;val=x===84?true:false;return[val,offset]},B:function(view,offset){var val;val=view.getUint8(offset);offset+=1;return[val,offset]},I:function(view,offset){var val;val=view.getInt16(offset);offset+=2;return[val,offset]},J:function(view,offset){var val;val=view.getInt32(offset);offset+=4;return[val,offset]},K:function(view,offset){var factor,highByte,lowByte,mod,val;highByte=Math.abs(view.getInt32(offset));offset+=4;lowByte=Math.abs(view.getInt32(offset));offset+=4;mod=highByte%10;factor=mod?-1:1;highByte-=mod;val=factor*(highByte<<32|lowByte);return[val,offset]},A:function(view,offset){var val;val=view.getUint8(offset);val=String.fromCharCode(val);offset+=1;return[val,offset]},E:function(view,offset){var val;val=view.getFloat32(offset);offset+=4;return[val,offset]},D:function(view,offset){var val;val=view.getFloat64(offset);offset+=8;return[val,offset]},C:function(view,offset){var val,val1,val2;val1=view.getFloat32(offset);offset+=4;val2=view.getFloat32(offset);offset+=4;val=[val1,val2];return[val,offset]},M:function(view,offset){var val,val1,val2;val1=view.getFloat64(offset);offset+=8;val2=view.getFloat64(offset);offset+=8;val=[val1,val2];return[val,offset]}};BinaryTable.prototype.toBits=function(byte){var arr,i;arr=[];i=128;while(i>=1){arr.push(byte&i?1:0);i/=2}return arr};BinaryTable.prototype.getFromHeap=function(view,offset,descriptor){var arr,heapOffset,heapSlice,i,length;length=view.getInt32(offset);offset+=4;heapOffset=view.getInt32(offset);offset+=4;heapSlice=this.heap.slice(heapOffset,heapOffset+length);arr=new this.typedArray[descriptor](heapSlice);i=arr.length;while(i--){arr[i]=this.constructor.swapEndian[descriptor](arr[i])}return[arr,offset]};BinaryTable.prototype.setAccessors=function(header){var count,descriptor,form,i,isArray,match,pattern,type,_i,_ref2,_results,_this=this;pattern=/(\d*)([P|Q]*)([L|X|B|I|J|K|A|E|D|C|M]{1})/;_results=[];for(i=_i=1,_ref2=this.cols;1<=_ref2?_i<=_ref2:_i>=_ref2;i=1<=_ref2?++_i:--_i){form=header.get("TFORM"+i);type=header.get("TTYPE"+i);match=pattern.exec(form);count=parseInt(match[1])||1;isArray=match[2];descriptor=match[3];_results.push(function(descriptor,count){var accessor,nBytes;_this.descriptors.push(descriptor);_this.elementByteLengths.push(_this.constructor.offsets[descriptor]*count);if(isArray){switch(type){case"COMPRESSED_DATA":accessor=function(view,offset){var arr,pixels,_ref3;_ref3=_this.getFromHeap(view,offset,descriptor),arr=_ref3[0],offset=_ref3[1];pixels=new _this.typedArray[_this.algorithmParameters["BYTEPIX"]](_this.ztile[0]);Decompress.Rice(arr,_this.algorithmParameters["BLOCKSIZE"],_this.algorithmParameters["BYTEPIX"],pixels,_this.ztile[0],Decompress.RiceSetup);return[pixels,offset]};break;case"GZIP_COMPRESSED_DATA":accessor=function(view,offset){var arr;arr=new Float32Array(_this.width);i=arr.length;while(i--){arr[i]=NaN}return[arr,offset]};break;default:accessor=function(view,offset){return _this.getFromHeap(view,offset,descriptor)}}}else{if(count===1){accessor=function(view,offset){var value,_ref3;_ref3=_this.dataAccessors[descriptor](view,offset),value=_ref3[0],offset=_ref3[1];return[value,offset]}}else{if(descriptor==="X"){nBytes=Math.log(count)/Math.log(2);accessor=function(view,offset){var arr,bits,buffer,byte,bytes,_j,_len;buffer=view.buffer.slice(offset,offset+nBytes);bytes=new Uint8Array(buffer);bits=[];for(_j=0,_len=bytes.length;_j<_len;_j++){byte=bytes[_j];arr=_this.toBits(byte);bits=bits.concat(arr)}offset+=nBytes;return[bits.slice(0,+(count-1)+1||9e9),offset]}}else if(descriptor==="A"){accessor=function(view,offset){var arr,buffer,s,value,_j,_len;buffer=view.buffer.slice(offset,offset+count);arr=new Uint8Array(buffer);s="";for(_j=0,_len=arr.length;_j<_len;_j++){value=arr[_j];s+=String.fromCharCode(value)}s=s.trim();offset+=count;return[s,offset]}}else{accessor=function(view,offset){var data,value,_ref3;i=count;data=[];while(i--){_ref3=_this.dataAccessors[descriptor](view,offset),value=_ref3[0],offset=_ref3[1];data.push(value)}return[data,offset]}}}}return _this.accessors.push(accessor)}(descriptor,count))}return _results};BinaryTable.prototype._getRows=function(buffer,nRows){var accessor,index,offset,row,rows,value,view,_i,_len,_ref2,_ref3;view=new DataView(buffer);offset=0;rows=[];while(nRows--){row={};_ref2=this.accessors;for(index=_i=0,_len=_ref2.length;_i<_len;index=++_i){accessor=_ref2[index];_ref3=accessor(view,offset),value=_ref3[0],offset=_ref3[1];row[this.columns[index]]=value}rows.push(row)}return rows};return BinaryTable}(Tabular);this.astro.FITS.BinaryTable=BinaryTable;Decompress={RiceSetup:{1:function(array){var fsbits,fsmax,lastpix,pointer;pointer=1;fsbits=3;fsmax=6;lastpix=array[0];return[fsbits,fsmax,lastpix,pointer]},2:function(array){var bytevalue,fsbits,fsmax,lastpix,pointer;pointer=2;fsbits=4;fsmax=14;lastpix=0;bytevalue=array[0];lastpix=lastpix|bytevalue<<8;bytevalue=array[1];lastpix=lastpix|bytevalue;return[fsbits,fsmax,lastpix,pointer]},4:function(array){var bytevalue,fsbits,fsmax,lastpix,pointer;pointer=4;fsbits=5;fsmax=25;lastpix=0;bytevalue=array[0];lastpix=lastpix|bytevalue<<24;bytevalue=array[1];lastpix=lastpix|bytevalue<<16;bytevalue=array[2];lastpix=lastpix|bytevalue<<8;bytevalue=array[3];lastpix=lastpix|bytevalue;return[fsbits,fsmax,lastpix,pointer]}},Rice:function(array,blocksize,bytepix,pixels,nx,setup){var b,bbits,diff,fs,fsbits,fsmax,i,imax,k,lastpix,nbits,nonzeroCount,nzero,pointer,_ref2,_ref3;bbits=1<<fsbits;_ref2=setup[bytepix](array),fsbits=_ref2[0],fsmax=_ref2[1],lastpix=_ref2[2],pointer=_ref2[3];nonzeroCount=new Uint8Array(256);nzero=8;_ref3=[128,255],k=_ref3[0],i=_ref3[1];while(i>=0){while(i>=k){nonzeroCount[i]=nzero;i-=1}k=k/2;nzero-=1}nonzeroCount[0]=0;b=array[pointer++];nbits=8;i=0;while(i<nx){nbits-=fsbits;while(nbits<0){b=b<<8|array[pointer++];nbits+=8}fs=(b>>nbits)-1;b&=(1<<nbits)-1;imax=i+blocksize;if(imax>nx){imax=nx}if(fs<0){while(i<imax){pixels[i]=lastpix;i+=1}}else if(fs===fsmax){while(i<imax){k=bbits-nbits;diff=b<<k;k-=8;while(k>=0){b=array[pointer++];diff|=b<<k;k-=8}if(nbits>0){b=array[pointer++];diff|=b>>-k;b&=(1<<nbits)-1}else{b=0}if((diff&1)===0){diff=diff>>1}else{diff=~(diff>>1)}pixels[i]=diff+lastpix;lastpix=pixels[i];i++}}else{while(i<imax){while(b===0){nbits+=8;b=array[pointer++]}nzero=nbits-nonzeroCount[b];nbits-=nzero+1;b^=1<<nbits;nbits-=fs;while(nbits<0){b=b<<8|array[pointer++];nbits+=8}diff=nzero<<fs|b>>nbits;b&=(1<<nbits)-1;if((diff&1)===0){diff=diff>>1}else{diff=~(diff>>1)}pixels[i]=diff+lastpix;lastpix=pixels[i];i++}}}return pixels}};this.astro.FITS.Decompress=Decompress;CompressedImage=function(_super){__extends(CompressedImage,_super);CompressedImage.include(ImageUtils);CompressedImage.extend(Decompress);CompressedImage.randomGenerator=function(){var a,i,m,random,seed,temp,_i;a=16807;m=2147483647;seed=1;random=new Float32Array(1e4);for(i=_i=0;_i<=9999;i=++_i){temp=a*seed;seed=temp-m*parseInt(temp/m);random[i]=seed/m}return random};CompressedImage.randomSequence=CompressedImage.randomGenerator();function CompressedImage(header,data){var i,key,value,ztile,_i,_ref2;CompressedImage.__super__.constructor.apply(this,arguments);this.zcmptype=header.get("ZCMPTYPE");this.zbitpix=header.get("ZBITPIX");this.znaxis=header.get("ZNAXIS");this.zblank=header.get("ZBLANK");this.blank=header.get("BLANK");this.zdither=header.get("ZDITHER0")||0;this.ztile=[];for(i=_i=1,_ref2=this.znaxis;1<=_ref2?_i<=_ref2:_i>=_ref2;i=1<=_ref2?++_i:--_i){ztile=header.contains("ZTILE"+i)?header.get("ZTILE"+i):i===1?header.get("ZNAXIS1"):1;this.ztile.push(ztile)}this.width=header.get("ZNAXIS1");this.height=header.get("ZNAXIS2")||1;this.algorithmParameters={};if(this.zcmptype==="RICE_1"){this.algorithmParameters["BLOCKSIZE"]=32;this.algorithmParameters["BYTEPIX"]=4}i=1;while(true){key="ZNAME"+i;if(!header.contains(key)){break}value="ZVAL"+i;this.algorithmParameters[header.get(key)]=header.get(value);i+=1}this.zmaskcmp=header.get("ZMASKCMP");this.zquantiz=header.get("ZQUANTIZ")||"LINEAR_SCALING";this.bzero=header.get("BZERO")||0;this.bscale=header.get("BSCALE")||1}CompressedImage.prototype._getRows=function(buffer,nRows){var accessor,arr,blank,data,i,index,nTile,offset,r,rIndex,row,scale,seed0,seed1,value,view,zero,_i,_j,_len,_len1,_ref2,_ref3;view=new DataView(buffer);offset=0;arr=new Float32Array(this.width*this.height);while(nRows--){row={};_ref2=this.accessors;for(index=_i=0,_len=_ref2.length;_i<_len;index=++_i){accessor=_ref2[index];_ref3=accessor(view,offset),value=_ref3[0],offset=_ref3[1];row[this.columns[index]]=value}data=row["COMPRESSED_DATA"]||row["UNCOMPRESSED_DATA"]||row["GZIP_COMPRESSED_DATA"];blank=row["ZBLANK"]||this.zblank;scale=row["ZSCALE"]||this.bscale;zero=row["ZZERO"]||this.bzero;nTile=this.height-nRows;seed0=nTile+this.zdither-1;seed1=(seed0-1)%1e4;rIndex=parseInt(this.constructor.randomSequence[seed1]*500);for(index=_j=0,_len1=data.length;_j<_len1;index=++_j){value=data[index];i=(nTile-1)*this.width+index;if(value===-2147483647){arr[i]=NaN}else if(value===-2147483646){arr[i]=0}else{r=this.constructor.randomSequence[rIndex];arr[i]=(value-r+.5)*scale+zero}rIndex+=1;if(rIndex===1e4){seed1=(seed1+1)%1e4;rIndex=parseInt(this.randomSequence[seed1]*500)}}}return arr};CompressedImage.prototype.getFrame=function(nFrame,callback,opts){var heapBlob,reader,_this=this;if(this.heap){this.frame=nFrame||this.frame;return this.getRows(0,this.rows,callback,opts)}else{heapBlob=this.blob.slice(this.length,this.length+this.heapLength);reader=new FileReader;reader.onloadend=function(e){_this.heap=e.target.result;return _this.getFrame(nFrame,callback,opts)};return reader.readAsArrayBuffer(heapBlob)}};return CompressedImage}(BinaryTable);this.astro.FITS.CompressedImage=CompressedImage;HDU=function(){function HDU(header,data){this.header=header;this.data=data}HDU.prototype.hasData=function(){if(this.data!=null){return true}else{return false}};return HDU}();this.astro.FITS.HDU=HDU}).call(this)},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);const astro=__webpack_require__(49);window.astro=astro.astro;__webpack_exports__["default"]=astro.astro.FITS},function(module,exports,__webpack_require__){"use strict";var __assign=this&&this.__assign||Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++){s=arguments[i];for(var p in s)if(Object.prototype.hasOwnProperty.call(s,p))t[p]=s[p]}return t};Object.defineProperty(exports,"__esModule",{value:true});var fits_1=__webpack_require__(50);var parseData=function(fitsData){return{metaData:fitsData.getDataUnit(),header:fitsData.getHeader()}};var getImageData=function(fitsData){return new Promise(function(resolve,reject){fitsData.metaData.getFrame(0,function(imageData){return resolve(__assign({},fitsData,{imageData:imageData}))})})};var loadImage=function(file){return new Promise(function(resolve,reject){return new fits_1.default(file,resolve)}).then(parseData).then(getImageData)};exports.default=loadImage},function(module,exports,__webpack_require__){"use strict";var __decorate=this&&this.__decorate||function(decorators,target,key,desc){var c=arguments.length,r=c<3?target:desc===null?desc=Object.getOwnPropertyDescriptor(target,key):desc,d;if(typeof Reflect==="object"&&typeof Reflect.decorate==="function")r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)if(d=decorators[i])r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r;return c>3&&r&&Object.defineProperty(target,key,r),r};var __generator=this&&this.__generator||function(thisArg,body){var _={label:0,sent:function(){if(t[0]&1)throw t[1];return t[1]},trys:[],ops:[]},f,y,t,g;return g={next:verb(0),throw:verb(1),return:verb(2)},typeof Symbol==="function"&&(g[Symbol.iterator]=function(){return this}),g;function verb(n){return function(v){return step([n,v])}}function step(op){if(f)throw new TypeError("Generator is already executing.");while(_)try{if(f=1,y&&(t=y[op[0]&2?"return":op[0]?"throw":"next"])&&!(t=t.call(y,op[1])).done)return t;if(y=0,t)op=[0,t.value];switch(op[0]){case 0:case 1:t=op;break;case 4:_.label++;return{value:op[1],done:false};case 5:_.label++;y=op[1];op=[0];continue;case 7:op=_.ops.pop();_.trys.pop();continue;default:if(!(t=_.trys,t=t.length>0&&t[t.length-1])&&(op[0]===6||op[0]===2)){_=0;continue}if(op[0]===3&&(!t||op[1]>t[0]&&op[1]<t[3])){_.label=op[1];break}if(op[0]===6&&_.label<t[1]){_.label=t[1];t=op;break}if(t&&_.label<t[2]){_.label=t[2];_.ops.push(op);break}if(t[2])_.ops.pop();_.trys.pop();continue}op=body.call(thisArg,_)}catch(e){op=[6,e];y=0}finally{f=t=0}if(op[0]&5)throw op[1];return{value:op[0]?op[1]:void 0,done:true}}};Object.defineProperty(exports,"__esModule",{value:true});var mobx_1=__webpack_require__(2);var loadImage_1=__webpack_require__(51);var image_1=__webpack_require__(48);var ImageStore=function(){function ImageStore(){this.images=[];this.selectedImage=null;this.addImage=mobx_1.flow(function(file){var result,newImage;return __generator(this,function(_a){switch(_a.label){case 0:return[4,loadImage_1.default(file)];case 1:result=_a.sent();newImage=new image_1.default(this.imageIdCounter,result.imageData,result.metaData,result.header);this.images.push(newImage);this.selectedImage=newImage;this.imageIdCounter++;return[2]}})});this.imageIdCounter=0}__decorate([mobx_1.observable],ImageStore.prototype,"images",void 0);__decorate([mobx_1.observable],ImageStore.prototype,"selectedImage",void 0);__decorate([mobx_1.observable],ImageStore.prototype,"imageIdCounter",void 0);return ImageStore}();exports.ImageStore=ImageStore;exports.default=new ImageStore},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var AppStore=function(){function AppStore(){this.name="AstroView"}return AppStore}();exports.AppStore=AppStore;exports.default=new AppStore},function(module,exports,__webpack_require__){"use strict";var __extends=this&&this.__extends||function(){var extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b}||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p]};return function(d,b){extendStatics(d,b);function __(){this.constructor=d}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __)}}();Object.defineProperty(exports,"__esModule",{value:true});var React=__webpack_require__(0);var Zoom=function(_super){__extends(Zoom,_super);function Zoom(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.zoom=null;return _this}Zoom.prototype.componentDidMount=function(){if(this.props.canvas){this.updateZoomCanvas()}};Zoom.prototype.shouldComponentUpdate=function(){if(this.props.canvas){this.updateZoomCanvas()}return false};Zoom.prototype.render=function(){var _this=this;return React.createElement("canvas",{width:this.props.width,height:this.props.height,ref:function(el){_this.zoom=el}})};Zoom.prototype.updateZoomCanvas=function(){var _a=this.props,x=_a.x,y=_a.y,canvas=_a.canvas,width=_a.width,height=_a.height,canvasWidth=_a.canvasWidth;if(canvas&&this.zoom){var ctx=this.zoom.getContext("2d");if(ctx){var offset=canvas.width/canvasWidth;ctx.drawImage(canvas,(x||0)*offset-width/4,(y||0)*offset-height/4,width,height,0,0,width*2,height*2);ctx.strokeStyle="#E11010";ctx.lineWidth=2;ctx.beginPath();ctx.moveTo(width/2,height/2-10);ctx.lineTo(width/2,height/2-20);ctx.moveTo(width/2,height/2+10);ctx.lineTo(width/2,height/2+20);ctx.moveTo(width/2+10,height/2);ctx.lineTo(width/2+20,height/2);ctx.moveTo(width/2-10,height/2);ctx.lineTo(width/2-20,height/2);ctx.stroke()}}};return Zoom}(React.Component);exports.default=Zoom},function(module,exports,__webpack_require__){"use strict";var __extends=this&&this.__extends||function(){var extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b}||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p]};return function(d,b){extendStatics(d,b);function __(){this.constructor=d}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __)}}();var __decorate=this&&this.__decorate||function(decorators,target,key,desc){var c=arguments.length,r=c<3?target:desc===null?desc=Object.getOwnPropertyDescriptor(target,key):desc,d;if(typeof Reflect==="object"&&typeof Reflect.decorate==="function")r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)if(d=decorators[i])r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r;return c>3&&r&&Object.defineProperty(target,key,r),r};Object.defineProperty(exports,"__esModule",{value:true});var mobx_react_1=__webpack_require__(5);var React=__webpack_require__(0);var Histogram=function(_super){__extends(Histogram,_super);function Histogram(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.canvas=null;return _this}Histogram.prototype.componentDidMount=function(){if(this.canvas){var ctx=this.canvas.getContext("2d");var graphw=this.canvas.width;var graphh=this.canvas.height;var _a=this.props.stats,histo=_a.histo,histomax=_a.histomax;var lhmax=Math.log(histomax);if(ctx){ctx.imageSmoothingEnabled=false;ctx.webkitImageSmoothingEnabled=false;ctx.mozImageSmoothingEnabled=false;ctx.oImageSmoothingEnabled=false;ctx.setTransform(1,0,0,1,0,0);ctx.translate(.5,.5);ctx.fillStyle="#CCC";ctx.fillRect(0,0,graphw,graphh);ctx.fillStyle="#000000";ctx.beginPath();if(graphw>histo.length){ctx.moveTo(0,graphh-1);for(var hx=0;hx<histo.length;hx++){var x=Math.floor(graphw*hx/histo.length);var y=histo[hx]>1?Math.floor(graphh*(1-Math.log(histo[hx])/lhmax)):graphh-1;ctx.lineTo(x,y)}ctx.lineTo(graphw,graphh-1);ctx.lineTo(0,graphh-1);ctx.fill()}else{for(var x=0;x<graphw;x++){var hx=Math.floor(x*histo.length/graphw);var y=histo[hx]>1?Math.floor(graphh*(1-Math.log(histo[hx])/lhmax)):graphh-1;ctx.lineTo(x,y)}ctx.lineTo(graphw,graphh-1);ctx.lineTo(0,graphh-1);ctx.fill()}}}};Histogram.prototype.render=function(){var _this=this;return React.createElement("canvas",{width:"400",height:"150",ref:function(el){_this.canvas=el}})};Histogram=__decorate([mobx_react_1.observer],Histogram);return Histogram}(React.Component);exports.default=Histogram},function(module,exports,__webpack_require__){"use strict";
/*!
 * isobject <https://github.com/jonschlinkert/isobject>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */module.exports=function isObject(val){return val!=null&&typeof val==="object"&&Array.isArray(val)===false}},function(module,exports,__webpack_require__){"use strict";
/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */var isObject=__webpack_require__(56);function isObjectObject(o){return isObject(o)===true&&Object.prototype.toString.call(o)==="[object Object]"}module.exports=function isPlainObject(o){var ctor,prot;if(isObjectObject(o)===false)return false;ctor=o.constructor;if(typeof ctor!=="function")return false;prot=ctor.prototype;if(isObjectObject(prot)===false)return false;if(prot.hasOwnProperty("isPrototypeOf")===false){return false}return true}},function(module,exports,__webpack_require__){"use strict";
/*!
 * is-extendable <https://github.com/jonschlinkert/is-extendable>
 *
 * Copyright (c) 2015-2017, Jon Schlinkert.
 * Released under the MIT License.
 */var isPlainObject=__webpack_require__(57);module.exports=function isExtendable(val){return isPlainObject(val)||typeof val==="function"||Array.isArray(val)}},function(module,exports,__webpack_require__){"use strict";var ReactPropTypesSecret="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";module.exports=ReactPropTypesSecret},function(module,exports,__webpack_require__){"use strict";var emptyFunction=__webpack_require__(15);var invariant=__webpack_require__(16);var ReactPropTypesSecret=__webpack_require__(59);module.exports=function(){function shim(props,propName,componentName,location,propFullName,secret){if(secret===ReactPropTypesSecret){return}invariant(false,"Calling PropTypes validators directly is not supported by the `prop-types` package. "+"Use PropTypes.checkPropTypes() to call them. "+"Read more at http://fb.me/use-check-prop-types")}shim.isRequired=shim;function getShim(){return shim}var ReactPropTypes={array:shim,bool:shim,func:shim,number:shim,object:shim,string:shim,symbol:shim,any:shim,arrayOf:getShim,element:shim,instanceOf:getShim,node:shim,objectOf:getShim,oneOf:getShim,oneOfType:getShim,shape:getShim,exact:getShim};ReactPropTypes.checkPropTypes=emptyFunction;ReactPropTypes.PropTypes=ReactPropTypes;return ReactPropTypes}},function(module,exports,__webpack_require__){"use strict";var __extends=this&&this.__extends||function(){var extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b}||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p]};return function(d,b){extendStatics(d,b);function __(){this.constructor=d}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __)}}();var __assign=this&&this.__assign||Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++){s=arguments[i];for(var p in s)if(Object.prototype.hasOwnProperty.call(s,p))t[p]=s[p]}return t};var __decorate=this&&this.__decorate||function(decorators,target,key,desc){var c=arguments.length,r=c<3?target:desc===null?desc=Object.getOwnPropertyDescriptor(target,key):desc,d;if(typeof Reflect==="object"&&typeof Reflect.decorate==="function")r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)if(d=decorators[i])r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r;return c>3&&r&&Object.defineProperty(target,key,r),r};Object.defineProperty(exports,"__esModule",{value:true});var mobx_react_1=__webpack_require__(5);var React=__webpack_require__(0);var react_cursor_position_1=__webpack_require__(34);var scaleFunctions_1=__webpack_require__(30);var histogram_1=__webpack_require__(55);var zoom_1=__webpack_require__(54);var Viewer=function(_super){__extends(Viewer,_super);function Viewer(props){var _this=_super.call(this,props)||this;_this.canvas=null;_this.state={x:0,y:0,canvas:null};return _this}Viewer.prototype.componentDidMount=function(){if(this.canvas){this.props.image.initRenderer(this.canvas);this.setState({canvas:this.canvas})}};Viewer.prototype.updatePosition=function(position){this.setState(__assign({},position))};Viewer.prototype.render=function(){var _this=this;return React.createElement("div",null,scaleFunctions_1.default.map(function(name){return React.createElement("button",{onClick:function(){return _this.props.image.updateScaleMode(name)},key:"edit-scale-"+name},name)}),React.createElement("br",null),React.createElement(react_cursor_position_1.default,{onPositionChanged:function(_a){var position=_a.position;return _this.updatePosition(position)},style:{display:"inline-block"}},React.createElement("canvas",{style:{width:800,height:800,background:"#000"},ref:function(el){_this.canvas=el}})),React.createElement(histogram_1.default,{stats:this.props.image.stats}),React.createElement(zoom_1.default,{width:200,height:150,x:this.state.x,y:this.state.y,canvasWidth:800,canvas:this.state.canvas}))};Viewer=__decorate([mobx_react_1.observer],Viewer);return Viewer}(React.Component);exports.default=Viewer},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var mobx_react_1=__webpack_require__(5);var React=__webpack_require__(0);var loadFile=function(e,imageStore){var files=e.currentTarget.files;if(files&&files.length>0&&files[0]){imageStore.addImage(files[0]);e.currentTarget.value=""}else{console.error("Could not load file")}};var ImageLoader=function(props){return React.createElement("input",{type:"file",accept:".fits,.fit,.FIT,.FITS",onChange:function(e){return loadFile(e,props.imageStore)}})};exports.default=mobx_react_1.inject("imageStore")(ImageLoader)},function(module,exports,__webpack_require__){"use strict";var __extends=this&&this.__extends||function(){var extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b}||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p]};return function(d,b){extendStatics(d,b);function __(){this.constructor=d}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __)}}();var __decorate=this&&this.__decorate||function(decorators,target,key,desc){var c=arguments.length,r=c<3?target:desc===null?desc=Object.getOwnPropertyDescriptor(target,key):desc,d;if(typeof Reflect==="object"&&typeof Reflect.decorate==="function")r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)if(d=decorators[i])r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r;return c>3&&r&&Object.defineProperty(target,key,r),r};Object.defineProperty(exports,"__esModule",{value:true});var mobx_react_1=__webpack_require__(5);var React=__webpack_require__(0);var ImageLoader_1=__webpack_require__(62);var Viewer_1=__webpack_require__(61);var App=function(_super){__extends(App,_super);function App(){return _super!==null&&_super.apply(this,arguments)||this}App.prototype.render=function(){return React.createElement("div",null,React.createElement("h1",null,this.props.appStore.name),this.props.imageStore.selectedImage===null&&React.createElement(ImageLoader_1.default,{imageStore:this.props.imageStore}),this.props.imageStore.selectedImage&&React.createElement(Viewer_1.default,{image:this.props.imageStore.selectedImage}))};App=__decorate([mobx_react_1.inject("appStore","imageStore"),mobx_react_1.observer],App);return App}(React.Component);exports.default=App},function(module,exports,__webpack_require__){"use strict";function isNode(object){var doc=object?object.ownerDocument||object:document;var defaultView=doc.defaultView||window;return!!(object&&(typeof defaultView.Node==="function"?object instanceof defaultView.Node:typeof object==="object"&&typeof object.nodeType==="number"&&typeof object.nodeName==="string"))}module.exports=isNode},function(module,exports,__webpack_require__){"use strict";var isNode=__webpack_require__(64);function isTextNode(object){return isNode(object)&&object.nodeType==3}module.exports=isTextNode},function(module,exports,__webpack_require__){"use strict";var isTextNode=__webpack_require__(65);function containsNode(outerNode,innerNode){if(!outerNode||!innerNode){return false}else if(outerNode===innerNode){return true}else if(isTextNode(outerNode)){return false}else if(isTextNode(innerNode)){return containsNode(outerNode,innerNode.parentNode)}else if("contains"in outerNode){return outerNode.contains(innerNode)}else if(outerNode.compareDocumentPosition){return!!(outerNode.compareDocumentPosition(innerNode)&16)}else{return false}}module.exports=containsNode},function(module,exports,__webpack_require__){"use strict";var hasOwnProperty=Object.prototype.hasOwnProperty;function is(x,y){if(x===y){return x!==0||y!==0||1/x===1/y}else{return x!==x&&y!==y}}function shallowEqual(objA,objB){if(is(objA,objB)){return true}if(typeof objA!=="object"||objA===null||typeof objB!=="object"||objB===null){return false}var keysA=Object.keys(objA);var keysB=Object.keys(objB);if(keysA.length!==keysB.length){return false}for(var i=0;i<keysA.length;i++){if(!hasOwnProperty.call(objB,keysA[i])||!is(objA[keysA[i]],objB[keysA[i]])){return false}}return true}module.exports=shallowEqual},function(module,exports,__webpack_require__){"use strict";function getActiveElement(doc){doc=doc||(typeof document!=="undefined"?document:undefined);if(typeof doc==="undefined"){return null}try{return doc.activeElement||doc.body}catch(e){return doc.body}}module.exports=getActiveElement},function(module,exports,__webpack_require__){"use strict";var canUseDOM=!!(typeof window!=="undefined"&&window.document&&window.document.createElement);var ExecutionEnvironment={canUseDOM:canUseDOM,canUseWorkers:typeof Worker!=="undefined",canUseEventListeners:canUseDOM&&!!(window.addEventListener||window.attachEvent),canUseViewport:canUseDOM&&!!window.screen,isInWorker:!canUseDOM};module.exports=ExecutionEnvironment},function(module,exports,__webpack_require__){"use strict";
/** @license React v16.3.2
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var ba=__webpack_require__(16),ea=__webpack_require__(0),m=__webpack_require__(69),A=__webpack_require__(6),C=__webpack_require__(15),fa=__webpack_require__(68),ha=__webpack_require__(67),ja=__webpack_require__(66),ka=__webpack_require__(31);function D(a){for(var b=arguments.length-1,c="http://reactjs.org/docs/error-decoder.html?invariant="+a,d=0;d<b;d++)c+="&args[]="+encodeURIComponent(arguments[d+1]);ba(!1,"Minified React error #"+a+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",c)}ea?void 0:D("227");function ma(a,b,c,d,e,f,h,g,k){this._hasCaughtError=!1;this._caughtError=null;var v=Array.prototype.slice.call(arguments,3);try{b.apply(c,v)}catch(l){this._caughtError=l,this._hasCaughtError=!0}}var E={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,invokeGuardedCallback:function(a,b,c,d,e,f,h,g,k){ma.apply(E,arguments)},invokeGuardedCallbackAndCatchFirstError:function(a,b,c,d,e,f,h,g,k){E.invokeGuardedCallback.apply(this,arguments);if(E.hasCaughtError()){var v=E.clearCaughtError();E._hasRethrowError||(E._hasRethrowError=!0,E._rethrowError=v)}},rethrowCaughtError:function(){return na.apply(E,arguments)},hasCaughtError:function(){return E._hasCaughtError},clearCaughtError:function(){if(E._hasCaughtError){var a=E._caughtError;E._caughtError=null;E._hasCaughtError=!1;return a}D("198")}};function na(){if(E._hasRethrowError){var a=E._rethrowError;E._rethrowError=null;E._hasRethrowError=!1;throw a}}var oa=null,pa={};function qa(){if(oa)for(var a in pa){var b=pa[a],c=oa.indexOf(a);-1<c?void 0:D("96",a);if(!ra[c]){b.extractEvents?void 0:D("97",a);ra[c]=b;c=b.eventTypes;for(var d in c){var e=void 0;var f=c[d],h=b,g=d;sa.hasOwnProperty(g)?D("99",g):void 0;sa[g]=f;var k=f.phasedRegistrationNames;if(k){for(e in k)k.hasOwnProperty(e)&&ta(k[e],h,g);e=!0}else f.registrationName?(ta(f.registrationName,h,g),e=!0):e=!1;e?void 0:D("98",d,a)}}}}function ta(a,b,c){ua[a]?D("100",a):void 0;ua[a]=b;va[a]=b.eventTypes[c].dependencies}var ra=[],sa={},ua={},va={};function wa(a){oa?D("101"):void 0;oa=Array.prototype.slice.call(a);qa()}function xa(a){var b=!1,c;for(c in a)if(a.hasOwnProperty(c)){var d=a[c];pa.hasOwnProperty(c)&&pa[c]===d||(pa[c]?D("102",c):void 0,pa[c]=d,b=!0)}b&&qa()}var Ca=Object.freeze({plugins:ra,eventNameDispatchConfigs:sa,registrationNameModules:ua,registrationNameDependencies:va,possibleRegistrationNames:null,injectEventPluginOrder:wa,injectEventPluginsByName:xa}),Da=null,Ea=null,Fa=null;function Ga(a,b,c,d){b=a.type||"unknown-event";a.currentTarget=Fa(d);E.invokeGuardedCallbackAndCatchFirstError(b,c,void 0,a);a.currentTarget=null}function Ha(a,b){null==b?D("30"):void 0;if(null==a)return b;if(Array.isArray(a)){if(Array.isArray(b))return a.push.apply(a,b),a;a.push(b);return a}return Array.isArray(b)?[a].concat(b):[a,b]}function Ia(a,b,c){Array.isArray(a)?a.forEach(b,c):a&&b.call(c,a)}var Ja=null;function Ka(a,b){if(a){var c=a._dispatchListeners,d=a._dispatchInstances;if(Array.isArray(c))for(var e=0;e<c.length&&!a.isPropagationStopped();e++)Ga(a,b,c[e],d[e]);else c&&Ga(a,b,c,d);a._dispatchListeners=null;a._dispatchInstances=null;a.isPersistent()||a.constructor.release(a)}}function La(a){return Ka(a,!0)}function Ma(a){return Ka(a,!1)}var Na={injectEventPluginOrder:wa,injectEventPluginsByName:xa};function Oa(a,b){var c=a.stateNode;if(!c)return null;var d=Da(c);if(!d)return null;c=d[b];a:switch(b){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(d=!d.disabled)||(a=a.type,d=!("button"===a||"input"===a||"select"===a||"textarea"===a));a=!d;break a;default:a=!1}if(a)return null;c&&"function"!==typeof c?D("231",b,typeof c):void 0;return c}function Pa(a,b){null!==a&&(Ja=Ha(Ja,a));a=Ja;Ja=null;a&&(b?Ia(a,La):Ia(a,Ma),Ja?D("95"):void 0,E.rethrowCaughtError())}function Qa(a,b,c,d){for(var e=null,f=0;f<ra.length;f++){var h=ra[f];h&&(h=h.extractEvents(a,b,c,d))&&(e=Ha(e,h))}Pa(e,!1)}var Ra=Object.freeze({injection:Na,getListener:Oa,runEventsInBatch:Pa,runExtractedEventsInBatch:Qa}),Sa=Math.random().toString(36).slice(2),F="__reactInternalInstance$"+Sa,Ta="__reactEventHandlers$"+Sa;function Ua(a){if(a[F])return a[F];for(;!a[F];)if(a.parentNode)a=a.parentNode;else return null;a=a[F];return 5===a.tag||6===a.tag?a:null}function Va(a){if(5===a.tag||6===a.tag)return a.stateNode;D("33")}function Xa(a){return a[Ta]||null}var bb=Object.freeze({precacheFiberNode:function(a,b){b[F]=a},getClosestInstanceFromNode:Ua,getInstanceFromNode:function(a){a=a[F];return!a||5!==a.tag&&6!==a.tag?null:a},getNodeFromInstance:Va,getFiberCurrentPropsFromNode:Xa,updateFiberProps:function(a,b){a[Ta]=b}});function L(a){do{a=a["return"]}while(a&&5!==a.tag);return a?a:null}function cb(a,b,c){for(var d=[];a;)d.push(a),a=L(a);for(a=d.length;0<a--;)b(d[a],"captured",c);for(a=0;a<d.length;a++)b(d[a],"bubbled",c)}function db(a,b,c){if(b=Oa(a,c.dispatchConfig.phasedRegistrationNames[b]))c._dispatchListeners=Ha(c._dispatchListeners,b),c._dispatchInstances=Ha(c._dispatchInstances,a)}function eb(a){a&&a.dispatchConfig.phasedRegistrationNames&&cb(a._targetInst,db,a)}function fb(a){if(a&&a.dispatchConfig.phasedRegistrationNames){var b=a._targetInst;b=b?L(b):null;cb(b,db,a)}}function gb(a,b,c){a&&c&&c.dispatchConfig.registrationName&&(b=Oa(a,c.dispatchConfig.registrationName))&&(c._dispatchListeners=Ha(c._dispatchListeners,b),c._dispatchInstances=Ha(c._dispatchInstances,a))}function hb(a){a&&a.dispatchConfig.registrationName&&gb(a._targetInst,null,a)}function ib(a){Ia(a,eb)}function jb(a,b,c,d){if(c&&d)a:{var e=c;for(var f=d,h=0,g=e;g;g=L(g))h++;g=0;for(var k=f;k;k=L(k))g++;for(;0<h-g;)e=L(e),h--;for(;0<g-h;)f=L(f),g--;for(;h--;){if(e===f||e===f.alternate)break a;e=L(e);f=L(f)}e=null}else e=null;f=e;for(e=[];c&&c!==f;){h=c.alternate;if(null!==h&&h===f)break;e.push(c);c=L(c)}for(c=[];d&&d!==f;){h=d.alternate;if(null!==h&&h===f)break;c.push(d);d=L(d)}for(d=0;d<e.length;d++)gb(e[d],"bubbled",a);for(a=c.length;0<a--;)gb(c[a],"captured",b)}var kb=Object.freeze({accumulateTwoPhaseDispatches:ib,accumulateTwoPhaseDispatchesSkipTarget:function(a){Ia(a,fb)},accumulateEnterLeaveDispatches:jb,accumulateDirectDispatches:function(a){Ia(a,hb)}}),lb=null;function mb(){!lb&&m.canUseDOM&&(lb="textContent"in document.documentElement?"textContent":"innerText");return lb}var M={_root:null,_startText:null,_fallbackText:null};function nb(){if(M._fallbackText)return M._fallbackText;var a,b=M._startText,c=b.length,d,e=ob(),f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var h=c-a;for(d=1;d<=h&&b[c-d]===e[f-d];d++);M._fallbackText=e.slice(a,1<d?1-d:void 0);return M._fallbackText}function ob(){return"value"in M._root?M._root.value:M._root[mb()]}var pb="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),qb={type:null,target:null,currentTarget:C.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function N(a,b,c,d){this.dispatchConfig=a;this._targetInst=b;this.nativeEvent=c;a=this.constructor.Interface;for(var e in a)a.hasOwnProperty(e)&&((b=a[e])?this[e]=b(c):"target"===e?this.target=d:this[e]=c[e]);this.isDefaultPrevented=(null!=c.defaultPrevented?c.defaultPrevented:!1===c.returnValue)?C.thatReturnsTrue:C.thatReturnsFalse;this.isPropagationStopped=C.thatReturnsFalse;return this}A(N.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():"unknown"!==typeof a.returnValue&&(a.returnValue=!1),this.isDefaultPrevented=C.thatReturnsTrue)},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():"unknown"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=C.thatReturnsTrue)},persist:function(){this.isPersistent=C.thatReturnsTrue},isPersistent:C.thatReturnsFalse,destructor:function(){var a=this.constructor.Interface,b;for(b in a)this[b]=null;for(a=0;a<pb.length;a++)this[pb[a]]=null}});N.Interface=qb;N.extend=function(a){function b(){}function c(){return d.apply(this,arguments)}var d=this;b.prototype=d.prototype;var e=new b;A(e,c.prototype);c.prototype=e;c.prototype.constructor=c;c.Interface=A({},d.Interface,a);c.extend=d.extend;rb(c);return c};rb(N);function sb(a,b,c,d){if(this.eventPool.length){var e=this.eventPool.pop();this.call(e,a,b,c,d);return e}return new this(a,b,c,d)}function tb(a){a instanceof this?void 0:D("223");a.destructor();10>this.eventPool.length&&this.eventPool.push(a)}function rb(a){a.eventPool=[];a.getPooled=sb;a.release=tb}var ub=N.extend({data:null}),vb=N.extend({data:null}),wb=[9,13,27,32],xb=m.canUseDOM&&"CompositionEvent"in window,yb=null;m.canUseDOM&&"documentMode"in document&&(yb=document.documentMode);var zb=m.canUseDOM&&"TextEvent"in window&&!yb,Ab=m.canUseDOM&&(!xb||yb&&8<yb&&11>=yb),Bb=String.fromCharCode(32),Kb={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["topCompositionEnd","topKeyPress","topTextInput","topPaste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"topBlur topCompositionEnd topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"topBlur topCompositionStart topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"topBlur topCompositionUpdate topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")}},Lb=!1;function Mb(a,b){switch(a){case"topKeyUp":return-1!==wb.indexOf(b.keyCode);case"topKeyDown":return 229!==b.keyCode;case"topKeyPress":case"topMouseDown":case"topBlur":return!0;default:return!1}}function Nb(a){a=a.detail;return"object"===typeof a&&"data"in a?a.data:null}var Ob=!1;function Pb(a,b){switch(a){case"topCompositionEnd":return Nb(b);case"topKeyPress":if(32!==b.which)return null;Lb=!0;return Bb;case"topTextInput":return a=b.data,a===Bb&&Lb?null:a;default:return null}}function Qb(a,b){if(Ob)return"topCompositionEnd"===a||!xb&&Mb(a,b)?(a=nb(),M._root=null,M._startText=null,M._fallbackText=null,Ob=!1,a):null;switch(a){case"topPaste":return null;case"topKeyPress":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case"topCompositionEnd":return Ab?null:b.data;default:return null}}var Rb={eventTypes:Kb,extractEvents:function(a,b,c,d){var e=void 0;var f=void 0;if(xb)b:{switch(a){case"topCompositionStart":e=Kb.compositionStart;break b;case"topCompositionEnd":e=Kb.compositionEnd;break b;case"topCompositionUpdate":e=Kb.compositionUpdate;break b}e=void 0}else Ob?Mb(a,c)&&(e=Kb.compositionEnd):"topKeyDown"===a&&229===c.keyCode&&(e=Kb.compositionStart);e?(Ab&&(Ob||e!==Kb.compositionStart?e===Kb.compositionEnd&&Ob&&(f=nb()):(M._root=d,M._startText=ob(),Ob=!0)),e=ub.getPooled(e,b,c,d),f?e.data=f:(f=Nb(c),null!==f&&(e.data=f)),ib(e),f=e):f=null;(a=zb?Pb(a,c):Qb(a,c))?(b=vb.getPooled(Kb.beforeInput,b,c,d),b.data=a,ib(b)):b=null;return null===f?b:null===b?f:[f,b]}},Sb=null,Tb={injectFiberControlledHostComponent:function(a){Sb=a}},Ub=null,Vb=null;function Wb(a){if(a=Ea(a)){Sb&&"function"===typeof Sb.restoreControlledState?void 0:D("194");var b=Da(a.stateNode);Sb.restoreControlledState(a.stateNode,a.type,b)}}function Xb(a){Ub?Vb?Vb.push(a):Vb=[a]:Ub=a}function Yb(){return null!==Ub||null!==Vb}function Zb(){if(Ub){var a=Ub,b=Vb;Vb=Ub=null;Wb(a);if(b)for(a=0;a<b.length;a++)Wb(b[a])}}var $b=Object.freeze({injection:Tb,enqueueStateRestore:Xb,needsStateRestore:Yb,restoreStateIfNeeded:Zb});function ac(a,b){return a(b)}function bc(a,b,c){return a(b,c)}function cc(){}var dc=!1;function ec(a,b){if(dc)return a(b);dc=!0;try{return ac(a,b)}finally{dc=!1,Yb()&&(cc(),Zb())}}var fc={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function gc(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return"input"===b?!!fc[a.type]:"textarea"===b?!0:!1}function hc(a){a=a.target||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}function ic(a,b){if(!m.canUseDOM||b&&!("addEventListener"in document))return!1;a="on"+a;b=a in document;b||(b=document.createElement("div"),b.setAttribute(a,"return;"),b="function"===typeof b[a]);return b}function jc(a){var b=a.type;return(a=a.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===b||"radio"===b)}function kc(a){var b=jc(a)?"checked":"value",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=""+a[b];if(!a.hasOwnProperty(b)&&"function"===typeof c.get&&"function"===typeof c.set)return Object.defineProperty(a,b,{configurable:!0,get:function(){return c.get.call(this)},set:function(a){d=""+a;c.set.call(this,a)}}),Object.defineProperty(a,b,{enumerable:c.enumerable}),{getValue:function(){return d},setValue:function(a){d=""+a},stopTracking:function(){a._valueTracker=null;delete a[b]}}}function lc(a){a._valueTracker||(a._valueTracker=kc(a))}function mc(a){if(!a)return!1;var b=a._valueTracker;if(!b)return!0;var c=b.getValue();var d="";a&&(d=jc(a)?a.checked?"true":"false":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}var nc=ea.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,O="function"===typeof Symbol&&Symbol["for"],oc=O?Symbol["for"]("react.element"):60103,pc=O?Symbol["for"]("react.call"):60104,qc=O?Symbol["for"]("react.return"):60105,rc=O?Symbol["for"]("react.portal"):60106,sc=O?Symbol["for"]("react.fragment"):60107,tc=O?Symbol["for"]("react.strict_mode"):60108,uc=O?Symbol["for"]("react.provider"):60109,vc=O?Symbol["for"]("react.context"):60110,wc=O?Symbol["for"]("react.async_mode"):60111,xc=O?Symbol["for"]("react.forward_ref"):60112,yc="function"===typeof Symbol&&Symbol.iterator;function zc(a){if(null===a||"undefined"===typeof a)return null;a=yc&&a[yc]||a["@@iterator"];return"function"===typeof a?a:null}function Ac(a){a=a.type;if("function"===typeof a)return a.displayName||a.name;if("string"===typeof a)return a;switch(a){case sc:return"ReactFragment";case rc:return"ReactPortal";case pc:return"ReactCall";case qc:return"ReactReturn"}if("object"===typeof a&&null!==a)switch(a.$$typeof){case xc:return a=a.render.displayName||a.render.name||"",""!==a?"ForwardRef("+a+")":"ForwardRef"}return null}function Bc(a){var b="";do{a:switch(a.tag){case 0:case 1:case 2:case 5:var c=a._debugOwner,d=a._debugSource;var e=Ac(a);var f=null;c&&(f=Ac(c));c=d;e="\n    in "+(e||"Unknown")+(c?" (at "+c.fileName.replace(/^.*[\\\/]/,"")+":"+c.lineNumber+")":f?" (created by "+f+")":"");break a;default:e=""}b+=e;a=a["return"]}while(a);return b}var Cc=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,Dc={},Ec={};function Fc(a){if(Ec.hasOwnProperty(a))return!0;if(Dc.hasOwnProperty(a))return!1;if(Cc.test(a))return Ec[a]=!0;Dc[a]=!0;return!1}function Gc(a,b,c,d){if(null!==c&&0===c.type)return!1;switch(typeof b){case"function":case"symbol":return!0;case"boolean":if(d)return!1;if(null!==c)return!c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return"data-"!==a&&"aria-"!==a;default:return!1}}function Hc(a,b,c,d){if(null===b||"undefined"===typeof b||Gc(a,b,c,d))return!0;if(null!==c)switch(c.type){case 3:return!b;case 4:return!1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return!1}function U(a,b,c,d,e){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b}var V={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a){V[a]=new U(a,0,!1,a,null)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(a){var b=a[0];V[b]=new U(b,1,!1,a[1],null)});["contentEditable","draggable","spellCheck","value"].forEach(function(a){V[a]=new U(a,2,!1,a.toLowerCase(),null)});["autoReverse","externalResourcesRequired","preserveAlpha"].forEach(function(a){V[a]=new U(a,2,!1,a,null)});"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a){V[a]=new U(a,3,!1,a.toLowerCase(),null)});["checked","multiple","muted","selected"].forEach(function(a){V[a]=new U(a,3,!0,a.toLowerCase(),null)});["capture","download"].forEach(function(a){V[a]=new U(a,4,!1,a.toLowerCase(),null)});["cols","rows","size","span"].forEach(function(a){V[a]=new U(a,6,!1,a.toLowerCase(),null)});["rowSpan","start"].forEach(function(a){V[a]=new U(a,5,!1,a.toLowerCase(),null)});var Sc=/[\-:]([a-z])/g;function Tc(a){return a[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a){var b=a.replace(Sc,Tc);V[b]=new U(b,1,!1,a,null)});"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a){var b=a.replace(Sc,Tc);V[b]=new U(b,1,!1,a,"http://www.w3.org/1999/xlink")});["xml:base","xml:lang","xml:space"].forEach(function(a){var b=a.replace(Sc,Tc);V[b]=new U(b,1,!1,a,"http://www.w3.org/XML/1998/namespace")});V.tabIndex=new U("tabIndex",1,!1,"tabindex",null);function Uc(a,b,c,d){var e=V.hasOwnProperty(b)?V[b]:null;var f=null!==e?0===e.type:d?!1:!(2<b.length)||"o"!==b[0]&&"O"!==b[0]||"n"!==b[1]&&"N"!==b[1]?!1:!0;f||(Hc(b,c,e,d)&&(c=null),d||null===e?Fc(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,""+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:"":c:(b=e.attributeName,d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?"":""+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c))))}function Vc(a,b){var c=b.checked;return A({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=c?c:a._wrapperState.initialChecked})}function Wc(a,b){var c=null==b.defaultValue?"":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=Xc(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:"checkbox"===b.type||"radio"===b.type?null!=b.checked:null!=b.value}}function Yc(a,b){b=b.checked;null!=b&&Uc(a,"checked",b,!1)}function Zc(a,b){Yc(a,b);var c=Xc(b.value);if(null!=c)if("number"===b.type){if(0===c&&""===a.value||a.value!=c)a.value=""+c}else a.value!==""+c&&(a.value=""+c);b.hasOwnProperty("value")?$c(a,b.type,c):b.hasOwnProperty("defaultValue")&&$c(a,b.type,Xc(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked)}function ad(a,b){if(b.hasOwnProperty("value")||b.hasOwnProperty("defaultValue"))""===a.value&&(a.value=""+a._wrapperState.initialValue),a.defaultValue=""+a._wrapperState.initialValue;b=a.name;""!==b&&(a.name="");a.defaultChecked=!a.defaultChecked;a.defaultChecked=!a.defaultChecked;""!==b&&(a.name=b)}function $c(a,b,c){if("number"!==b||a.ownerDocument.activeElement!==a)null==c?a.defaultValue=""+a._wrapperState.initialValue:a.defaultValue!==""+c&&(a.defaultValue=""+c)}function Xc(a){switch(typeof a){case"boolean":case"number":case"object":case"string":case"undefined":return a;default:return""}}var bd={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"topBlur topChange topClick topFocus topInput topKeyDown topKeyUp topSelectionChange".split(" ")}};function cd(a,b,c){a=N.getPooled(bd.change,a,b,c);a.type="change";Xb(c);ib(a);return a}var dd=null,ed=null;function fd(a){Pa(a,!1)}function gd(a){var b=Va(a);if(mc(b))return a}function hd(a,b){if("topChange"===a)return b}var id=!1;m.canUseDOM&&(id=ic("input")&&(!document.documentMode||9<document.documentMode));function jd(){dd&&(dd.detachEvent("onpropertychange",kd),ed=dd=null)}function kd(a){"value"===a.propertyName&&gd(ed)&&(a=cd(ed,a,hc(a)),ec(fd,a))}function ld(a,b,c){"topFocus"===a?(jd(),dd=b,ed=c,dd.attachEvent("onpropertychange",kd)):"topBlur"===a&&jd()}function md(a){if("topSelectionChange"===a||"topKeyUp"===a||"topKeyDown"===a)return gd(ed)}function nd(a,b){if("topClick"===a)return gd(b)}function od(a,b){if("topInput"===a||"topChange"===a)return gd(b)}var pd={eventTypes:bd,_isInputEventSupported:id,extractEvents:function(a,b,c,d){var e=b?Va(b):window,f=void 0,h=void 0,g=e.nodeName&&e.nodeName.toLowerCase();"select"===g||"input"===g&&"file"===e.type?f=hd:gc(e)?id?f=od:(f=md,h=ld):(g=e.nodeName)&&"input"===g.toLowerCase()&&("checkbox"===e.type||"radio"===e.type)&&(f=nd);if(f&&(f=f(a,b)))return cd(f,c,d);h&&h(a,e,b);"topBlur"===a&&null!=b&&(a=b._wrapperState||e._wrapperState)&&a.controlled&&"number"===e.type&&$c(e,"number",e.value)}},qd=N.extend({view:null,detail:null}),rd={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function sd(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=rd[a])?!!b[a]:!1}function td(){return sd}var ud=qd.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:td,button:null,buttons:null,relatedTarget:function(a){return a.relatedTarget||(a.fromElement===a.srcElement?a.toElement:a.fromElement)}}),vd={mouseEnter:{registrationName:"onMouseEnter",dependencies:["topMouseOut","topMouseOver"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["topMouseOut","topMouseOver"]}},wd={eventTypes:vd,extractEvents:function(a,b,c,d){if("topMouseOver"===a&&(c.relatedTarget||c.fromElement)||"topMouseOut"!==a&&"topMouseOver"!==a)return null;var e=d.window===d?d:(e=d.ownerDocument)?e.defaultView||e.parentWindow:window;"topMouseOut"===a?(a=b,b=(b=c.relatedTarget||c.toElement)?Ua(b):null):a=null;if(a===b)return null;var f=null==a?e:Va(a);e=null==b?e:Va(b);var h=ud.getPooled(vd.mouseLeave,a,c,d);h.type="mouseleave";h.target=f;h.relatedTarget=e;c=ud.getPooled(vd.mouseEnter,b,c,d);c.type="mouseenter";c.target=e;c.relatedTarget=f;jb(h,c,a,b);return[h,c]}};function xd(a){var b=a;if(a.alternate)for(;b["return"];)b=b["return"];else{if(0!==(b.effectTag&2))return 1;for(;b["return"];)if(b=b["return"],0!==(b.effectTag&2))return 1}return 3===b.tag?2:3}function yd(a){return(a=a._reactInternalFiber)?2===xd(a):!1}function zd(a){2!==xd(a)?D("188"):void 0}function Ad(a){var b=a.alternate;if(!b)return b=xd(a),3===b?D("188"):void 0,1===b?null:a;for(var c=a,d=b;;){var e=c["return"],f=e?e.alternate:null;if(!e||!f)break;if(e.child===f.child){for(var h=e.child;h;){if(h===c)return zd(e),a;if(h===d)return zd(e),b;h=h.sibling}D("188")}if(c["return"]!==d["return"])c=e,d=f;else{h=!1;for(var g=e.child;g;){if(g===c){h=!0;c=e;d=f;break}if(g===d){h=!0;d=e;c=f;break}g=g.sibling}if(!h){for(g=f.child;g;){if(g===c){h=!0;c=f;d=e;break}if(g===d){h=!0;d=f;c=e;break}g=g.sibling}h?void 0:D("189")}}c.alternate!==d?D("190"):void 0}3!==c.tag?D("188"):void 0;return c.stateNode.current===c?a:b}function Bd(a){a=Ad(a);if(!a)return null;for(var b=a;;){if(5===b.tag||6===b.tag)return b;if(b.child)b.child["return"]=b,b=b.child;else{if(b===a)break;for(;!b.sibling;){if(!b["return"]||b["return"]===a)return null;b=b["return"]}b.sibling["return"]=b["return"];b=b.sibling}}return null}function Cd(a){a=Ad(a);if(!a)return null;for(var b=a;;){if(5===b.tag||6===b.tag)return b;if(b.child&&4!==b.tag)b.child["return"]=b,b=b.child;else{if(b===a)break;for(;!b.sibling;){if(!b["return"]||b["return"]===a)return null;b=b["return"]}b.sibling["return"]=b["return"];b=b.sibling}}return null}var Dd=N.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Ed=N.extend({clipboardData:function(a){return"clipboardData"in a?a.clipboardData:window.clipboardData}}),Fd=qd.extend({relatedTarget:null});function Gd(a){var b=a.keyCode;"charCode"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}var Hd={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Id={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Jd=qd.extend({key:function(a){if(a.key){var b=Hd[a.key]||a.key;if("Unidentified"!==b)return b}return"keypress"===a.type?(a=Gd(a),13===a?"Enter":String.fromCharCode(a)):"keydown"===a.type||"keyup"===a.type?Id[a.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:td,charCode:function(a){return"keypress"===a.type?Gd(a):0},keyCode:function(a){return"keydown"===a.type||"keyup"===a.type?a.keyCode:0},which:function(a){return"keypress"===a.type?Gd(a):"keydown"===a.type||"keyup"===a.type?a.keyCode:0}}),Kd=ud.extend({dataTransfer:null}),Ld=qd.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:td}),Md=N.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),Nd=ud.extend({deltaX:function(a){return"deltaX"in a?a.deltaX:"wheelDeltaX"in a?-a.wheelDeltaX:0},deltaY:function(a){return"deltaY"in a?a.deltaY:"wheelDeltaY"in a?-a.wheelDeltaY:"wheelDelta"in a?-a.wheelDelta:0},deltaZ:null,deltaMode:null}),Od={},Pd={};function Qd(a,b){var c=a[0].toUpperCase()+a.slice(1),d="on"+c;c="top"+c;b={phasedRegistrationNames:{bubbled:d,captured:d+"Capture"},dependencies:[c],isInteractive:b};Od[a]=b;Pd[c]=b}"blur cancel click close contextMenu copy cut doubleClick dragEnd dragStart drop focus input invalid keyDown keyPress keyUp mouseDown mouseUp paste pause play rateChange reset seeked submit touchCancel touchEnd touchStart volumeChange".split(" ").forEach(function(a){Qd(a,!0)});"abort animationEnd animationIteration animationStart canPlay canPlayThrough drag dragEnter dragExit dragLeave dragOver durationChange emptied encrypted ended error load loadedData loadedMetadata loadStart mouseMove mouseOut mouseOver playing progress scroll seeking stalled suspend timeUpdate toggle touchMove transitionEnd waiting wheel".split(" ").forEach(function(a){Qd(a,!1)});var Rd={eventTypes:Od,isInteractiveTopLevelEventType:function(a){a=Pd[a];return void 0!==a&&!0===a.isInteractive},extractEvents:function(a,b,c,d){var e=Pd[a];if(!e)return null;switch(a){case"topKeyPress":if(0===Gd(c))return null;case"topKeyDown":case"topKeyUp":a=Jd;break;case"topBlur":case"topFocus":a=Fd;break;case"topClick":if(2===c.button)return null;case"topDoubleClick":case"topMouseDown":case"topMouseMove":case"topMouseUp":case"topMouseOut":case"topMouseOver":case"topContextMenu":a=ud;break;case"topDrag":case"topDragEnd":case"topDragEnter":case"topDragExit":case"topDragLeave":case"topDragOver":case"topDragStart":case"topDrop":a=Kd;break;case"topTouchCancel":case"topTouchEnd":case"topTouchMove":case"topTouchStart":a=Ld;break;case"topAnimationEnd":case"topAnimationIteration":case"topAnimationStart":a=Dd;break;case"topTransitionEnd":a=Md;break;case"topScroll":a=qd;break;case"topWheel":a=Nd;break;case"topCopy":case"topCut":case"topPaste":a=Ed;break;default:a=N}b=a.getPooled(e,b,c,d);ib(b);return b}},Sd=Rd.isInteractiveTopLevelEventType,Td=[];function Ud(a){var b=a.targetInst;do{if(!b){a.ancestors.push(b);break}var c;for(c=b;c["return"];)c=c["return"];c=3!==c.tag?null:c.stateNode.containerInfo;if(!c)break;a.ancestors.push(b);b=Ua(c)}while(b);for(c=0;c<a.ancestors.length;c++)b=a.ancestors[c],Qa(a.topLevelType,b,a.nativeEvent,hc(a.nativeEvent))}var Vd=!0;function Wd(a){Vd=!!a}function W(a,b,c){if(!c)return null;a=(Sd(a)?Xd:Yd).bind(null,a);c.addEventListener(b,a,!1)}function Zd(a,b,c){if(!c)return null;a=(Sd(a)?Xd:Yd).bind(null,a);c.addEventListener(b,a,!0)}function Xd(a,b){bc(Yd,a,b)}function Yd(a,b){if(Vd){var c=hc(b);c=Ua(c);null!==c&&"number"===typeof c.tag&&2!==xd(c)&&(c=null);if(Td.length){var d=Td.pop();d.topLevelType=a;d.nativeEvent=b;d.targetInst=c;a=d}else a={topLevelType:a,nativeEvent:b,targetInst:c,ancestors:[]};try{ec(Ud,a)}finally{a.topLevelType=null,a.nativeEvent=null,a.targetInst=null,a.ancestors.length=0,10>Td.length&&Td.push(a)}}}var $d=Object.freeze({get _enabled(){return Vd},setEnabled:Wd,isEnabled:function(){return Vd},trapBubbledEvent:W,trapCapturedEvent:Zd,dispatchEvent:Yd});function ae(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c["Webkit"+a]="webkit"+b;c["Moz"+a]="moz"+b;c["ms"+a]="MS"+b;c["O"+a]="o"+b.toLowerCase();return c}var be={animationend:ae("Animation","AnimationEnd"),animationiteration:ae("Animation","AnimationIteration"),animationstart:ae("Animation","AnimationStart"),transitionend:ae("Transition","TransitionEnd")},ce={},de={};m.canUseDOM&&(de=document.createElement("div").style,"AnimationEvent"in window||(delete be.animationend.animation,delete be.animationiteration.animation,delete be.animationstart.animation),"TransitionEvent"in window||delete be.transitionend.transition);function ee(a){if(ce[a])return ce[a];if(!be[a])return a;var b=be[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in de)return ce[a]=b[c];return a}var fe={topAnimationEnd:ee("animationend"),topAnimationIteration:ee("animationiteration"),topAnimationStart:ee("animationstart"),topBlur:"blur",topCancel:"cancel",topChange:"change",topClick:"click",topClose:"close",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoad:"load",topLoadStart:"loadstart",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topScroll:"scroll",topSelectionChange:"selectionchange",topTextInput:"textInput",topToggle:"toggle",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topTransitionEnd:ee("transitionend"),topWheel:"wheel"},ge={topAbort:"abort",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topSeeked:"seeked",topSeeking:"seeking",topStalled:"stalled",topSuspend:"suspend",topTimeUpdate:"timeupdate",topVolumeChange:"volumechange",topWaiting:"waiting"},he={},ie=0,je="_reactListenersID"+(""+Math.random()).slice(2);function ke(a){Object.prototype.hasOwnProperty.call(a,je)||(a[je]=ie++,he[a[je]]={});return he[a[je]]}function le(a){for(;a&&a.firstChild;)a=a.firstChild;return a}function me(a,b){var c=le(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return{node:c,offset:b-a};a=d}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode}c=void 0}c=le(c)}}function ne(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&("input"===b&&"text"===a.type||"textarea"===b||"true"===a.contentEditable)}var oe=m.canUseDOM&&"documentMode"in document&&11>=document.documentMode,pe={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"topBlur topContextMenu topFocus topKeyDown topKeyUp topMouseDown topMouseUp topSelectionChange".split(" ")}},qe=null,re=null,se=null,te=!1;function ue(a,b){if(te||null==qe||qe!==fa())return null;var c=qe;"selectionStart"in c&&ne(c)?c={start:c.selectionStart,end:c.selectionEnd}:window.getSelection?(c=window.getSelection(),c={anchorNode:c.anchorNode,anchorOffset:c.anchorOffset,focusNode:c.focusNode,focusOffset:c.focusOffset}):c=void 0;return se&&ha(se,c)?null:(se=c,a=N.getPooled(pe.select,re,a,b),a.type="select",a.target=qe,ib(a),a)}var ve={eventTypes:pe,extractEvents:function(a,b,c,d){var e=d.window===d?d.document:9===d.nodeType?d:d.ownerDocument,f;if(!(f=!e)){a:{e=ke(e);f=va.onSelect;for(var h=0;h<f.length;h++){var g=f[h];if(!e.hasOwnProperty(g)||!e[g]){e=!1;break a}}e=!0}f=!e}if(f)return null;e=b?Va(b):window;switch(a){case"topFocus":if(gc(e)||"true"===e.contentEditable)qe=e,re=b,se=null;break;case"topBlur":se=re=qe=null;break;case"topMouseDown":te=!0;break;case"topContextMenu":case"topMouseUp":return te=!1,ue(c,d);case"topSelectionChange":if(oe)break;case"topKeyDown":case"topKeyUp":return ue(c,d)}return null}};Na.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" "));Da=bb.getFiberCurrentPropsFromNode;Ea=bb.getInstanceFromNode;Fa=bb.getNodeFromInstance;Na.injectEventPluginsByName({SimpleEventPlugin:Rd,EnterLeaveEventPlugin:wd,ChangeEventPlugin:pd,SelectEventPlugin:ve,BeforeInputEventPlugin:Rb});function xe(a,b,c,d){this.tag=a;this.key=c;this.stateNode=this.type=null;this.sibling=this.child=this["return"]=null;this.index=0;this.ref=null;this.pendingProps=b;this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.effectTag=0;this.lastEffect=this.firstEffect=this.nextEffect=null;this.expirationTime=0;this.alternate=null}function ze(a,b,c){var d=a.alternate;null===d?(d=new xe(a.tag,b,a.key,a.mode),d.type=a.type,d.stateNode=a.stateNode,d.alternate=a,a.alternate=d):(d.pendingProps=b,d.effectTag=0,d.nextEffect=null,d.firstEffect=null,d.lastEffect=null);d.expirationTime=c;d.child=a.child;d.memoizedProps=a.memoizedProps;d.memoizedState=a.memoizedState;d.updateQueue=a.updateQueue;d.sibling=a.sibling;d.index=a.index;d.ref=a.ref;return d}function Ae(a,b,c){var d=a.type,e=a.key;a=a.props;var f=void 0;if("function"===typeof d)f=d.prototype&&d.prototype.isReactComponent?2:0;else if("string"===typeof d)f=5;else switch(d){case sc:return Be(a.children,b,c,e);case wc:f=11;b|=3;break;case tc:f=11;b|=2;break;case pc:f=7;break;case qc:f=9;break;default:if("object"===typeof d&&null!==d)switch(d.$$typeof){case uc:f=13;break;case vc:f=12;break;case xc:f=14;break;default:if("number"===typeof d.tag)return b=d,b.pendingProps=a,b.expirationTime=c,b;D("130",null==d?d:typeof d,"")}else D("130",null==d?d:typeof d,"")}b=new xe(f,a,e,b);b.type=d;b.expirationTime=c;return b}function Be(a,b,c,d){a=new xe(10,a,d,b);a.expirationTime=c;return a}function Ce(a,b,c){a=new xe(6,a,null,b);a.expirationTime=c;return a}function De(a,b,c){b=new xe(4,null!==a.children?a.children:[],a.key,b);b.expirationTime=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}var Ee=null,Fe=null;function Ge(a){return function(b){try{return a(b)}catch(c){}}}function He(a){if("undefined"===typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var b=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(b.isDisabled||!b.supportsFiber)return!0;try{var c=b.inject(a);Ee=Ge(function(a){return b.onCommitFiberRoot(c,a)});Fe=Ge(function(a){return b.onCommitFiberUnmount(c,a)})}catch(d){}return!0}function Ie(a){"function"===typeof Ee&&Ee(a)}function Je(a){"function"===typeof Fe&&Fe(a)}new Set;function Ke(a){return{baseState:a,expirationTime:0,first:null,last:null,callbackList:null,hasForceUpdate:!1,isInitialized:!1,capturedValues:null}}function Le(a,b){null===a.last?a.first=a.last=b:(a.last.next=b,a.last=b);if(0===a.expirationTime||a.expirationTime>b.expirationTime)a.expirationTime=b.expirationTime}var Me=void 0,Ne=void 0;function Oe(a){Me=Ne=null;var b=a.alternate,c=a.updateQueue;null===c&&(c=a.updateQueue=Ke(null));null!==b?(a=b.updateQueue,null===a&&(a=b.updateQueue=Ke(null))):a=null;Me=c;Ne=a!==c?a:null}function Pe(a,b){Oe(a);a=Me;var c=Ne;null===c?Le(a,b):null===a.last||null===c.last?(Le(a,b),Le(c,b)):(Le(a,b),c.last=b)}function Qe(a,b,c,d){a=a.partialState;return"function"===typeof a?a.call(b,c,d):a}function Re(a,b,c,d,e,f){null!==a&&a.updateQueue===c&&(c=b.updateQueue={baseState:c.baseState,expirationTime:c.expirationTime,first:c.first,last:c.last,isInitialized:c.isInitialized,capturedValues:c.capturedValues,callbackList:null,hasForceUpdate:!1});c.expirationTime=0;c.isInitialized?a=c.baseState:(a=c.baseState=b.memoizedState,c.isInitialized=!0);for(var h=!0,g=c.first,k=!1;null!==g;){var v=g.expirationTime;if(v>f){var l=c.expirationTime;if(0===l||l>v)c.expirationTime=v;k||(k=!0,c.baseState=a)}else{k||(c.first=g.next,null===c.first&&(c.last=null));if(g.isReplace)a=Qe(g,d,a,e),h=!0;else if(v=Qe(g,d,a,e))a=h?A({},a,v):A(a,v),h=!1;g.isForced&&(c.hasForceUpdate=!0);null!==g.callback&&(v=c.callbackList,null===v&&(v=c.callbackList=[]),v.push(g));null!==g.capturedValue&&(v=c.capturedValues,null===v?c.capturedValues=[g.capturedValue]:v.push(g.capturedValue))}g=g.next}null!==c.callbackList?b.effectTag|=32:null!==c.first||c.hasForceUpdate||null!==c.capturedValues||(b.updateQueue=null);k||(c.baseState=a);return a}function Se(a,b){var c=a.callbackList;if(null!==c)for(a.callbackList=null,a=0;a<c.length;a++){var d=c[a],e=d.callback;d.callback=null;"function"!==typeof e?D("191",e):void 0;e.call(b)}}function Te(a,b,c,d,e){function f(a,b,c,d,e,f){if(null===b||null!==a.updateQueue&&a.updateQueue.hasForceUpdate)return!0;var n=a.stateNode;a=a.type;return"function"===typeof n.shouldComponentUpdate?n.shouldComponentUpdate(c,e,f):a.prototype&&a.prototype.isPureReactComponent?!ha(b,c)||!ha(d,e):!0}function h(a,b){b.updater=r;a.stateNode=b;b._reactInternalFiber=a}function g(a,b,c,d){a=b.state;"function"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);"function"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&r.enqueueReplaceState(b,b.state,null)}function k(a,b,c,d){a=a.type;if("function"===typeof a.getDerivedStateFromProps)return a.getDerivedStateFromProps.call(null,c,d)}var v=a.cacheContext,l=a.getMaskedContext,p=a.getUnmaskedContext,z=a.isContextConsumer,B=a.hasContextChanged,r={isMounted:yd,enqueueSetState:function(a,d,e){a=a._reactInternalFiber;e=void 0===e?null:e;var f=c(a);Pe(a,{expirationTime:f,partialState:d,callback:e,isReplace:!1,isForced:!1,capturedValue:null,next:null});b(a,f)},enqueueReplaceState:function(a,d,e){a=a._reactInternalFiber;e=void 0===e?null:e;var f=c(a);Pe(a,{expirationTime:f,partialState:d,callback:e,isReplace:!0,isForced:!1,capturedValue:null,next:null});b(a,f)},enqueueForceUpdate:function(a,d){a=a._reactInternalFiber;d=void 0===d?null:d;var e=c(a);Pe(a,{expirationTime:e,partialState:null,callback:d,isReplace:!1,isForced:!0,capturedValue:null,next:null});b(a,e)}};return{adoptClassInstance:h,callGetDerivedStateFromProps:k,constructClassInstance:function(a,b){var c=a.type,d=p(a),e=z(a),f=e?l(a,d):ka;c=new c(b,f);var n=null!==c.state&&void 0!==c.state?c.state:null;h(a,c);a.memoizedState=n;b=k(a,c,b,n);null!==b&&void 0!==b&&(a.memoizedState=A({},a.memoizedState,b));e&&v(a,d,f);return c},mountClassInstance:function(a,b){var c=a.type,d=a.alternate,e=a.stateNode,f=a.pendingProps,n=p(a);e.props=f;e.state=a.memoizedState;e.refs=ka;e.context=l(a,n);"function"===typeof c.getDerivedStateFromProps||"function"===typeof e.getSnapshotBeforeUpdate||"function"!==typeof e.UNSAFE_componentWillMount&&"function"!==typeof e.componentWillMount||(c=e.state,"function"===typeof e.componentWillMount&&e.componentWillMount(),"function"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),c!==e.state&&r.enqueueReplaceState(e,e.state,null),c=a.updateQueue,null!==c&&(e.state=Re(d,a,c,e,f,b)));"function"===typeof e.componentDidMount&&(a.effectTag|=4)},resumeMountClassInstance:function(a,b){var c=a.type,n=a.stateNode;n.props=a.memoizedProps;n.state=a.memoizedState;var h=a.memoizedProps,r=a.pendingProps,z=n.context,q=p(a);q=l(a,q);(c="function"===typeof c.getDerivedStateFromProps||"function"===typeof n.getSnapshotBeforeUpdate)||"function"!==typeof n.UNSAFE_componentWillReceiveProps&&"function"!==typeof n.componentWillReceiveProps||(h!==r||z!==q)&&g(a,n,r,q);z=a.memoizedState;b=null!==a.updateQueue?Re(null,a,a.updateQueue,n,r,b):z;var u=void 0;h!==r&&(u=k(a,n,r,b));if(null!==u&&void 0!==u){b=null===b||void 0===b?u:A({},b,u);var t=a.updateQueue;null!==t&&(t.baseState=A({},t.baseState,u))}if(!(h!==r||z!==b||B()||null!==a.updateQueue&&a.updateQueue.hasForceUpdate))return"function"===typeof n.componentDidMount&&(a.effectTag|=4),!1;(h=f(a,h,r,z,b,q))?(c||"function"!==typeof n.UNSAFE_componentWillMount&&"function"!==typeof n.componentWillMount||("function"===typeof n.componentWillMount&&n.componentWillMount(),"function"===typeof n.UNSAFE_componentWillMount&&n.UNSAFE_componentWillMount()),"function"===typeof n.componentDidMount&&(a.effectTag|=4)):("function"===typeof n.componentDidMount&&(a.effectTag|=4),d(a,r),e(a,b));n.props=r;n.state=b;n.context=q;return h},updateClassInstance:function(a,b,c){var n=b.type,x=b.stateNode;x.props=b.memoizedProps;x.state=b.memoizedState;var h=b.memoizedProps,r=b.pendingProps,q=x.context,u=p(b);u=l(b,u);(n="function"===typeof n.getDerivedStateFromProps||"function"===typeof x.getSnapshotBeforeUpdate)||"function"!==typeof x.UNSAFE_componentWillReceiveProps&&"function"!==typeof x.componentWillReceiveProps||(h!==r||q!==u)&&g(b,x,r,u);q=b.memoizedState;c=null!==b.updateQueue?Re(a,b,b.updateQueue,x,r,c):q;var t=void 0;h!==r&&(t=k(b,x,r,c));if(null!==t&&void 0!==t){c=null===c||void 0===c?t:A({},c,t);var y=b.updateQueue;null!==y&&(y.baseState=A({},y.baseState,t))}if(!(h!==r||q!==c||B()||null!==b.updateQueue&&b.updateQueue.hasForceUpdate))return"function"!==typeof x.componentDidUpdate||h===a.memoizedProps&&q===a.memoizedState||(b.effectTag|=4),"function"!==typeof x.getSnapshotBeforeUpdate||h===a.memoizedProps&&q===a.memoizedState||(b.effectTag|=2048),!1;(t=f(b,h,r,q,c,u))?(n||"function"!==typeof x.UNSAFE_componentWillUpdate&&"function"!==typeof x.componentWillUpdate||("function"===typeof x.componentWillUpdate&&x.componentWillUpdate(r,c,u),"function"===typeof x.UNSAFE_componentWillUpdate&&x.UNSAFE_componentWillUpdate(r,c,u)),"function"===typeof x.componentDidUpdate&&(b.effectTag|=4),"function"===typeof x.getSnapshotBeforeUpdate&&(b.effectTag|=2048)):("function"!==typeof x.componentDidUpdate||h===a.memoizedProps&&q===a.memoizedState||(b.effectTag|=4),"function"!==typeof x.getSnapshotBeforeUpdate||h===a.memoizedProps&&q===a.memoizedState||(b.effectTag|=2048),d(b,r),e(b,c));x.props=r;x.state=c;x.context=u;return t}}}var Ue=Array.isArray;function Ve(a,b,c){a=c.ref;if(null!==a&&"function"!==typeof a&&"object"!==typeof a){if(c._owner){c=c._owner;var d=void 0;c&&(2!==c.tag?D("110"):void 0,d=c.stateNode);d?void 0:D("147",a);var e=""+a;if(null!==b&&null!==b.ref&&b.ref._stringRef===e)return b.ref;b=function(a){var b=d.refs===ka?d.refs={}:d.refs;null===a?delete b[e]:b[e]=a};b._stringRef=e;return b}"string"!==typeof a?D("148"):void 0;c._owner?void 0:D("254",a)}return a}function We(a,b){"textarea"!==a.type&&D("31","[object Object]"===Object.prototype.toString.call(b)?"object with keys {"+Object.keys(b).join(", ")+"}":b,"")}function Xe(a){function b(b,c){if(a){var d=b.lastEffect;null!==d?(d.nextEffect=c,b.lastEffect=c):b.firstEffect=b.lastEffect=c;c.nextEffect=null;c.effectTag=8}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b,c){a=ze(a,b,c);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.effectTag=2,c):d;b.effectTag=2;return c}function h(b){a&&null===b.alternate&&(b.effectTag=2);return b}function g(a,b,c,d){if(null===b||6!==b.tag)return b=Ce(c,a.mode,d),b["return"]=a,b;b=e(b,c,d);b["return"]=a;return b}function k(a,b,c,d){if(null!==b&&b.type===c.type)return d=e(b,c.props,d),d.ref=Ve(a,b,c),d["return"]=a,d;d=Ae(c,a.mode,d);d.ref=Ve(a,b,c);d["return"]=a;return d}function v(a,b,c,d){if(null===b||4!==b.tag||b.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==c.implementation)return b=De(c,a.mode,d),b["return"]=a,b;b=e(b,c.children||[],d);b["return"]=a;return b}function l(a,b,c,d,f){if(null===b||10!==b.tag)return b=Be(c,a.mode,d,f),b["return"]=a,b;b=e(b,c,d);b["return"]=a;return b}function p(a,b,c){if("string"===typeof b||"number"===typeof b)return b=Ce(""+b,a.mode,c),b["return"]=a,b;if("object"===typeof b&&null!==b){switch(b.$$typeof){case oc:return c=Ae(b,a.mode,c),c.ref=Ve(a,null,b),c["return"]=a,c;case rc:return b=De(b,a.mode,c),b["return"]=a,b}if(Ue(b)||zc(b))return b=Be(b,a.mode,c,null),b["return"]=a,b;We(a,b)}return null}function z(a,b,c,d){var e=null!==b?b.key:null;if("string"===typeof c||"number"===typeof c)return null!==e?null:g(a,b,""+c,d);if("object"===typeof c&&null!==c){switch(c.$$typeof){case oc:return c.key===e?c.type===sc?l(a,b,c.props.children,d,e):k(a,b,c,d):null;case rc:return c.key===e?v(a,b,c,d):null}if(Ue(c)||zc(c))return null!==e?null:l(a,b,c,d,null);We(a,c)}return null}function B(a,b,c,d,e){if("string"===typeof d||"number"===typeof d)return a=a.get(c)||null,g(b,a,""+d,e);if("object"===typeof d&&null!==d){switch(d.$$typeof){case oc:return a=a.get(null===d.key?c:d.key)||null,d.type===sc?l(b,a,d.props.children,e,d.key):k(b,a,d,e);case rc:return a=a.get(null===d.key?c:d.key)||null,v(b,a,d,e)}if(Ue(d)||zc(d))return a=a.get(c)||null,l(b,a,d,e,null);We(b,d)}return null}function r(e,l,g,h){for(var r=null,k=null,q=l,u=l=0,t=null;null!==q&&u<g.length;u++){q.index>u?(t=q,q=null):t=q.sibling;var n=z(e,q,g[u],h);if(null===n){null===q&&(q=t);break}a&&q&&null===n.alternate&&b(e,q);l=f(n,l,u);null===k?r=n:k.sibling=n;k=n;q=t}if(u===g.length)return c(e,q),r;if(null===q){for(;u<g.length;u++)if(q=p(e,g[u],h))l=f(q,l,u),null===k?r=q:k.sibling=q,k=q;return r}for(q=d(e,q);u<g.length;u++)if(t=B(q,e,u,g[u],h)){if(a&&null!==t.alternate)q["delete"](null===t.key?u:t.key);l=f(t,l,u);null===k?r=t:k.sibling=t;k=t}a&&q.forEach(function(a){return b(e,a)});return r}function Q(e,l,g,h){var r=zc(g);"function"!==typeof r?D("150"):void 0;g=r.call(g);null==g?D("151"):void 0;for(var k=r=null,q=l,u=l=0,t=null,n=g.next();null!==q&&!n.done;u++,n=g.next()){q.index>u?(t=q,q=null):t=q.sibling;var H=z(e,q,n.value,h);if(null===H){q||(q=t);break}a&&q&&null===H.alternate&&b(e,q);l=f(H,l,u);null===k?r=H:k.sibling=H;k=H;q=t}if(n.done)return c(e,q),r;if(null===q){for(;!n.done;u++,n=g.next())n=p(e,n.value,h),null!==n&&(l=f(n,l,u),null===k?r=n:k.sibling=n,k=n);return r}for(q=d(e,q);!n.done;u++,n=g.next())if(n=B(q,e,u,n.value,h),null!==n){if(a&&null!==n.alternate)q["delete"](null===n.key?u:n.key);l=f(n,l,u);null===k?r=n:k.sibling=n;k=n}a&&q.forEach(function(a){return b(e,a)});return r}return function(a,d,f,l){"object"===typeof f&&null!==f&&f.type===sc&&null===f.key&&(f=f.props.children);var g="object"===typeof f&&null!==f;if(g)switch(f.$$typeof){case oc:a:{var k=f.key;for(g=d;null!==g;){if(g.key===k)if(10===g.tag?f.type===sc:g.type===f.type){c(a,g.sibling);d=e(g,f.type===sc?f.props.children:f.props,l);d.ref=Ve(a,g,f);d["return"]=a;a=d;break a}else{c(a,g);break}else b(a,g);g=g.sibling}f.type===sc?(d=Be(f.props.children,a.mode,l,f.key),d["return"]=a,a=d):(l=Ae(f,a.mode,l),l.ref=Ve(a,d,f),l["return"]=a,a=l)}return h(a);case rc:a:{for(g=f.key;null!==d;){if(d.key===g)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[],l);d["return"]=a;a=d;break a}else{c(a,d);break}else b(a,d);d=d.sibling}d=De(f,a.mode,l);d["return"]=a;a=d}return h(a)}if("string"===typeof f||"number"===typeof f)return f=""+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f,l),d["return"]=a,a=d):(c(a,d),d=Ce(f,a.mode,l),d["return"]=a,a=d),h(a);if(Ue(f))return r(a,d,f,l);if(zc(f))return Q(a,d,f,l);g&&We(a,f);if("undefined"===typeof f)switch(a.tag){case 2:case 1:l=a.type,D("152",l.displayName||l.name||"Component")}return c(a,d)}}var Ye=Xe(!0),Ze=Xe(!1);function $e(a,b,c,d,e,f,h){function g(a,b,c){k(a,b,c,b.expirationTime)}function k(a,b,c,d){b.child=null===a?Ze(b,null,c,d):Ye(b,a.child,c,d)}function v(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.effectTag|=128}function l(a,b,c,d,e,f){v(a,b);if(!c&&!e)return d&&y(b,!1),r(a,b);c=b.stateNode;nc.current=b;var l=e?null:c.render();b.effectTag|=1;e&&(k(a,b,null,f),b.child=null);k(a,b,l,f);b.memoizedState=c.state;b.memoizedProps=c.props;d&&y(b,!0);return b.child}function p(a){var b=a.stateNode;b.pendingContext?t(a,b.pendingContext,b.pendingContext!==b.context):b.context&&t(a,b.context,!1);Y(a,b.containerInfo)}function z(a,b,c,d){var e=a.child;for(null!==e&&(e["return"]=a);null!==e;){switch(e.tag){case 12:var f=e.stateNode|0;if(e.type===b&&0!==(f&c)){for(f=e;null!==f;){var l=f.alternate;if(0===f.expirationTime||f.expirationTime>d)f.expirationTime=d,null!==l&&(0===l.expirationTime||l.expirationTime>d)&&(l.expirationTime=d);else if(null!==l&&(0===l.expirationTime||l.expirationTime>d))l.expirationTime=d;else break;f=f["return"]}f=null}else f=e.child;break;case 13:f=e.type===a.type?null:e.child;break;default:f=e.child}if(null!==f)f["return"]=e;else for(f=e;null!==f;){if(f===a){f=null;break}e=f.sibling;if(null!==e){f=e;break}f=f["return"]}e=f}}function B(a,b,c){var d=b.type._context,e=b.pendingProps,f=b.memoizedProps;if(!q()&&f===e)return b.stateNode=0,G(b),r(a,b);var l=e.value;b.memoizedProps=e;if(null===f)l=1073741823;else if(f.value===e.value){if(f.children===e.children)return b.stateNode=0,G(b),r(a,b);l=0}else{var h=f.value;if(h===l&&(0!==h||1/h===1/l)||h!==h&&l!==l){if(f.children===e.children)return b.stateNode=0,G(b),r(a,b);l=0}else if(l="function"===typeof d._calculateChangedBits?d._calculateChangedBits(h,l):1073741823,l|=0,0===l){if(f.children===e.children)return b.stateNode=0,G(b),r(a,b)}else z(b,d,l,c)}b.stateNode=l;G(b);g(a,b,e.children);return b.child}function r(a,b){null!==a&&b.child!==a.child?D("153"):void 0;if(null!==b.child){a=b.child;var c=ze(a,a.pendingProps,a.expirationTime);b.child=c;for(c["return"]=b;null!==a.sibling;)a=a.sibling,c=c.sibling=ze(a,a.pendingProps,a.expirationTime),c["return"]=b;c.sibling=null}return b.child}var Q=a.shouldSetTextContent,n=a.shouldDeprioritizeSubtree,x=b.pushHostContext,Y=b.pushHostContainer,G=d.pushProvider,R=c.getMaskedContext,S=c.getUnmaskedContext,q=c.hasContextChanged,u=c.pushContextProvider,t=c.pushTopLevelContextObject,y=c.invalidateContextProvider,H=e.enterHydrationState,Wa=e.resetHydrationState,Cb=e.tryToClaimNextHydratableInstance;a=Te(c,f,h,function(a,b){a.memoizedProps=b},function(a,b){a.memoizedState=b});var Jc=a.adoptClassInstance,Kc=a.callGetDerivedStateFromProps,Lc=a.constructClassInstance,Db=a.mountClassInstance,Mc=a.resumeMountClassInstance,Eb=a.updateClassInstance;return{beginWork:function(a,b,c){if(0===b.expirationTime||b.expirationTime>c){switch(b.tag){case 3:p(b);break;case 2:u(b);break;case 4:Y(b,b.stateNode.containerInfo);break;case 13:G(b)}return null}switch(b.tag){case 0:null!==a?D("155"):void 0;var d=b.type,e=b.pendingProps,f=S(b);f=R(b,f);d=d(e,f);b.effectTag|=1;"object"===typeof d&&null!==d&&"function"===typeof d.render&&void 0===d.$$typeof?(f=b.type,b.tag=2,b.memoizedState=null!==d.state&&void 0!==d.state?d.state:null,"function"===typeof f.getDerivedStateFromProps&&(e=Kc(b,d,e,b.memoizedState),null!==e&&void 0!==e&&(b.memoizedState=A({},b.memoizedState,e))),e=u(b),Jc(b,d),Db(b,c),a=l(a,b,!0,e,!1,c)):(b.tag=1,g(a,b,d),b.memoizedProps=e,a=b.child);return a;case 1:return e=b.type,c=b.pendingProps,q()||b.memoizedProps!==c?(d=S(b),d=R(b,d),e=e(c,d),b.effectTag|=1,g(a,b,e),b.memoizedProps=c,a=b.child):a=r(a,b),a;case 2:e=u(b);null===a?null===b.stateNode?(Lc(b,b.pendingProps),Db(b,c),d=!0):d=Mc(b,c):d=Eb(a,b,c);f=!1;var h=b.updateQueue;null!==h&&null!==h.capturedValues&&(f=d=!0);return l(a,b,d,e,f,c);case 3:a:if(p(b),d=b.updateQueue,null!==d){f=b.memoizedState;e=Re(a,b,d,null,null,c);b.memoizedState=e;d=b.updateQueue;if(null!==d&&null!==d.capturedValues)d=null;else if(f===e){Wa();a=r(a,b);break a}else d=e.element;f=b.stateNode;(null===a||null===a.child)&&f.hydrate&&H(b)?(b.effectTag|=2,b.child=Ze(b,null,d,c)):(Wa(),g(a,b,d));b.memoizedState=e;a=b.child}else Wa(),a=r(a,b);return a;case 5:a:{x(b);null===a&&Cb(b);e=b.type;h=b.memoizedProps;d=b.pendingProps;f=null!==a?a.memoizedProps:null;if(!q()&&h===d){if(h=b.mode&1&&n(e,d))b.expirationTime=1073741823;if(!h||1073741823!==c){a=r(a,b);break a}}h=d.children;Q(e,d)?h=null:f&&Q(e,f)&&(b.effectTag|=16);v(a,b);1073741823!==c&&b.mode&1&&n(e,d)?(b.expirationTime=1073741823,b.memoizedProps=d,a=null):(g(a,b,h),b.memoizedProps=d,a=b.child)}return a;case 6:return null===a&&Cb(b),b.memoizedProps=b.pendingProps,null;case 8:b.tag=7;case 7:return e=b.pendingProps,q()||b.memoizedProps!==e||(e=b.memoizedProps),d=e.children,b.stateNode=null===a?Ze(b,b.stateNode,d,c):Ye(b,a.stateNode,d,c),b.memoizedProps=e,b.stateNode;case 9:return null;case 4:return Y(b,b.stateNode.containerInfo),e=b.pendingProps,q()||b.memoizedProps!==e?(null===a?b.child=Ye(b,null,e,c):g(a,b,e),b.memoizedProps=e,a=b.child):a=r(a,b),a;case 14:return c=b.type.render,c=c(b.pendingProps,b.ref),g(a,b,c),b.memoizedProps=c,b.child;case 10:return c=b.pendingProps,q()||b.memoizedProps!==c?(g(a,b,c),b.memoizedProps=c,a=b.child):a=r(a,b),a;case 11:return c=b.pendingProps.children,q()||null!==c&&b.memoizedProps!==c?(g(a,b,c),b.memoizedProps=c,a=b.child):a=r(a,b),a;case 13:return B(a,b,c);case 12:a:{d=b.type;f=b.pendingProps;h=b.memoizedProps;e=d._currentValue;var t=d._changedBits;if(q()||0!==t||h!==f){b.memoizedProps=f;var k=f.unstable_observedBits;if(void 0===k||null===k)k=1073741823;b.stateNode=k;if(0!==(t&k))z(b,d,t,c);else if(h===f){a=r(a,b);break a}c=f.children;c=c(e);g(a,b,c);a=b.child}else a=r(a,b)}return a;default:D("156")}}}}function af(a,b,c,d,e){function f(a){a.effectTag|=4}var h=a.createInstance,g=a.createTextInstance,k=a.appendInitialChild,v=a.finalizeInitialChildren,l=a.prepareUpdate,p=a.persistence,z=b.getRootHostContainer,B=b.popHostContext,r=b.getHostContext,Q=b.popHostContainer,n=c.popContextProvider,x=c.popTopLevelContextObject,Y=d.popProvider,G=e.prepareToHydrateHostInstance,R=e.prepareToHydrateHostTextInstance,S=e.popHydrationState,q=void 0,u=void 0,t=void 0;a.mutation?(q=function(){},u=function(a,b,c){(b.updateQueue=c)&&f(b)},t=function(a,b,c,d){c!==d&&f(b)}):p?D("235"):D("236");return{completeWork:function(a,b,c){var d=b.pendingProps;switch(b.tag){case 1:return null;case 2:return n(b),a=b.stateNode,d=b.updateQueue,null!==d&&null!==d.capturedValues&&(b.effectTag&=-65,"function"===typeof a.componentDidCatch?b.effectTag|=256:d.capturedValues=null),null;case 3:Q(b);x(b);d=b.stateNode;d.pendingContext&&(d.context=d.pendingContext,d.pendingContext=null);if(null===a||null===a.child)S(b),b.effectTag&=-3;q(b);a=b.updateQueue;null!==a&&null!==a.capturedValues&&(b.effectTag|=256);return null;case 5:B(b);c=z();var e=b.type;if(null!==a&&null!=b.stateNode){var p=a.memoizedProps,H=b.stateNode,y=r();H=l(H,e,p,d,c,y);u(a,b,H,e,p,d,c,y);a.ref!==b.ref&&(b.effectTag|=128)}else{if(!d)return null===b.stateNode?D("166"):void 0,null;a=r();if(S(b))G(b,c,a)&&f(b);else{p=h(e,d,c,a,b);a:for(y=b.child;null!==y;){if(5===y.tag||6===y.tag)k(p,y.stateNode);else if(4!==y.tag&&null!==y.child){y.child["return"]=y;y=y.child;continue}if(y===b)break;for(;null===y.sibling;){if(null===y["return"]||y["return"]===b)break a;y=y["return"]}y.sibling["return"]=y["return"];y=y.sibling}v(p,e,d,c,a)&&f(b);b.stateNode=p}null!==b.ref&&(b.effectTag|=128)}return null;case 6:if(a&&null!=b.stateNode)t(a,b,a.memoizedProps,d);else{if("string"!==typeof d)return null===b.stateNode?D("166"):void 0,null;a=z();c=r();S(b)?R(b)&&f(b):b.stateNode=g(d,a,c,b)}return null;case 7:(d=b.memoizedProps)?void 0:D("165");b.tag=8;e=[];a:for((p=b.stateNode)&&(p["return"]=b);null!==p;){if(5===p.tag||6===p.tag||4===p.tag)D("247");else if(9===p.tag)e.push(p.pendingProps.value);else if(null!==p.child){p.child["return"]=p;p=p.child;continue}for(;null===p.sibling;){if(null===p["return"]||p["return"]===b)break a;p=p["return"]}p.sibling["return"]=p["return"];p=p.sibling}p=d.handler;d=p(d.props,e);b.child=Ye(b,null!==a?a.child:null,d,c);return b.child;case 8:return b.tag=7,null;case 9:return null;case 14:return null;case 10:return null;case 11:return null;case 4:return Q(b),q(b),null;case 13:return Y(b),null;case 12:return null;case 0:D("167");default:D("156")}}}}function bf(a,b,c,d,e){var f=a.popHostContainer,h=a.popHostContext,g=b.popContextProvider,k=b.popTopLevelContextObject,v=c.popProvider;return{throwException:function(a,b,c){b.effectTag|=512;b.firstEffect=b.lastEffect=null;b={value:c,source:b,stack:Bc(b)};do{switch(a.tag){case 3:Oe(a);a.updateQueue.capturedValues=[b];a.effectTag|=1024;return;case 2:if(c=a.stateNode,0===(a.effectTag&64)&&null!==c&&"function"===typeof c.componentDidCatch&&!e(c)){Oe(a);c=a.updateQueue;var d=c.capturedValues;null===d?c.capturedValues=[b]:d.push(b);a.effectTag|=1024;return}}a=a["return"]}while(null!==a)},unwindWork:function(a){switch(a.tag){case 2:g(a);var b=a.effectTag;return b&1024?(a.effectTag=b&-1025|64,a):null;case 3:return f(a),k(a),b=a.effectTag,b&1024?(a.effectTag=b&-1025|64,a):null;case 5:return h(a),null;case 4:return f(a),null;case 13:return v(a),null;default:return null}},unwindInterruptedWork:function(a){switch(a.tag){case 2:g(a);break;case 3:f(a);k(a);break;case 5:h(a);break;case 4:f(a);break;case 13:v(a)}}}}function cf(a,b){var c=b.source;null===b.stack&&Bc(c);null!==c&&Ac(c);b=b.value;null!==a&&2===a.tag&&Ac(a);try{b&&b.suppressReactErrorLogging||console.error(b)}catch(d){d&&d.suppressReactErrorLogging||console.error(d)}}function df(a,b,c,d,e){function f(a){var c=a.ref;if(null!==c)if("function"===typeof c)try{c(null)}catch(t){b(a,t)}else c.current=null}function h(a){"function"===typeof Je&&Je(a);switch(a.tag){case 2:f(a);var c=a.stateNode;if("function"===typeof c.componentWillUnmount)try{c.props=a.memoizedProps,c.state=a.memoizedState,c.componentWillUnmount()}catch(t){b(a,t)}break;case 5:f(a);break;case 7:g(a.stateNode);break;case 4:p&&v(a)}}function g(a){for(var b=a;;)if(h(b),null===b.child||p&&4===b.tag){if(b===a)break;for(;null===b.sibling;){if(null===b["return"]||b["return"]===a)return;b=b["return"]}b.sibling["return"]=b["return"];b=b.sibling}else b.child["return"]=b,b=b.child}function k(a){return 5===a.tag||3===a.tag||4===a.tag}function v(a){for(var b=a,c=!1,d=void 0,e=void 0;;){if(!c){c=b["return"];a:for(;;){null===c?D("160"):void 0;switch(c.tag){case 5:d=c.stateNode;e=!1;break a;case 3:d=c.stateNode.containerInfo;e=!0;break a;case 4:d=c.stateNode.containerInfo;e=!0;break a}c=c["return"]}c=!0}if(5===b.tag||6===b.tag)g(b),e?S(d,b.stateNode):R(d,b.stateNode);else if(4===b.tag?d=b.stateNode.containerInfo:h(b),null!==b.child){b.child["return"]=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b["return"]||b["return"]===a)return;b=b["return"];4===b.tag&&(c=!1)}b.sibling["return"]=b["return"];b=b.sibling}}var l=a.getPublicInstance,p=a.mutation;a=a.persistence;p||(a?D("235"):D("236"));var z=p.commitMount,B=p.commitUpdate,r=p.resetTextContent,Q=p.commitTextUpdate,n=p.appendChild,x=p.appendChildToContainer,Y=p.insertBefore,G=p.insertInContainerBefore,R=p.removeChild,S=p.removeChildFromContainer;return{commitBeforeMutationLifeCycles:function(a,b){switch(b.tag){case 2:if(b.effectTag&2048&&null!==a){var c=a.memoizedProps,d=a.memoizedState;a=b.stateNode;a.props=b.memoizedProps;a.state=b.memoizedState;b=a.getSnapshotBeforeUpdate(c,d);a.__reactInternalSnapshotBeforeUpdate=b}break;case 3:case 5:case 6:case 4:break;default:D("163")}},commitResetTextContent:function(a){r(a.stateNode)},commitPlacement:function(a){a:{for(var b=a["return"];null!==b;){if(k(b)){var c=b;break a}b=b["return"]}D("160");c=void 0}var d=b=void 0;switch(c.tag){case 5:b=c.stateNode;d=!1;break;case 3:b=c.stateNode.containerInfo;d=!0;break;case 4:b=c.stateNode.containerInfo;d=!0;break;default:D("161")}c.effectTag&16&&(r(b),c.effectTag&=-17);a:b:for(c=a;;){for(;null===c.sibling;){if(null===c["return"]||k(c["return"])){c=null;break a}c=c["return"]}c.sibling["return"]=c["return"];for(c=c.sibling;5!==c.tag&&6!==c.tag;){if(c.effectTag&2)continue b;if(null===c.child||4===c.tag)continue b;else c.child["return"]=c,c=c.child}if(!(c.effectTag&2)){c=c.stateNode;break a}}for(var e=a;;){if(5===e.tag||6===e.tag)c?d?G(b,e.stateNode,c):Y(b,e.stateNode,c):d?x(b,e.stateNode):n(b,e.stateNode);else if(4!==e.tag&&null!==e.child){e.child["return"]=e;e=e.child;continue}if(e===a)break;for(;null===e.sibling;){if(null===e["return"]||e["return"]===a)return;e=e["return"]}e.sibling["return"]=e["return"];e=e.sibling}},commitDeletion:function(a){v(a);a["return"]=null;a.child=null;a.alternate&&(a.alternate.child=null,a.alternate["return"]=null)},commitWork:function(a,b){switch(b.tag){case 2:break;case 5:var c=b.stateNode;if(null!=c){var d=b.memoizedProps;a=null!==a?a.memoizedProps:d;var e=b.type,f=b.updateQueue;b.updateQueue=null;null!==f&&B(c,f,e,a,d,b)}break;case 6:null===b.stateNode?D("162"):void 0;c=b.memoizedProps;Q(b.stateNode,null!==a?a.memoizedProps:c,c);break;case 3:break;default:D("163")}},commitLifeCycles:function(a,b,c){switch(c.tag){case 2:a=c.stateNode;if(c.effectTag&4)if(null===b)a.props=c.memoizedProps,a.state=c.memoizedState,a.componentDidMount();else{var d=b.memoizedProps;b=b.memoizedState;a.props=c.memoizedProps;a.state=c.memoizedState;a.componentDidUpdate(d,b,a.__reactInternalSnapshotBeforeUpdate)}c=c.updateQueue;null!==c&&Se(c,a);break;case 3:b=c.updateQueue;if(null!==b){a=null;if(null!==c.child)switch(c.child.tag){case 5:a=l(c.child.stateNode);break;case 2:a=c.child.stateNode}Se(b,a)}break;case 5:a=c.stateNode;null===b&&c.effectTag&4&&z(a,c.type,c.memoizedProps,c);break;case 6:break;case 4:break;default:D("163")}},commitErrorLogging:function(a,b){switch(a.tag){case 2:var c=a.type;b=a.stateNode;var d=a.updateQueue;null===d||null===d.capturedValues?D("264"):void 0;var f=d.capturedValues;d.capturedValues=null;"function"!==typeof c.getDerivedStateFromCatch&&e(b);b.props=a.memoizedProps;b.state=a.memoizedState;for(c=0;c<f.length;c++){d=f[c];var l=d.value,g=d.stack;cf(a,d);b.componentDidCatch(l,{componentStack:null!==g?g:""})}break;case 3:c=a.updateQueue;null===c||null===c.capturedValues?D("264"):void 0;f=c.capturedValues;c.capturedValues=null;for(c=0;c<f.length;c++)d=f[c],cf(a,d),b(d.value);break;default:D("265")}},commitAttachRef:function(a){var b=a.ref;if(null!==b){var c=a.stateNode;switch(a.tag){case 5:a=l(c);break;default:a=c}"function"===typeof b?b(a):b.current=a}},commitDetachRef:function(a){a=a.ref;null!==a&&("function"===typeof a?a(null):a.current=null)}}}var ef={};function ff(a,b){function c(a){a===ef?D("174"):void 0;return a}var d=a.getChildHostContext,e=a.getRootHostContext;a=b.createCursor;var f=b.push,h=b.pop,g=a(ef),k=a(ef),v=a(ef);return{getHostContext:function(){return c(g.current)},getRootHostContainer:function(){return c(v.current)},popHostContainer:function(a){h(g,a);h(k,a);h(v,a)},popHostContext:function(a){k.current===a&&(h(g,a),h(k,a))},pushHostContainer:function(a,b){f(v,b,a);f(k,a,a);f(g,ef,a);b=e(b);h(g,a);f(g,b,a)},pushHostContext:function(a){var b=c(v.current),e=c(g.current);b=d(e,a.type,b);e!==b&&(f(k,a,a),f(g,b,a))}}}function gf(a){function b(a,b){var c=new xe(5,null,null,0);c.type="DELETED";c.stateNode=b;c["return"]=a;c.effectTag=8;null!==a.lastEffect?(a.lastEffect.nextEffect=c,a.lastEffect=c):a.firstEffect=a.lastEffect=c}function c(a,b){switch(a.tag){case 5:return b=f(b,a.type,a.pendingProps),null!==b?(a.stateNode=b,!0):!1;case 6:return b=h(b,a.pendingProps),null!==b?(a.stateNode=b,!0):!1;default:return!1}}function d(a){for(a=a["return"];null!==a&&5!==a.tag&&3!==a.tag;)a=a["return"];p=a}var e=a.shouldSetTextContent;a=a.hydration;if(!a)return{enterHydrationState:function(){return!1},resetHydrationState:function(){},tryToClaimNextHydratableInstance:function(){},prepareToHydrateHostInstance:function(){D("175")},prepareToHydrateHostTextInstance:function(){D("176")},popHydrationState:function(){return!1}};var f=a.canHydrateInstance,h=a.canHydrateTextInstance,g=a.getNextHydratableSibling,k=a.getFirstHydratableChild,v=a.hydrateInstance,l=a.hydrateTextInstance,p=null,z=null,B=!1;return{enterHydrationState:function(a){z=k(a.stateNode.containerInfo);p=a;return B=!0},resetHydrationState:function(){z=p=null;B=!1},tryToClaimNextHydratableInstance:function(a){if(B){var d=z;if(d){if(!c(a,d)){d=g(d);if(!d||!c(a,d)){a.effectTag|=2;B=!1;p=a;return}b(p,z)}p=a;z=k(d)}else a.effectTag|=2,B=!1,p=a}},prepareToHydrateHostInstance:function(a,b,c){b=v(a.stateNode,a.type,a.memoizedProps,b,c,a);a.updateQueue=b;return null!==b?!0:!1},prepareToHydrateHostTextInstance:function(a){return l(a.stateNode,a.memoizedProps,a)},popHydrationState:function(a){if(a!==p)return!1;if(!B)return d(a),B=!0,!1;var c=a.type;if(5!==a.tag||"head"!==c&&"body"!==c&&!e(c,a.memoizedProps))for(c=z;c;)b(a,c),c=g(c);d(a);z=p?g(a.stateNode):null;return!0}}}function hf(a){function b(a,b,c){a=a.stateNode;a.__reactInternalMemoizedUnmaskedChildContext=b;a.__reactInternalMemoizedMaskedChildContext=c}function c(a){return 2===a.tag&&null!=a.type.childContextTypes}function d(a,b){var c=a.stateNode,d=a.type.childContextTypes;if("function"!==typeof c.getChildContext)return b;c=c.getChildContext();for(var e in c)e in d?void 0:D("108",Ac(a)||"Unknown",e);return A({},b,c)}var e=a.createCursor,f=a.push,h=a.pop,g=e(ka),k=e(!1),v=ka;return{getUnmaskedContext:function(a){return c(a)?v:g.current},cacheContext:b,getMaskedContext:function(a,c){var d=a.type.contextTypes;if(!d)return ka;var e=a.stateNode;if(e&&e.__reactInternalMemoizedUnmaskedChildContext===c)return e.__reactInternalMemoizedMaskedChildContext;var f={},g;for(g in d)f[g]=c[g];e&&b(a,c,f);return f},hasContextChanged:function(){return k.current},isContextConsumer:function(a){return 2===a.tag&&null!=a.type.contextTypes},isContextProvider:c,popContextProvider:function(a){c(a)&&(h(k,a),h(g,a))},popTopLevelContextObject:function(a){h(k,a);h(g,a)},pushTopLevelContextObject:function(a,b,c){null!=g.cursor?D("168"):void 0;f(g,b,a);f(k,c,a)},processChildContext:d,pushContextProvider:function(a){if(!c(a))return!1;var b=a.stateNode;b=b&&b.__reactInternalMemoizedMergedChildContext||ka;v=g.current;f(g,b,a);f(k,k.current,a);return!0},invalidateContextProvider:function(a,b){var c=a.stateNode;c?void 0:D("169");if(b){var e=d(a,v);c.__reactInternalMemoizedMergedChildContext=e;h(k,a);h(g,a);f(g,e,a)}else h(k,a);f(k,b,a)},findCurrentUnmaskedContext:function(a){for(2!==xd(a)||2!==a.tag?D("170"):void 0;3!==a.tag;){if(c(a))return a.stateNode.__reactInternalMemoizedMergedChildContext;(a=a["return"])?void 0:D("171")}return a.stateNode.context}}}function jf(a){var b=a.createCursor,c=a.push,d=a.pop,e=b(null),f=b(null),h=b(0);return{pushProvider:function(a){var b=a.type._context;c(h,b._changedBits,a);c(f,b._currentValue,a);c(e,a,a);b._currentValue=a.pendingProps.value;b._changedBits=a.stateNode},popProvider:function(a){var b=h.current,c=f.current;d(e,a);d(f,a);d(h,a);a=a.type._context;a._currentValue=c;a._changedBits=b}}}function kf(){var a=[],b=-1;return{createCursor:function(a){return{current:a}},isEmpty:function(){return-1===b},pop:function(c){0>b||(c.current=a[b],a[b]=null,b--)},push:function(c,d){b++;a[b]=c.current;c.current=d},checkThatStackIsEmpty:function(){},resetStackAfterFatalErrorInDev:function(){}}}function lf(a){function b(){if(null!==I)for(var a=I["return"];null!==a;)Lc(a),a=a["return"];Ya=null;Z=0;I=null;Nc=!1}function c(a){return null!==ya&&ya.has(a)}function d(a){for(;;){var b=a.alternate,c=a["return"],d=a.sibling;if(0===(a.effectTag&512)){b=Cb(b,a,Z);var e=a;if(1073741823===Z||1073741823!==e.expirationTime){b:switch(e.tag){case 3:case 2:var f=e.updateQueue;f=null===f?0:f.expirationTime;break b;default:f=0}for(var g=e.child;null!==g;)0!==g.expirationTime&&(0===f||f>g.expirationTime)&&(f=g.expirationTime),g=g.sibling;e.expirationTime=f}if(null!==b)return b;null!==c&&0===(c.effectTag&512)&&(null===c.firstEffect&&(c.firstEffect=a.firstEffect),null!==a.lastEffect&&(null!==c.lastEffect&&(c.lastEffect.nextEffect=a.firstEffect),c.lastEffect=a.lastEffect),1<a.effectTag&&(null!==c.lastEffect?c.lastEffect.nextEffect=a:c.firstEffect=a,c.lastEffect=a));if(null!==d)return d;if(null!==c)a=c;else{Nc=!0;break}}else{a=Kc(a);if(null!==a)return a.effectTag&=2559,a;null!==c&&(c.firstEffect=c.lastEffect=null,c.effectTag|=512);if(null!==d)return d;if(null!==c)a=c;else break}}return null}function e(a){var b=Wa(a.alternate,a,Z);null===b&&(b=d(a));nc.current=null;return b}function f(a,c,f){ca?D("243"):void 0;ca=!0;if(c!==Z||a!==Ya||null===I)b(),Ya=a,Z=c,I=ze(Ya.current,null,Z),a.pendingCommitExpirationTime=0;var g=!1;do{try{if(f)for(;null!==I&&!S();)I=e(I);else for(;null!==I;)I=e(I)}catch(Oc){if(null===I){g=!0;q(Oc);break}f=I;var h=f["return"];if(null===h){g=!0;q(Oc);break}Jc(h,f,Oc);I=d(f)}break}while(1);ca=!1;if(g||null!==I)return null;if(Nc)return a.pendingCommitExpirationTime=c,a.current.alternate;D("262")}function h(a,b,c,d){a={value:c,source:a,stack:Bc(a)};Pe(b,{expirationTime:d,partialState:null,callback:null,isReplace:!1,isForced:!1,capturedValue:a,next:null});v(b,d)}function g(a,b){a:{ca&&!Za?D("263"):void 0;for(var d=a["return"];null!==d;){switch(d.tag){case 2:var e=d.stateNode;if("function"===typeof d.type.getDerivedStateFromCatch||"function"===typeof e.componentDidCatch&&!c(e)){h(a,d,b,1);a=void 0;break a}break;case 3:h(a,d,b,1);a=void 0;break a}d=d["return"]}3===a.tag&&h(a,a,b,1);a=void 0}return a}function k(a){a=0!==ia?ia:ca?Za?1:Z:a.mode&1?za?10*(((l()+15)/10|0)+1):25*(((l()+500)/25|0)+1):1;za&&(0===da||a>da)&&(da=a);return a}function v(a,c){a:{for(;null!==a;){if(0===a.expirationTime||a.expirationTime>c)a.expirationTime=c;null!==a.alternate&&(0===a.alternate.expirationTime||a.alternate.expirationTime>c)&&(a.alternate.expirationTime=c);if(null===a["return"])if(3===a.tag){var d=a.stateNode;!ca&&0!==Z&&c<Z&&b();ca&&!Za&&Ya===d||B(d,c);Fb>xg&&D("185")}else{c=void 0;break a}a=a["return"]}c=void 0}return c}function l(){ye=Ic()-Pc;return yg=(ye/10|0)+2}function p(a,b,c,d,e){var f=ia;ia=1;try{return a(b,c,d,e)}finally{ia=f}}function z(a){if(0!==Gb){if(a>Gb)return;mg(Qc)}var b=Ic()-Pc;Gb=a;Qc=lg(Q,{timeout:10*(a-2)-b})}function B(a,b){if(null===a.nextScheduledRoot)a.remainingExpirationTime=b,null===K?(la=K=a,a.nextScheduledRoot=a):(K=K.nextScheduledRoot=a,K.nextScheduledRoot=la);else{var c=a.remainingExpirationTime;if(0===c||b<c)a.remainingExpirationTime=b}T||(J?Hb&&(aa=a,P=1,G(a,1,!1)):1===b?n():z(b))}function r(){var a=0,b=null;if(null!==K)for(var c=K,d=la;null!==d;){var e=d.remainingExpirationTime;if(0===e){null===c||null===K?D("244"):void 0;if(d===d.nextScheduledRoot){la=K=d.nextScheduledRoot=null;break}else if(d===la)la=e=d.nextScheduledRoot,K.nextScheduledRoot=e,d.nextScheduledRoot=null;else if(d===K){K=c;K.nextScheduledRoot=la;d.nextScheduledRoot=null;break}else c.nextScheduledRoot=d.nextScheduledRoot,d.nextScheduledRoot=null;d=c.nextScheduledRoot}else{if(0===a||e<a)a=e,b=d;if(d===K)break;c=d;d=d.nextScheduledRoot}}c=aa;null!==c&&c===b&&1===a?Fb++:Fb=0;aa=b;P=a}function Q(a){x(0,!0,a)}function n(){x(1,!1,null)}function x(a,b,c){$a=c;r();if(b)for(;null!==aa&&0!==P&&(0===a||a>=P)&&(!Ib||l()>=P);)G(aa,P,!Ib),r();else for(;null!==aa&&0!==P&&(0===a||a>=P);)G(aa,P,!1),r();null!==$a&&(Gb=0,Qc=-1);0!==P&&z(P);$a=null;Ib=!1;Y()}function Y(){Fb=0;if(null!==Aa){var a=Aa;Aa=null;for(var b=0;b<a.length;b++){var c=a[b];try{c._onComplete()}catch(wg){Ba||(Ba=!0,Jb=wg)}}}if(Ba)throw a=Jb,Jb=null,Ba=!1,a}function G(a,b,c){T?D("245"):void 0;T=!0;c?(c=a.finishedWork,null!==c?R(a,c,b):(a.finishedWork=null,c=f(a,b,!0),null!==c&&(S()?a.finishedWork=c:R(a,c,b)))):(c=a.finishedWork,null!==c?R(a,c,b):(a.finishedWork=null,c=f(a,b,!1),null!==c&&R(a,c,b)));T=!1}function R(a,b,c){var d=a.firstBatch;if(null!==d&&d._expirationTime<=c&&(null===Aa?Aa=[d]:Aa.push(d),d._defer)){a.finishedWork=b;a.remainingExpirationTime=0;return}a.finishedWork=null;Za=ca=!0;c=b.stateNode;c.current===b?D("177"):void 0;d=c.pendingCommitExpirationTime;0===d?D("261"):void 0;c.pendingCommitExpirationTime=0;var e=l();nc.current=null;if(1<b.effectTag)if(null!==b.lastEffect){b.lastEffect.nextEffect=b;var f=b.firstEffect}else f=b;else f=b.firstEffect;zg(c.containerInfo);for(w=f;null!==w;){var h=!1,k=void 0;try{for(;null!==w;)w.effectTag&2048&&Db(w.alternate,w),w=w.nextEffect}catch(ab){h=!0,k=ab}h&&(null===w?D("178"):void 0,g(w,k),null!==w&&(w=w.nextEffect))}for(w=f;null!==w;){h=!1;k=void 0;try{for(;null!==w;){var p=w.effectTag;p&16&&Mc(w);if(p&128){var n=w.alternate;null!==n&&kg(n)}switch(p&14){case 2:Eb(w);w.effectTag&=-3;break;case 6:Eb(w);w.effectTag&=-3;we(w.alternate,w);break;case 4:we(w.alternate,w);break;case 8:gg(w)}w=w.nextEffect}}catch(ab){h=!0,k=ab}h&&(null===w?D("178"):void 0,g(w,k),null!==w&&(w=w.nextEffect))}Ag(c.containerInfo);c.current=b;for(w=f;null!==w;){p=!1;n=void 0;try{for(f=c,h=e,k=d;null!==w;){var r=w.effectTag;r&36&&hg(f,w.alternate,w,h,k);r&256&&ig(w,q);r&128&&jg(w);var t=w.nextEffect;w.nextEffect=null;w=t}}catch(ab){p=!0,n=ab}p&&(null===w?D("178"):void 0,g(w,n),null!==w&&(w=w.nextEffect))}ca=Za=!1;"function"===typeof Ie&&Ie(b.stateNode);b=c.current.expirationTime;0===b&&(ya=null);a.remainingExpirationTime=b}function S(){return null===$a||$a.timeRemaining()>Bg?!1:Ib=!0}function q(a){null===aa?D("246"):void 0;aa.remainingExpirationTime=0;Ba||(Ba=!0,Jb=a)}var u=kf(),t=ff(a,u),y=hf(u);u=jf(u);var H=gf(a),Wa=$e(a,t,y,u,H,v,k).beginWork,Cb=af(a,t,y,u,H).completeWork;t=bf(t,y,u,v,c);var Jc=t.throwException,Kc=t.unwindWork,Lc=t.unwindInterruptedWork;t=df(a,g,v,k,function(a){null===ya?ya=new Set([a]):ya.add(a)},l);var Db=t.commitBeforeMutationLifeCycles,Mc=t.commitResetTextContent,Eb=t.commitPlacement,gg=t.commitDeletion,we=t.commitWork,hg=t.commitLifeCycles,ig=t.commitErrorLogging,jg=t.commitAttachRef,kg=t.commitDetachRef,Ic=a.now,lg=a.scheduleDeferredCallback,mg=a.cancelDeferredCallback,zg=a.prepareForCommit,Ag=a.resetAfterCommit,Pc=Ic(),yg=2,ye=Pc,Rc=0,ia=0,ca=!1,I=null,Ya=null,Z=0,w=null,Za=!1,Nc=!1,ya=null,la=null,K=null,Gb=0,Qc=-1,T=!1,aa=null,P=0,da=0,Ib=!1,Ba=!1,Jb=null,$a=null,J=!1,Hb=!1,za=!1,Aa=null,xg=1e3,Fb=0,Bg=1;return{recalculateCurrentTime:l,computeExpirationForFiber:k,scheduleWork:v,requestWork:B,flushRoot:function(a,b){T?D("253"):void 0;aa=a;P=b;G(a,b,!1);n();Y()},batchedUpdates:function(a,b){var c=J;J=!0;try{return a(b)}finally{(J=c)||T||n()}},unbatchedUpdates:function(a,b){if(J&&!Hb){Hb=!0;try{return a(b)}finally{Hb=!1}}return a(b)},flushSync:function(a,b){T?D("187"):void 0;var c=J;J=!0;try{return p(a,b)}finally{J=c,n()}},flushControlled:function(a){var b=J;J=!0;try{p(a)}finally{(J=b)||T||x(1,!1,null)}},deferredUpdates:function(a){var b=ia;ia=25*(((l()+500)/25|0)+1);try{return a()}finally{ia=b}},syncUpdates:p,interactiveUpdates:function(a,b,c){if(za)return a(b,c);J||T||0===da||(x(da,!1,null),da=0);var d=za,e=J;J=za=!0;try{return a(b,c)}finally{za=d,(J=e)||T||n()}},flushInteractiveUpdates:function(){T||0===da||(x(da,!1,null),da=0)},computeUniqueAsyncExpiration:function(){var a=25*(((l()+500)/25|0)+1);a<=Rc&&(a=Rc+1);return Rc=a},legacyContext:y}}function mf(a){function b(a,b,c,d,e,h){d=b.current;if(c){c=c._reactInternalFiber;var l=g(c);c=k(c)?v(c,l):l}else c=ka;null===b.context?b.context=c:b.pendingContext=c;b=h;Pe(d,{expirationTime:e,partialState:{element:a},callback:void 0===b?null:b,isReplace:!1,isForced:!1,capturedValue:null,next:null});f(d,e);return e}var c=a.getPublicInstance;a=lf(a);var d=a.recalculateCurrentTime,e=a.computeExpirationForFiber,f=a.scheduleWork,h=a.legacyContext,g=h.findCurrentUnmaskedContext,k=h.isContextProvider,v=h.processChildContext;return{createContainer:function(a,b,c){b=new xe(3,null,null,b?3:0);a={current:b,containerInfo:a,pendingChildren:null,pendingCommitExpirationTime:0,finishedWork:null,context:null,pendingContext:null,hydrate:c,remainingExpirationTime:0,firstBatch:null,nextScheduledRoot:null};return b.stateNode=a},updateContainer:function(a,c,f,h){var g=c.current,k=d();g=e(g);return b(a,c,f,k,g,h)},updateContainerAtExpirationTime:function(a,c,e,f,g){var h=d();return b(a,c,e,h,f,g)},flushRoot:a.flushRoot,requestWork:a.requestWork,computeUniqueAsyncExpiration:a.computeUniqueAsyncExpiration,batchedUpdates:a.batchedUpdates,unbatchedUpdates:a.unbatchedUpdates,deferredUpdates:a.deferredUpdates,syncUpdates:a.syncUpdates,interactiveUpdates:a.interactiveUpdates,flushInteractiveUpdates:a.flushInteractiveUpdates,flushControlled:a.flushControlled,flushSync:a.flushSync,getPublicRootInstance:function(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return c(a.child.stateNode);default:return a.child.stateNode}},findHostInstance:function(a){var b=a._reactInternalFiber;void 0===b&&("function"===typeof a.render?D("188"):D("268",Object.keys(a)));a=Bd(b);return null===a?null:a.stateNode},findHostInstanceWithNoPortals:function(a){a=Cd(a);return null===a?null:a.stateNode},injectIntoDevTools:function(a){var b=a.findFiberByHostInstance;return He(A({},a,{findHostInstanceByFiber:function(a){a=Bd(a);return null===a?null:a.stateNode},findFiberByHostInstance:function(a){return b?b(a):null}}))}}}var nf=Object.freeze({default:mf}),of=nf&&mf||nf,pf=of["default"]?of["default"]:of;function qf(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:rc,key:null==d?null:""+d,children:a,containerInfo:b,implementation:c}}var rf="object"===typeof performance&&"function"===typeof performance.now,sf=void 0;sf=rf?function(){return performance.now()}:function(){return Date.now()};var tf=void 0,uf=void 0;if(m.canUseDOM)if("function"!==typeof requestIdleCallback||"function"!==typeof cancelIdleCallback){var vf=null,wf=!1,xf=-1,yf=!1,zf=0,Af=33,Bf=33,Cf=void 0;Cf=rf?{didTimeout:!1,timeRemaining:function(){var a=zf-performance.now();return 0<a?a:0}}:{didTimeout:!1,timeRemaining:function(){var a=zf-Date.now();return 0<a?a:0}};var Df="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(a){if(a.source===window&&a.data===Df){wf=!1;a=sf();if(0>=zf-a)if(-1!==xf&&xf<=a)Cf.didTimeout=!0;else{yf||(yf=!0,requestAnimationFrame(Ef));return}else Cf.didTimeout=!1;xf=-1;a=vf;vf=null;null!==a&&a(Cf)}},!1);var Ef=function(a){yf=!1;var b=a-zf+Bf;b<Bf&&Af<Bf?(8>b&&(b=8),Bf=b<Af?Af:b):Af=b;zf=a+Bf;wf||(wf=!0,window.postMessage(Df,"*"))};tf=function(a,b){vf=a;null!=b&&"number"===typeof b.timeout&&(xf=sf()+b.timeout);yf||(yf=!0,requestAnimationFrame(Ef));return 0};uf=function(){vf=null;wf=!1;xf=-1}}else tf=window.requestIdleCallback,uf=window.cancelIdleCallback;else tf=function(a){return setTimeout(function(){a({timeRemaining:function(){return Infinity},didTimeout:!1})})},uf=function(a){clearTimeout(a)};function Ff(a){var b="";ea.Children.forEach(a,function(a){null==a||"string"!==typeof a&&"number"!==typeof a||(b+=a)});return b}function Gf(a,b){a=A({children:void 0},b);if(b=Ff(b.children))a.children=b;return a}function Hf(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b["$"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty("$"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0)}else{c=""+c;b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e])}null!==b&&(b.selected=!0)}}function If(a,b){var c=b.value;a._wrapperState={initialValue:null!=c?c:b.defaultValue,wasMultiple:!!b.multiple}}function Jf(a,b){null!=b.dangerouslySetInnerHTML?D("91"):void 0;return A({},b,{value:void 0,defaultValue:void 0,children:""+a._wrapperState.initialValue})}function Kf(a,b){var c=b.value;null==c&&(c=b.defaultValue,b=b.children,null!=b&&(null!=c?D("92"):void 0,Array.isArray(b)&&(1>=b.length?void 0:D("93"),b=b[0]),c=""+b),null==c&&(c=""));a._wrapperState={initialValue:""+c}}function Lf(a,b){var c=b.value;null!=c&&(c=""+c,c!==a.value&&(a.value=c),null==b.defaultValue&&(a.defaultValue=c));null!=b.defaultValue&&(a.defaultValue=b.defaultValue)}function Mf(a){var b=a.textContent;b===a._wrapperState.initialValue&&(a.value=b)}var Nf={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function Of(a){switch(a){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Pf(a,b){return null==a||"http://www.w3.org/1999/xhtml"===a?Of(b):"http://www.w3.org/2000/svg"===a&&"foreignObject"===b?"http://www.w3.org/1999/xhtml":a}var Qf=void 0,Rf=function(a){return"undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)})}:a}(function(a,b){if(a.namespaceURI!==Nf.svg||"innerHTML"in a)a.innerHTML=b;else{Qf=Qf||document.createElement("div");Qf.innerHTML="<svg>"+b+"</svg>";for(b=Qf.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild)}});function Sf(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b}var Tf={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Uf=["Webkit","ms","Moz","O"];Object.keys(Tf).forEach(function(a){Uf.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);Tf[b]=Tf[a]})});function Vf(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf("--");var e=c;var f=b[c];e=null==f||"boolean"===typeof f||""===f?"":d||"number"!==typeof f||0===f||Tf.hasOwnProperty(e)&&Tf[e]?(""+f).trim():f+"px";"float"===c&&(c="cssFloat");d?a.setProperty(c,e):a[c]=e}}var Wf=A({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Xf(a,b,c){b&&(Wf[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML?D("137",a,c()):void 0),null!=b.dangerouslySetInnerHTML&&(null!=b.children?D("60"):void 0,"object"===typeof b.dangerouslySetInnerHTML&&"__html"in b.dangerouslySetInnerHTML?void 0:D("61")),null!=b.style&&"object"!==typeof b.style?D("62",c()):void 0)}function Yf(a,b){if(-1===a.indexOf("-"))return"string"===typeof b.is;switch(a){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Zf=C.thatReturns("");function $f(a,b){a=9===a.nodeType||11===a.nodeType?a:a.ownerDocument;var c=ke(a);b=va[b];for(var d=0;d<b.length;d++){var e=b[d];c.hasOwnProperty(e)&&c[e]||("topScroll"===e?Zd("topScroll","scroll",a):"topFocus"===e||"topBlur"===e?(Zd("topFocus","focus",a),Zd("topBlur","blur",a),c.topBlur=!0,c.topFocus=!0):"topCancel"===e?(ic("cancel",!0)&&Zd("topCancel","cancel",a),c.topCancel=!0):"topClose"===e?(ic("close",!0)&&Zd("topClose","close",a),c.topClose=!0):fe.hasOwnProperty(e)&&W(e,fe[e],a),c[e]=!0)}}function ag(a,b,c,d){c=9===c.nodeType?c:c.ownerDocument;d===Nf.html&&(d=Of(a));d===Nf.html?"script"===a?(a=c.createElement("div"),a.innerHTML="<script><\/script>",a=a.removeChild(a.firstChild)):a="string"===typeof b.is?c.createElement(a,{is:b.is}):c.createElement(a):a=c.createElementNS(d,a);return a}function bg(a,b){return(9===b.nodeType?b:b.ownerDocument).createTextNode(a)}function cg(a,b,c,d){var e=Yf(b,c);switch(b){case"iframe":case"object":W("topLoad","load",a);var f=c;break;case"video":case"audio":for(f in ge)ge.hasOwnProperty(f)&&W(f,ge[f],a);f=c;break;case"source":W("topError","error",a);f=c;break;case"img":case"image":case"link":W("topError","error",a);W("topLoad","load",a);f=c;break;case"form":W("topReset","reset",a);W("topSubmit","submit",a);f=c;break;case"details":W("topToggle","toggle",a);f=c;break;case"input":Wc(a,c);f=Vc(a,c);W("topInvalid","invalid",a);$f(d,"onChange");break;case"option":f=Gf(a,c);break;case"select":If(a,c);f=A({},c,{value:void 0});W("topInvalid","invalid",a);$f(d,"onChange");break;case"textarea":Kf(a,c);f=Jf(a,c);W("topInvalid","invalid",a);$f(d,"onChange");break;default:f=c}Xf(b,f,Zf);var h=f,g;for(g in h)if(h.hasOwnProperty(g)){var k=h[g];"style"===g?Vf(a,k,Zf):"dangerouslySetInnerHTML"===g?(k=k?k.__html:void 0,null!=k&&Rf(a,k)):"children"===g?"string"===typeof k?("textarea"!==b||""!==k)&&Sf(a,k):"number"===typeof k&&Sf(a,""+k):"suppressContentEditableWarning"!==g&&"suppressHydrationWarning"!==g&&"autoFocus"!==g&&(ua.hasOwnProperty(g)?null!=k&&$f(d,g):null!=k&&Uc(a,g,k,e))}switch(b){case"input":lc(a);ad(a,c);break;case"textarea":lc(a);Mf(a,c);break;case"option":null!=c.value&&a.setAttribute("value",c.value);break;case"select":a.multiple=!!c.multiple;b=c.value;null!=b?Hf(a,!!c.multiple,b,!1):null!=c.defaultValue&&Hf(a,!!c.multiple,c.defaultValue,!0);break;default:"function"===typeof f.onClick&&(a.onclick=C)}}function dg(a,b,c,d,e){var f=null;switch(b){case"input":c=Vc(a,c);d=Vc(a,d);f=[];break;case"option":c=Gf(a,c);d=Gf(a,d);f=[];break;case"select":c=A({},c,{value:void 0});d=A({},d,{value:void 0});f=[];break;case"textarea":c=Jf(a,c);d=Jf(a,d);f=[];break;default:"function"!==typeof c.onClick&&"function"===typeof d.onClick&&(a.onclick=C)}Xf(b,d,Zf);b=a=void 0;var h=null;for(a in c)if(!d.hasOwnProperty(a)&&c.hasOwnProperty(a)&&null!=c[a])if("style"===a){var g=c[a];for(b in g)g.hasOwnProperty(b)&&(h||(h={}),h[b]="")}else"dangerouslySetInnerHTML"!==a&&"children"!==a&&"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&"autoFocus"!==a&&(ua.hasOwnProperty(a)?f||(f=[]):(f=f||[]).push(a,null));for(a in d){var k=d[a];g=null!=c?c[a]:void 0;if(d.hasOwnProperty(a)&&k!==g&&(null!=k||null!=g))if("style"===a)if(g){for(b in g)!g.hasOwnProperty(b)||k&&k.hasOwnProperty(b)||(h||(h={}),h[b]="");for(b in k)k.hasOwnProperty(b)&&g[b]!==k[b]&&(h||(h={}),h[b]=k[b])}else h||(f||(f=[]),f.push(a,h)),h=k;else"dangerouslySetInnerHTML"===a?(k=k?k.__html:void 0,g=g?g.__html:void 0,null!=k&&g!==k&&(f=f||[]).push(a,""+k)):"children"===a?g===k||"string"!==typeof k&&"number"!==typeof k||(f=f||[]).push(a,""+k):"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&(ua.hasOwnProperty(a)?(null!=k&&$f(e,a),f||g===k||(f=[])):(f=f||[]).push(a,k))}h&&(f=f||[]).push("style",h);return f}function eg(a,b,c,d,e){"input"===c&&"radio"===e.type&&null!=e.name&&Yc(a,e);Yf(c,d);d=Yf(c,e);for(var f=0;f<b.length;f+=2){var h=b[f],g=b[f+1];"style"===h?Vf(a,g,Zf):"dangerouslySetInnerHTML"===h?Rf(a,g):"children"===h?Sf(a,g):Uc(a,h,g,d)}switch(c){case"input":Zc(a,e);break;case"textarea":Lf(a,e);break;case"select":a._wrapperState.initialValue=void 0,b=a._wrapperState.wasMultiple,a._wrapperState.wasMultiple=!!e.multiple,c=e.value,null!=c?Hf(a,!!e.multiple,c,!1):b!==!!e.multiple&&(null!=e.defaultValue?Hf(a,!!e.multiple,e.defaultValue,!0):Hf(a,!!e.multiple,e.multiple?[]:"",!1))}}function fg(a,b,c,d,e){switch(b){case"iframe":case"object":W("topLoad","load",a);break;case"video":case"audio":for(var f in ge)ge.hasOwnProperty(f)&&W(f,ge[f],a);break;case"source":W("topError","error",a);break;case"img":case"image":case"link":W("topError","error",a);W("topLoad","load",a);break;case"form":W("topReset","reset",a);W("topSubmit","submit",a);break;case"details":W("topToggle","toggle",a);break;case"input":Wc(a,c);W("topInvalid","invalid",a);$f(e,"onChange");break;case"select":If(a,c);W("topInvalid","invalid",a);$f(e,"onChange");break;case"textarea":Kf(a,c),W("topInvalid","invalid",a),$f(e,"onChange")}Xf(b,c,Zf);d=null;for(var h in c)c.hasOwnProperty(h)&&(f=c[h],"children"===h?"string"===typeof f?a.textContent!==f&&(d=["children",f]):"number"===typeof f&&a.textContent!==""+f&&(d=["children",""+f]):ua.hasOwnProperty(h)&&null!=f&&$f(e,h));switch(b){case"input":lc(a);ad(a,c);break;case"textarea":lc(a);Mf(a,c);break;case"select":case"option":break;default:"function"===typeof c.onClick&&(a.onclick=C)}return d}function ng(a,b){return a.nodeValue!==b}var og=Object.freeze({createElement:ag,createTextNode:bg,setInitialProperties:cg,diffProperties:dg,updateProperties:eg,diffHydratedProperties:fg,diffHydratedText:ng,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(a,b,c){switch(b){case"input":Zc(a,c);b=c.name;if("radio"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;c=c.querySelectorAll("input[name="+JSON.stringify(""+b)+'][type="radio"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=Xa(d);e?void 0:D("90");mc(d);Zc(d,e)}}}break;case"textarea":Lf(a,c);break;case"select":b=c.value,null!=b&&Hf(a,!!c.multiple,b,!1)}}});Tb.injectFiberControlledHostComponent(og);var pg=null,qg=null;function rg(a){this._expirationTime=X.computeUniqueAsyncExpiration();this._root=a;this._callbacks=this._next=null;this._hasChildren=this._didComplete=!1;this._children=null;this._defer=!0}rg.prototype.render=function(a){this._defer?void 0:D("250");this._hasChildren=!0;this._children=a;var b=this._root._internalRoot,c=this._expirationTime,d=new sg;X.updateContainerAtExpirationTime(a,b,null,c,d._onCommit);return d};rg.prototype.then=function(a){if(this._didComplete)a();else{var b=this._callbacks;null===b&&(b=this._callbacks=[]);b.push(a)}};rg.prototype.commit=function(){var a=this._root._internalRoot,b=a.firstBatch;this._defer&&null!==b?void 0:D("251");if(this._hasChildren){var c=this._expirationTime;if(b!==this){this._hasChildren&&(c=this._expirationTime=b._expirationTime,this.render(this._children));for(var d=null,e=b;e!==this;)d=e,e=e._next;null===d?D("251"):void 0;d._next=e._next;this._next=b;a.firstBatch=this}this._defer=!1;X.flushRoot(a,c);b=this._next;this._next=null;b=a.firstBatch=b;null!==b&&b._hasChildren&&b.render(b._children)}else this._next=null,this._defer=!1};rg.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var a=this._callbacks;if(null!==a)for(var b=0;b<a.length;b++)(0,a[b])()}};function sg(){this._callbacks=null;this._didCommit=!1;this._onCommit=this._onCommit.bind(this)}sg.prototype.then=function(a){if(this._didCommit)a();else{var b=this._callbacks;null===b&&(b=this._callbacks=[]);b.push(a)}};sg.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var a=this._callbacks;if(null!==a)for(var b=0;b<a.length;b++){var c=a[b];"function"!==typeof c?D("191",c):void 0;c()}}};function tg(a,b,c){this._internalRoot=X.createContainer(a,b,c)}tg.prototype.render=function(a,b){var c=this._internalRoot,d=new sg;b=void 0===b?null:b;null!==b&&d.then(b);X.updateContainer(a,c,null,d._onCommit);return d};tg.prototype.unmount=function(a){var b=this._internalRoot,c=new sg;a=void 0===a?null:a;null!==a&&c.then(a);X.updateContainer(null,b,null,c._onCommit);return c};tg.prototype.legacy_renderSubtreeIntoContainer=function(a,b,c){var d=this._internalRoot,e=new sg;c=void 0===c?null:c;null!==c&&e.then(c);X.updateContainer(b,d,a,e._onCommit);return e};tg.prototype.createBatch=function(){var a=new rg(this),b=a._expirationTime,c=this._internalRoot,d=c.firstBatch;if(null===d)c.firstBatch=a,a._next=null;else{for(c=null;null!==d&&d._expirationTime<=b;)c=d,d=d._next;a._next=d;null!==c&&(c._next=a)}return a};function ug(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||" react-mount-point-unstable "!==a.nodeValue))}function vg(a,b){switch(a){case"button":case"input":case"select":case"textarea":return!!b.autoFocus}return!1}var X=pf({getRootHostContext:function(a){var b=a.nodeType;switch(b){case 9:case 11:a=(a=a.documentElement)?a.namespaceURI:Pf(null,"");break;default:b=8===b?a.parentNode:a,a=b.namespaceURI||null,b=b.tagName,a=Pf(a,b)}return a},getChildHostContext:function(a,b){return Pf(a,b)},getPublicInstance:function(a){return a},prepareForCommit:function(){pg=Vd;var a=fa();if(ne(a)){if("selectionStart"in a)var b={start:a.selectionStart,end:a.selectionEnd};else a:{var c=window.getSelection&&window.getSelection();if(c&&0!==c.rangeCount){b=c.anchorNode;var d=c.anchorOffset,e=c.focusNode;c=c.focusOffset;try{b.nodeType,e.nodeType}catch(B){b=null;break a}var f=0,h=-1,g=-1,k=0,v=0,l=a,p=null;b:for(;;){for(var z;;){l!==b||0!==d&&3!==l.nodeType||(h=f+d);l!==e||0!==c&&3!==l.nodeType||(g=f+c);3===l.nodeType&&(f+=l.nodeValue.length);if(null===(z=l.firstChild))break;p=l;l=z}for(;;){if(l===a)break b;p===b&&++k===d&&(h=f);p===e&&++v===c&&(g=f);if(null!==(z=l.nextSibling))break;l=p;p=l.parentNode}l=z}b=-1===h||-1===g?null:{start:h,end:g}}else b=null}b=b||{start:0,end:0}}else b=null;qg={focusedElem:a,selectionRange:b};Wd(!1)},resetAfterCommit:function(){var a=qg,b=fa(),c=a.focusedElem,d=a.selectionRange;if(b!==c&&ja(document.documentElement,c)){if(ne(c))if(b=d.start,a=d.end,void 0===a&&(a=b),"selectionStart"in c)c.selectionStart=b,c.selectionEnd=Math.min(a,c.value.length);else if(window.getSelection){b=window.getSelection();var e=c[mb()].length;a=Math.min(d.start,e);d=void 0===d.end?a:Math.min(d.end,e);!b.extend&&a>d&&(e=d,d=a,a=e);e=me(c,a);var f=me(c,d);if(e&&f&&(1!==b.rangeCount||b.anchorNode!==e.node||b.anchorOffset!==e.offset||b.focusNode!==f.node||b.focusOffset!==f.offset)){var h=document.createRange();h.setStart(e.node,e.offset);b.removeAllRanges();a>d?(b.addRange(h),b.extend(f.node,f.offset)):(h.setEnd(f.node,f.offset),b.addRange(h))}}b=[];for(a=c;a=a.parentNode;)1===a.nodeType&&b.push({element:a,left:a.scrollLeft,top:a.scrollTop});c.focus();for(c=0;c<b.length;c++)a=b[c],a.element.scrollLeft=a.left,a.element.scrollTop=a.top}qg=null;Wd(pg);pg=null},createInstance:function(a,b,c,d,e){a=ag(a,b,c,d);a[F]=e;a[Ta]=b;return a},appendInitialChild:function(a,b){a.appendChild(b)},finalizeInitialChildren:function(a,b,c,d){cg(a,b,c,d);return vg(b,c)},prepareUpdate:function(a,b,c,d,e){return dg(a,b,c,d,e)},shouldSetTextContent:function(a,b){return"textarea"===a||"string"===typeof b.children||"number"===typeof b.children||"object"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&"string"===typeof b.dangerouslySetInnerHTML.__html},shouldDeprioritizeSubtree:function(a,b){return!!b.hidden},createTextInstance:function(a,b,c,d){a=bg(a,b);a[F]=d;return a},now:sf,mutation:{commitMount:function(a,b,c){vg(b,c)&&a.focus()},commitUpdate:function(a,b,c,d,e){a[Ta]=e;eg(a,b,c,d,e)},resetTextContent:function(a){Sf(a,"")},commitTextUpdate:function(a,b,c){a.nodeValue=c},appendChild:function(a,b){a.appendChild(b)},appendChildToContainer:function(a,b){8===a.nodeType?a.parentNode.insertBefore(b,a):a.appendChild(b)},insertBefore:function(a,b,c){a.insertBefore(b,c)},insertInContainerBefore:function(a,b,c){8===a.nodeType?a.parentNode.insertBefore(b,c):a.insertBefore(b,c)},removeChild:function(a,b){a.removeChild(b)},removeChildFromContainer:function(a,b){8===a.nodeType?a.parentNode.removeChild(b):a.removeChild(b)}},hydration:{canHydrateInstance:function(a,b){return 1!==a.nodeType||b.toLowerCase()!==a.nodeName.toLowerCase()?null:a},canHydrateTextInstance:function(a,b){return""===b||3!==a.nodeType?null:a},getNextHydratableSibling:function(a){for(a=a.nextSibling;a&&1!==a.nodeType&&3!==a.nodeType;)a=a.nextSibling;return a},getFirstHydratableChild:function(a){for(a=a.firstChild;a&&1!==a.nodeType&&3!==a.nodeType;)a=a.nextSibling;return a},hydrateInstance:function(a,b,c,d,e,f){a[F]=f;a[Ta]=c;return fg(a,b,c,e,d)},hydrateTextInstance:function(a,b,c){a[F]=c;return ng(a,b)},didNotMatchHydratedContainerTextInstance:function(){},didNotMatchHydratedTextInstance:function(){},didNotHydrateContainerInstance:function(){},didNotHydrateInstance:function(){},didNotFindHydratableContainerInstance:function(){},didNotFindHydratableContainerTextInstance:function(){},didNotFindHydratableInstance:function(){},didNotFindHydratableTextInstance:function(){}},scheduleDeferredCallback:tf,cancelDeferredCallback:uf}),Cg=X;ac=Cg.batchedUpdates;bc=Cg.interactiveUpdates;cc=Cg.flushInteractiveUpdates;function Dg(a,b){b||(b=a?9===a.nodeType?a.documentElement:a.firstChild:null,b=!(!b||1!==b.nodeType||!b.hasAttribute("data-reactroot")));if(!b)for(var c;c=a.lastChild;)a.removeChild(c);return new tg(a,!1,b)}function Eg(a,b,c,d,e){ug(c)?void 0:D("200");var f=c._reactRootContainer;if(f){if("function"===typeof e){var h=e;e=function(){var a=X.getPublicRootInstance(f._internalRoot);h.call(a)}}null!=a?f.legacy_renderSubtreeIntoContainer(a,b,e):f.render(b,e)}else{f=c._reactRootContainer=Dg(c,d);if("function"===typeof e){var g=e;e=function(){var a=X.getPublicRootInstance(f._internalRoot);g.call(a)}}X.unbatchedUpdates(function(){null!=a?f.legacy_renderSubtreeIntoContainer(a,b,e):f.render(b,e)})}return X.getPublicRootInstance(f._internalRoot)}function Fg(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;ug(b)?void 0:D("200");return qf(a,b,null,c)}var Gg={createPortal:Fg,findDOMNode:function(a){return null==a?null:1===a.nodeType?a:X.findHostInstance(a)},hydrate:function(a,b,c){return Eg(null,a,b,!0,c)},render:function(a,b,c){return Eg(null,a,b,!1,c)},unstable_renderSubtreeIntoContainer:function(a,b,c,d){null==a||void 0===a._reactInternalFiber?D("38"):void 0;return Eg(a,b,c,!1,d)},unmountComponentAtNode:function(a){ug(a)?void 0:D("40");return a._reactRootContainer?(X.unbatchedUpdates(function(){Eg(null,null,a,!1,function(){a._reactRootContainer=null})}),!0):!1},unstable_createPortal:function(){return Fg.apply(void 0,arguments)},unstable_batchedUpdates:X.batchedUpdates,unstable_deferredUpdates:X.deferredUpdates,flushSync:X.flushSync,unstable_flushControlled:X.flushControlled,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:Ra,EventPluginRegistry:Ca,EventPropagators:kb,ReactControlledComponent:$b,ReactDOMComponentTree:bb,ReactDOMEventListener:$d},unstable_createRoot:function(a,b){return new tg(a,!0,null!=b&&!0===b.hydrate)}};X.injectIntoDevTools({findFiberByHostInstance:Ua,bundleType:0,version:"16.3.2",rendererPackageName:"react-dom"});var Hg=Object.freeze({default:Gg}),Ig=Hg&&Gg||Hg;module.exports=Ig["default"]?Ig["default"]:Ig},function(module,exports,__webpack_require__){"use strict";
/** @license React v16.3.2
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var m=__webpack_require__(6),n=__webpack_require__(16),p=__webpack_require__(31),q=__webpack_require__(15),r="function"===typeof Symbol&&Symbol["for"],t=r?Symbol["for"]("react.element"):60103,u=r?Symbol["for"]("react.portal"):60106,v=r?Symbol["for"]("react.fragment"):60107,w=r?Symbol["for"]("react.strict_mode"):60108,x=r?Symbol["for"]("react.provider"):60109,y=r?Symbol["for"]("react.context"):60110,z=r?Symbol["for"]("react.async_mode"):60111,A=r?Symbol["for"]("react.forward_ref"):60112,B="function"===typeof Symbol&&Symbol.iterator;function C(a){for(var b=arguments.length-1,e="http://reactjs.org/docs/error-decoder.html?invariant="+a,c=0;c<b;c++)e+="&args[]="+encodeURIComponent(arguments[c+1]);n(!1,"Minified React error #"+a+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",e)}var D={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function E(a,b,e){this.props=a;this.context=b;this.refs=p;this.updater=e||D}E.prototype.isReactComponent={};E.prototype.setState=function(a,b){"object"!==typeof a&&"function"!==typeof a&&null!=a?C("85"):void 0;this.updater.enqueueSetState(this,a,b,"setState")};E.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,"forceUpdate")};function F(){}F.prototype=E.prototype;function G(a,b,e){this.props=a;this.context=b;this.refs=p;this.updater=e||D}var H=G.prototype=new F;H.constructor=G;m(H,E.prototype);H.isPureReactComponent=!0;var I={current:null},J=Object.prototype.hasOwnProperty,K={key:!0,ref:!0,__self:!0,__source:!0};function L(a,b,e){var c=void 0,d={},g=null,h=null;if(null!=b)for(c in void 0!==b.ref&&(h=b.ref),void 0!==b.key&&(g=""+b.key),b)J.call(b,c)&&!K.hasOwnProperty(c)&&(d[c]=b[c]);var f=arguments.length-2;if(1===f)d.children=e;else if(1<f){for(var k=Array(f),l=0;l<f;l++)k[l]=arguments[l+2];d.children=k}if(a&&a.defaultProps)for(c in f=a.defaultProps,f)void 0===d[c]&&(d[c]=f[c]);return{$$typeof:t,type:a,key:g,ref:h,props:d,_owner:I.current}}function M(a){return"object"===typeof a&&null!==a&&a.$$typeof===t}function escape(a){var b={"=":"=0",":":"=2"};return"$"+(""+a).replace(/[=:]/g,function(a){return b[a]})}var N=/\/+/g,O=[];function P(a,b,e,c){if(O.length){var d=O.pop();d.result=a;d.keyPrefix=b;d.func=e;d.context=c;d.count=0;return d}return{result:a,keyPrefix:b,func:e,context:c,count:0}}function Q(a){a.result=null;a.keyPrefix=null;a.func=null;a.context=null;a.count=0;10>O.length&&O.push(a)}function R(a,b,e,c){var d=typeof a;if("undefined"===d||"boolean"===d)a=null;var g=!1;if(null===a)g=!0;else switch(d){case"string":case"number":g=!0;break;case"object":switch(a.$$typeof){case t:case u:g=!0}}if(g)return e(c,a,""===b?"."+S(a,0):b),1;g=0;b=""===b?".":b+":";if(Array.isArray(a))for(var h=0;h<a.length;h++){d=a[h];var f=b+S(d,h);g+=R(d,f,e,c)}else if(null===a||"undefined"===typeof a?f=null:(f=B&&a[B]||a["@@iterator"],f="function"===typeof f?f:null),"function"===typeof f)for(a=f.call(a),h=0;!(d=a.next()).done;)d=d.value,f=b+S(d,h++),g+=R(d,f,e,c);else"object"===d&&(e=""+a,C("31","[object Object]"===e?"object with keys {"+Object.keys(a).join(", ")+"}":e,""));return g}function S(a,b){return"object"===typeof a&&null!==a&&null!=a.key?escape(a.key):b.toString(36)}function T(a,b){a.func.call(a.context,b,a.count++)}function U(a,b,e){var c=a.result,d=a.keyPrefix;a=a.func.call(a.context,b,a.count++);Array.isArray(a)?V(a,c,e,q.thatReturnsArgument):null!=a&&(M(a)&&(b=d+(!a.key||b&&b.key===a.key?"":(""+a.key).replace(N,"$&/")+"/")+e,a={$$typeof:t,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}),c.push(a))}function V(a,b,e,c,d){var g="";null!=e&&(g=(""+e).replace(N,"$&/")+"/");b=P(b,g,c,d);null==a||R(a,"",U,b);Q(b)}var W={Children:{map:function(a,b,e){if(null==a)return a;var c=[];V(a,c,null,b,e);return c},forEach:function(a,b,e){if(null==a)return a;b=P(null,null,b,e);null==a||R(a,"",T,b);Q(b)},count:function(a){return null==a?0:R(a,"",q.thatReturnsNull,null)},toArray:function(a){var b=[];V(a,b,null,q.thatReturnsArgument);return b},only:function(a){M(a)?void 0:C("143");return a}},createRef:function(){return{current:null}},Component:E,PureComponent:G,createContext:function(a,b){void 0===b&&(b=null);a={$$typeof:y,_calculateChangedBits:b,_defaultValue:a,_currentValue:a,_changedBits:0,Provider:null,Consumer:null};a.Provider={$$typeof:x,_context:a};return a.Consumer=a},forwardRef:function(a){return{$$typeof:A,render:a}},Fragment:v,StrictMode:w,unstable_AsyncMode:z,createElement:L,cloneElement:function(a,b,e){null===a||void 0===a?C("267",a):void 0;var c=void 0,d=m({},a.props),g=a.key,h=a.ref,f=a._owner;if(null!=b){void 0!==b.ref&&(h=b.ref,f=I.current);void 0!==b.key&&(g=""+b.key);var k=void 0;a.type&&a.type.defaultProps&&(k=a.type.defaultProps);for(c in b)J.call(b,c)&&!K.hasOwnProperty(c)&&(d[c]=void 0===b[c]&&void 0!==k?k[c]:b[c])}c=arguments.length-2;if(1===c)d.children=e;else if(1<c){k=Array(c);for(var l=0;l<c;l++)k[l]=arguments[l+2];d.children=k}return{$$typeof:t,type:a.type,key:g,ref:h,props:d,_owner:f}},createFactory:function(a){var b=L.bind(null,a);b.type=a;return b},isValidElement:M,version:"16.3.2",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:I,assign:m}},X=Object.freeze({default:W}),Y=X&&W||X;module.exports=Y["default"]?Y["default"]:Y},function(module,exports){var process=module.exports={};var cachedSetTimeout;var cachedClearTimeout;function defaultSetTimout(){throw new Error("setTimeout has not been defined")}function defaultClearTimeout(){throw new Error("clearTimeout has not been defined")}(function(){try{if(typeof setTimeout==="function"){cachedSetTimeout=setTimeout}else{cachedSetTimeout=defaultSetTimout}}catch(e){cachedSetTimeout=defaultSetTimout}try{if(typeof clearTimeout==="function"){cachedClearTimeout=clearTimeout}else{cachedClearTimeout=defaultClearTimeout}}catch(e){cachedClearTimeout=defaultClearTimeout}})();function runTimeout(fun){if(cachedSetTimeout===setTimeout){return setTimeout(fun,0)}if((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout){cachedSetTimeout=setTimeout;return setTimeout(fun,0)}try{return cachedSetTimeout(fun,0)}catch(e){try{return cachedSetTimeout.call(null,fun,0)}catch(e){return cachedSetTimeout.call(this,fun,0)}}}function runClearTimeout(marker){if(cachedClearTimeout===clearTimeout){return clearTimeout(marker)}if((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout){cachedClearTimeout=clearTimeout;return clearTimeout(marker)}try{return cachedClearTimeout(marker)}catch(e){try{return cachedClearTimeout.call(null,marker)}catch(e){return cachedClearTimeout.call(this,marker)}}}var queue=[];var draining=false;var currentQueue;var queueIndex=-1;function cleanUpNextTick(){if(!draining||!currentQueue){return}draining=false;if(currentQueue.length){queue=currentQueue.concat(queue)}else{queueIndex=-1}if(queue.length){drainQueue()}}function drainQueue(){if(draining){return}var timeout=runTimeout(cleanUpNextTick);draining=true;var len=queue.length;while(len){currentQueue=queue;queue=[];while(++queueIndex<len){if(currentQueue){currentQueue[queueIndex].run()}}queueIndex=-1;len=queue.length}currentQueue=null;draining=false;runClearTimeout(timeout)}process.nextTick=function(fun){var args=new Array(arguments.length-1);if(arguments.length>1){for(var i=1;i<arguments.length;i++){args[i-1]=arguments[i]}}queue.push(new Item(fun,args));if(queue.length===1&&!draining){runTimeout(drainQueue)}};function Item(fun,array){this.fun=fun;this.array=array}Item.prototype.run=function(){this.fun.apply(null,this.array)};process.title="browser";process.browser=true;process.env={};process.argv=[];process.version="";process.versions={};function noop(){}process.on=noop;process.addListener=noop;process.once=noop;process.off=noop;process.removeListener=noop;process.removeAllListeners=noop;process.emit=noop;process.prependListener=noop;process.prependOnceListener=noop;process.listeners=function(name){return[]};process.binding=function(name){throw new Error("process.binding is not supported")};process.cwd=function(){return"/"};process.chdir=function(dir){throw new Error("process.chdir is not supported")};process.umask=function(){return 0}},function(module,exports,__webpack_require__){"use strict";var __assign=this&&this.__assign||Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++){s=arguments[i];for(var p in s)if(Object.prototype.hasOwnProperty.call(s,p))t[p]=s[p]}return t};Object.defineProperty(exports,"__esModule",{value:true});var mobx_1=__webpack_require__(2);var mobx_react_1=__webpack_require__(5);var React=__webpack_require__(0);var ReactDOM=__webpack_require__(4);var App_1=__webpack_require__(63);var appStore_1=__webpack_require__(53);var imageStore_1=__webpack_require__(52);mobx_1.configure({enforceActions:true});var stores={imageStore:imageStore_1.default,appStore:appStore_1.default};ReactDOM.render(React.createElement(mobx_react_1.Provider,__assign({},stores),React.createElement(App_1.default,null)),document.getElementById("root"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,