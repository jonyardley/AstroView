!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=73)}([function(e,t,n){"use strict";e.exports=n(71)},function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var o=n(29),a=n(28),s=n(8),u=/function ([^(]*)/,l=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm,c=/([^\s,]+)/g,h=function(){var e=new ArrayBuffer(4),t=new Uint32Array(e),n=new Uint8Array(e);if(t[0]=3735928559,239===n[0])return"LE";if(222===n[0])return"BE";throw new Error("unknown endianness")}(),p=null,f=null,d=function(){try{return new Function("let i = 1; const j = 1;")(),!0}catch(e){return!1}}(),m=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o),i(t,null,[{key:"systemEndianness",value:function(){return h}},{key:"isFunction",value:function(e){return"function"==typeof e}},{key:"isFunctionString",value:function(e){return null!==e&&"function"===e.toString().slice(0,"function".length).toLowerCase()}},{key:"getFunctionNameFromString",value:function(e){return u.exec(e)[1]}},{key:"getFunctionBodyFromString",value:function(e){return e.substring(e.indexOf("{")+1,e.lastIndexOf("}"))}},{key:"getParamNamesFromString",value:function(e){var t=e.toString().replace(l,""),n=t.slice(t.indexOf("(")+1,t.indexOf(")")).match(c);return null===n&&(n=[]),n}},{key:"clone",value:function(e){if(null===e||"object"!==(void 0===e?"undefined":r(e))||e.hasOwnProperty("isActiveClone"))return e;var n=e.constructor();for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(e.isActiveClone=null,n[i]=t.clone(e[i]),delete e.isActiveClone);return n}},{key:"newPromise",value:function(e){var t=Promise||small_promise;if(null===t)throw TypeError("Browser is missing Promise implementation. Consider adding small_promise.js polyfill");return new t(e)}},{key:"functionBinder",value:function(e,t){return e.bind?e.bind(t):function(){var n=1===arguments.length?[arguments[0]]:Array.apply(null,arguments);return e.apply(t,n)}}},{key:"isArray",value:function(e){return!isNaN(e.length)}},{key:"getArgumentType",value:function(e){return t.isArray(e)?"Array":"number"==typeof e?"Number":e instanceof s?"Texture":e instanceof a?"Input":"Unknown"}},{key:"isFloatReadPixelsSupported",value:function(){if(null!==p)return p;var e=new(n(9))({mode:"webgl-validator"}).createKernel(function(){return 1},{output:[2],floatTextures:!0,floatOutput:!0,floatOutputForce:!0})();return p=1===e[0]}},{key:"isFloatReadPixelsSupportedWebGL2",value:function(){if(null!==f)return f;var e=new(n(9))({mode:"webgl2-validator"}).createKernel(function(){return 1},{output:[2],floatTextures:!0,floatOutput:!0,floatOutputForce:!0})();return f=1===e[0]}},{key:"isMixedIdentifiersSupported",value:function(){return d}},{key:"dimToTexSize",value:function(e,t,n){for(var r=t[0],i=1;i<t.length;i++)r*=t[i];!e.floatTextures||n&&!e.floatOutput||(r=Math.ceil(r/4));var o=Math.ceil(Math.sqrt(r));return[o,o]}},{key:"getDimensions",value:function(e,n){var r=void 0;if(t.isArray(e)){for(var i=[],o=e;t.isArray(o);)i.push(o.length),o=o[0];r=i.reverse()}else if(e instanceof s)r=e.output;else{if(!(e instanceof a))throw"Unknown dimensions of "+e;r=e.size}if(n)for(r=t.clone(r);r.length<3;)r.push(1);return r}},{key:"pad",value:function(e,t){function n(e){return Array.apply(null,new Array(e)).map(Number.prototype.valueOf,0)}for(var r=e.length+2*t,i=e.map(function(e){return[].concat(n(t),e,n(t))}),o=0;o<t;o++)i=[].concat([n(r)],i,[n(r)]);return i}},{key:"flatten2dArrayTo",value:function(e,t){for(var n=0,r=0;r<e.length;r++)t.set(e[r],n),n+=e[r].length}},{key:"flatten3dArrayTo",value:function(e,t){for(var n=0,r=0;r<e.length;r++)for(var i=0;i<e[r].length;i++)t.set(e[r][i],n),n+=e[r][i].length}},{key:"flattenTo",value:function(e,n){t.isArray(e[0])?t.isArray(e[0][0])?t.flatten3dArrayTo(e,n):t.flatten2dArrayTo(e,n):n.set(e)}},{key:"splitArray",value:function(e,t){for(var n=[],r=0;r<e.length;r+=t)n.push(Array.prototype.slice.call(e,r,r+t));return n}},{key:"getAstString",value:function(e,t){var n=Array.isArray(e)?e:e.split(/\r?\n/g),r=t.loc.start,i=t.loc.end,o=[];o.push(n[r.line-1].slice(r.column));for(var a=r.line;a<i.line-1;a++)o.push(n[a]);return o.push(n[i.line-1].slice(0,i.column)),o.join("\n")}},{key:"allPropertiesOf",value:function(e){var t=[];do{t.push.apply(t,Object.getOwnPropertyNames(e))}while(e=Object.getPrototypeOf(e));return t}}]),t}();Object.assign(m,o),e.exports=m},function(e,t,n){"use strict";n.r(t),function(e,r){n.d(t,"Reaction",function(){return ln}),n.d(t,"untracked",function(){return rn}),n.d(t,"IDerivationState",function(){return Pt}),n.d(t,"createAtom",function(){return qe}),n.d(t,"spy",function(){return y}),n.d(t,"comparer",function(){return F}),n.d(t,"isObservableObject",function(){return ae}),n.d(t,"isBoxedObservable",function(){return Z}),n.d(t,"isObservableArray",function(){return lt}),n.d(t,"ObservableMap",function(){return Ue}),n.d(t,"isObservableMap",function(){return Ge}),n.d(t,"transaction",function(){return Fe}),n.d(t,"observable",function(){return Oe}),n.d(t,"computed",function(){return ge}),n.d(t,"isObservable",function(){return le}),n.d(t,"isObservableProp",function(){return ce}),n.d(t,"isComputed",function(){return pe}),n.d(t,"isComputedProp",function(){return fe}),n.d(t,"extendObservable",function(){return ye}),n.d(t,"extendShallowObservable",function(){return ve}),n.d(t,"observe",function(){return vn}),n.d(t,"intercept",function(){return yn}),n.d(t,"autorun",function(){return M}),n.d(t,"reaction",function(){return j}),n.d(t,"when",function(){return bn}),n.d(t,"action",function(){return k}),n.d(t,"isAction",function(){return O}),n.d(t,"runInAction",function(){return C}),n.d(t,"keys",function(){return _n}),n.d(t,"values",function(){return En}),n.d(t,"set",function(){return wn}),n.d(t,"remove",function(){return Sn}),n.d(t,"has",function(){return Tn}),n.d(t,"get",function(){return kn}),n.d(t,"decorate",function(){return Cn}),n.d(t,"configure",function(){return On}),n.d(t,"onBecomeObserved",function(){return We}),n.d(t,"onBecomeUnobserved",function(){return He}),n.d(t,"flow",function(){return Pn}),n.d(t,"toJS",function(){return Dn}),n.d(t,"trace",function(){return un}),n.d(t,"getDependencyTree",function(){return Bt}),n.d(t,"getObserverTree",function(){return Gt}),n.d(t,"_resetGlobalState",function(){return Ut}),n.d(t,"_getGlobalState",function(){return Mt}),n.d(t,"getDebugName",function(){return Ke}),n.d(t,"getAtom",function(){return Ve}),n.d(t,"_getAdministration",function(){return ze}),n.d(t,"_allowStateChanges",function(){return _}),n.d(t,"isArrayLike",function(){return Tt}),n.d(t,"_isComputingDerivation",function(){return Jt}),n.d(t,"onReactionError",function(){return cn}),n.d(t,"_interceptReads",function(){return Ln});
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};function o(e,t){function n(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var a=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e};function s(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a}function u(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(s(arguments[t]));return e}var l={},c={};function h(e){if(!0!==e.__mobxDidRunLazyInitializers){var t=e.__mobxDecorators;if(t)for(var n in Et(e,"__mobxDidRunLazyInitializers",!0),t){var r=t[n];r.propertyCreator(e,r.prop,r.descriptor,r.decoratorTarget,r.decoratorArguments)}}}function p(e,t){return function(){var n,r,i=function(r,i,o,s){if(!0===s)return t(r,i,o,r,n),null;if(!Object.prototype.hasOwnProperty.call(r,"__mobxDecorators")){var u=r.__mobxDecorators;Et(r,"__mobxDecorators",a({},u))}return r.__mobxDecorators[i]={prop:i,propertyCreator:t,descriptor:o,decoratorTarget:r,decoratorArguments:n},function(e,t){var n=t?l:c;return n[e]||(n[e]={configurable:!0,enumerable:t,get:function(){return h(this),this[e]},set:function(t){h(this),this[e]=t}})}(i,e)};return(2===(r=arguments).length||3===r.length)&&"string"==typeof r[1]||4===r.length&&!0===r[3]?(n=ht,i.apply(null,arguments)):(n=Array.prototype.slice.call(arguments),i)}}function f(){return!!Dt.spyListeners.length}function d(e){if(Dt.spyListeners.length)for(var t=Dt.spyListeners,n=0,r=t.length;n<r;n++)t[n](e)}function m(e){d(a({},e,{spyReportStart:!0}))}var g={spyReportEnd:!0};function v(e){d(e?a({},e,{spyReportEnd:!0}):g)}function y(e){return Dt.spyListeners.push(e),yt(function(){Dt.spyListeners=Dt.spyListeners.filter(function(t){return t!==e})})}function b(e,t){var n=function(){return x(e,t,this,arguments)};return n.isMobxAction=!0,n}function x(e,t,n,r){var i=function(e,t,n,r){var i=f()&&!!e,o=0;if(i){o=Date.now();var a=r&&r.length||0,s=new Array(a);if(a>0)for(var u=0;u<a;u++)s[u]=r[u];m({type:"action",name:e,object:n,arguments:s})}var l=on();Ht();var c=E(!0);return{prevDerivation:l,prevAllowStateChanges:c,notifySpy:i,startTime:o}}(e,0,n,r);try{return t.apply(n,r)}finally{!function(e){w(e.prevAllowStateChanges),Xt(),an(e.prevDerivation),e.notifySpy&&v({time:Date.now()-e.startTime})}(i)}}function _(e,t){var n,r=E(e);try{n=t()}finally{w(r)}return n}function E(e){var t=Dt.allowStateChanges;return Dt.allowStateChanges=e,t}function w(e){Dt.allowStateChanges=e}function S(){mt(!1)}function T(e){return function(t,n,r){if(r){if(r.value)return{value:b(e,r.value),enumerable:!1,configurable:!0,writable:!0};var i=r.initializer;return{enumerable:!1,configurable:!0,writable:!0,initializer:function(){return b(e,i.call(this))}}}return function(e){return function(t,n,r){Object.defineProperty(t,n,{configurable:!0,enumerable:!1,get:function(){},set:function(t){wt(this,n,k(e,t))}})}}(e).apply(this,arguments)}}var k=function(e,t,n,r){return 1===arguments.length&&"function"==typeof e?b(e.name||"<unnamed action>",e):2===arguments.length&&"function"==typeof t?b(e,t):1===arguments.length&&"string"==typeof e?T(e):!0!==r?T(t).apply(null,arguments):void(e[t]=b(e.name||t,n.value))};function C(e,t){return x("string"==typeof e?e:e.name||"<unnamed action>","function"==typeof e?e:t,this,void 0)}function O(e){return"function"==typeof e&&!0===e.isMobxAction}function A(e,t,n){Et(e,t,b(t,n.bind(e)))}k.bound=function(e,t,n,r){return!0===r?(A(e,t,n.value),null):n?{configurable:!0,enumerable:!1,get:function(){return A(this,t,n.value||n.initializer.call(this)),this[t]},set:S}:{enumerable:!1,configurable:!0,set:function(e){A(this,t,e)},get:function(){}}};var P=Object.prototype.toString;function I(e,t){return N(e,t)}function N(e,t,n,r){if(e===t)return 0!==e||1/e==1/t;if(null==e||null==t)return!1;if(e!=e)return t!=t;var i=typeof e;return("function"===i||"object"===i||"object"==typeof t)&&function(e,t,n,r){e=R(e),t=R(t);var i=P.call(e);if(i!==P.call(t))return!1;switch(i){case"[object RegExp]":case"[object String]":return""+e==""+t;case"[object Number]":return+e!=+e?+t!=+t:0==+e?1/+e==1/t:+e==+t;case"[object Date]":case"[object Boolean]":return+e==+t;case"[object Symbol]":return"undefined"!=typeof Symbol&&Symbol.valueOf.call(e)===Symbol.valueOf.call(t)}var o="[object Array]"===i;if(!o){if("object"!=typeof e||"object"!=typeof t)return!1;var a=e.constructor,s=t.constructor;if(a!==s&&!("function"==typeof a&&a instanceof a&&"function"==typeof s&&s instanceof s)&&"constructor"in e&&"constructor"in t)return!1}r=r||[];var u=(n=n||[]).length;for(;u--;)if(n[u]===e)return r[u]===t;if(n.push(e),r.push(t),o){if((u=e.length)!==t.length)return!1;for(;u--;)if(!N(e[u],t[u],n,r))return!1}else{var l,c=Object.keys(e);if(u=c.length,Object.keys(t).length!==u)return!1;for(;u--;)if(l=c[u],!D(t,l)||!N(e[l],t[l],n,r))return!1}return n.pop(),r.pop(),!0}(e,t,n,r)}function R(e){return lt(e)?e.peek():kt(e)||Ge(e)?Ct(e.entries()):e}function D(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function L(e,t){return e===t}var F={identity:L,structural:function(e,t){return I(e,t)},default:function(e,t){return function(e,t){return"number"==typeof e&&"number"==typeof t&&isNaN(e)&&isNaN(t)}(e,t)||L(e,t)}};function M(e,t){void 0===t&&(t=pt);var n,r=t&&t.name||e.name||"Autorun@"+dt();if(!t.scheduler&&!t.delay)n=new ln(r,function(){this.track(a)},t.onError);else{var i=B(t),o=!1;n=new ln(r,function(){o||(o=!0,i(function(){o=!1,n.isDisposed||n.track(a)}))},t.onError)}function a(){e(n)}return n.schedule(),n.getDisposer()}var U=function(e){return e()};function B(e){return e.scheduler?e.scheduler:e.delay?function(t){return setTimeout(t,e.delay)}:U}function j(e,t,n){void 0===n&&(n=pt),"boolean"==typeof n&&(n={fireImmediately:n},vt("Using fireImmediately as argument is deprecated. Use '{ fireImmediately: true }' instead"));var r,i,o,a=n.name||"Reaction@"+dt(),s=k(a,n.onError?(r=n.onError,i=t,function(){try{return i.apply(this,arguments)}catch(e){r.call(this,e)}}):t),u=!n.scheduler&&!n.delay,l=B(n),c=!0,h=!1,p=n.compareStructural?F.structural:n.equals||F.default,f=new ln(a,function(){c||u?d():h||(h=!0,l(d))},n.onError);function d(){if(h=!1,!f.isDisposed){var t=!1;f.track(function(){var n=e(f);t=c||!p(o,n),o=n}),c&&n.fireImmediately&&s(o,f),c||!0!==t||s(o,f),c&&(c=!1)}}return f.schedule(),f.getDisposer()}var G=function(){function e(e){var t=this;this.dependenciesState=Pt.NOT_TRACKING,this.observing=[],this.newObserving=null,this.isBeingObserved=!1,this.isPendingUnobservation=!1,this.observers=[],this.observersIndexes={},this.diffValue=0,this.runId=0,this.lastAccessedBy=0,this.lowestObserverState=Pt.UP_TO_DATE,this.unboundDepsCount=0,this.__mapid="#"+dt(),this.value=new Yt(null),this.isComputing=!1,this.isRunningSetter=!1,this.isTracing=It.NONE,this.derivation=e.get,this.name=e.name||"ComputedValue@"+dt(),e.set&&(this.setter=b(this.name+"-setter",e.set)),this.equals=e.equals||(e.compareStructural||e.struct?F.structural:F.default),this.scope=e.context,this.requiresReaction=!!e.requiresReaction,!0===e.keepAlive&&M(function(){return t.get()})}return e.prototype.onBecomeStale=function(){!function(e){if(e.lowestObserverState!==Pt.UP_TO_DATE)return;e.lowestObserverState=Pt.POSSIBLY_STALE;var t=e.observers,n=t.length;for(;n--;){var r=t[n];r.dependenciesState===Pt.UP_TO_DATE&&(r.dependenciesState=Pt.POSSIBLY_STALE,r.isTracing!==It.NONE&&$t(r,e),r.onBecomeStale())}}(this)},e.prototype.onBecomeUnobserved=function(){},e.prototype.onBecomeObserved=function(){},e.prototype.get=function(){this.isComputing&&mt("Cycle detected in computation "+this.name+": "+this.derivation),0===Dt.inBatch?Qt(this)&&(this.warnAboutUntrackedRead(),Ht(),this.value=this.computeValue(!1),Xt()):(qt(this),Qt(this)&&this.trackAndCompute()&&function(e){if(e.lowestObserverState===Pt.STALE)return;e.lowestObserverState=Pt.STALE;var t=e.observers,n=t.length;for(;n--;){var r=t[n];r.dependenciesState===Pt.POSSIBLY_STALE?r.dependenciesState=Pt.STALE:r.dependenciesState===Pt.UP_TO_DATE&&(e.lowestObserverState=Pt.UP_TO_DATE)}}(this));var e=this.value;if(Zt(e))throw e.cause;return e},e.prototype.peek=function(){var e=this.computeValue(!1);if(Zt(e))throw e.cause;return e},e.prototype.set=function(e){if(this.setter){gt(!this.isRunningSetter,"The setter of computed value '"+this.name+"' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?"),this.isRunningSetter=!0;try{this.setter.call(this.scope,e)}finally{this.isRunningSetter=!1}}else gt(!1,!1)},e.prototype.trackAndCompute=function(){f()&&d({object:this.scope,type:"compute",name:this.name});var e=this.value,t=this.dependenciesState===Pt.NOT_TRACKING,n=this.computeValue(!0),r=t||Zt(e)||Zt(n)||!this.equals(e,n);return r&&(this.value=n),r},e.prototype.computeValue=function(e){var t;if(this.isComputing=!0,Dt.computationDepth++,e)t=tn(this,this.derivation,this.scope);else if(!0===Dt.disableErrorBoundaries)t=this.derivation.call(this.scope);else try{t=this.derivation.call(this.scope)}catch(e){t=new Yt(e)}return Dt.computationDepth--,this.isComputing=!1,t},e.prototype.suspend=function(){nn(this),this.value=void 0},e.prototype.observe=function(e,t){var n=this,r=!0,i=void 0;return M(function(){var o=n.get();if(!r||t){var a=on();e({type:"update",object:n,newValue:o,oldValue:i}),an(a)}r=!1,i=o})},e.prototype.warnAboutUntrackedRead=function(){},e.prototype.toJSON=function(){return this.get()},e.prototype.toString=function(){return this.name+"["+this.derivation.toString()+"]"},e.prototype.valueOf=function(){return At(this.get())},e}();G.prototype[Ot()]=G.prototype.valueOf;var V=St("ComputedValue",G);function z(e){return void 0!==e.interceptors&&e.interceptors.length>0}function K(e,t){var n=e.interceptors||(e.interceptors=[]);return n.push(t),yt(function(){var e=n.indexOf(t);-1!==e&&n.splice(e,1)})}function W(e,t){var n=on();try{var r=e.interceptors;if(r)for(var i=0,o=r.length;i<o&&(gt(!(t=r[i](t))||t.type,"Intercept handlers should return nothing or a change object"),t);i++);return t}finally{an(n)}}function H(e){return void 0!==e.changeListeners&&e.changeListeners.length>0}function X(e,t){var n=e.changeListeners||(e.changeListeners=[]);return n.push(t),yt(function(){var e=n.indexOf(t);-1!==e&&n.splice(e,1)})}function q(e,t){var n=on(),r=e.changeListeners;if(r){for(var i=0,o=(r=r.slice()).length;i<o;i++)r[i](t);an(n)}}var $={};!function(){if(Be)return;Be=function(){function e(e){void 0===e&&(e="Atom@"+dt()),this.name=e,this.isPendingUnobservation=!1,this.isBeingObserved=!1,this.observers=[],this.observersIndexes={},this.diffValue=0,this.lastAccessedBy=0,this.lowestObserverState=Pt.NOT_TRACKING}return e.prototype.onBecomeUnobserved=function(){},e.prototype.onBecomeObserved=function(){},e.prototype.reportObserved=function(){return qt(this)},e.prototype.reportChanged=function(){Ht(),function(e){if(e.lowestObserverState===Pt.STALE)return;e.lowestObserverState=Pt.STALE;var t=e.observers,n=t.length;for(;n--;){var r=t[n];r.dependenciesState===Pt.UP_TO_DATE&&(r.isTracing!==It.NONE&&$t(r,e),r.onBecomeStale()),r.dependenciesState=Pt.STALE}}(this),Xt()},e.prototype.toString=function(){return this.name},e}(),je=St("Atom",Be)}();var Y=function(e){function t(t,n,r,i){void 0===r&&(r="ObservableValue@"+dt()),void 0===i&&(i=!0);var o=e.call(this,r)||this;return o.enhancer=n,o.hasUnreportedChange=!1,o.value=n(t,void 0,r),i&&f()&&d({type:"create",name:o.name,newValue:""+o.value}),o}return o(t,e),t.prototype.dehanceValue=function(e){return void 0!==this.dehancer?this.dehancer(e):e},t.prototype.set=function(e){var t=this.value;if((e=this.prepareNewValue(e))!==$){var n=f();n&&m({type:"update",name:this.name,newValue:e,oldValue:t}),this.setNewValue(e),n&&v()}},t.prototype.prepareNewValue=function(e){if(en(this),z(this)){var t=W(this,{object:this,type:"update",newValue:e});if(!t)return $;e=t.newValue}return e=this.enhancer(e,this.value,this.name),this.value!==e?e:$},t.prototype.setNewValue=function(e){var t=this.value;this.value=e,this.reportChanged(),H(this)&&q(this,{type:"update",object:this,newValue:e,oldValue:t})},t.prototype.get=function(){return this.reportObserved(),this.dehanceValue(this.value)},t.prototype.intercept=function(e){return K(this,e)},t.prototype.observe=function(e,t){return t&&e({object:this,type:"update",newValue:this.value,oldValue:void 0}),X(this,e)},t.prototype.toJSON=function(){return this.get()},t.prototype.toString=function(){return this.name+"["+this.value+"]"},t.prototype.valueOf=function(){return At(this.get())},t}(Be);Y.prototype[Ot()]=Y.prototype.valueOf;var Z=St("ObservableValue",Y),Q=function(){function e(e,t,n){this.target=e,this.name=t,this.defaultEnhancer=n,this.values={}}return e.prototype.read=function(e,t){if(this.target===e)return this.values[t].get();this.illegalAccess(e,t)},e.prototype.write=function(e,t,n){var r=this.target;if(r===e){var i=this.values[t];if(i instanceof G)i.set(n);else{if(z(this)){if(!(u=W(this,{type:"update",object:r,name:t,newValue:n})))return;n=u.newValue}if((n=i.prepareNewValue(n))!==$){var o=H(this),s=f(),u=o||s?{type:"update",object:r,oldValue:i.value,name:t,newValue:n}:null;s&&m(a({},u,{name:this.name,key:t})),i.setNewValue(n),o&&q(this,u),s&&v()}}}else this.illegalAccess(e,t)},e.prototype.remove=function(e){if(this.values[e]){var t=this.target;if(z(this))if(!(o=W(this,{object:t,name:e,type:"remove"})))return;try{Ht();var n=H(this),r=f(),i=this.values[e].get();this.keys&&this.keys.remove(e),delete this.values[e],delete this.target[e];var o=n||r?{type:"remove",object:t,oldValue:i,name:e}:null;r&&m(a({},o,{name:this.name,key:e})),n&&q(this,o),r&&v()}finally{Xt()}}},e.prototype.illegalAccess=function(e,t){return mt("Property '"+t+"' of '"+e+"' was accessed through the prototype chain. Use 'decorate' instead to declare the prop or access it statically through it's owner")},e.prototype.observe=function(e,t){return X(this,e)},e.prototype.intercept=function(e){return K(this,e)},e.prototype.getKeys=function(){var e=this;return void 0===this.keys&&(this.keys=new rt(Object.keys(this.values).filter(function(t){return e.values[t]instanceof Y}),Ie,"keys("+this.name+")",!0)),this.keys.slice()},e}();function J(e,t,n){void 0===t&&(t=""),void 0===n&&(n=Pe);var r=e.$mobx;return r||(_t(e)||(t=(e.constructor.name||"ObservableObject")+"@"+dt()),t||(t="ObservableObject@"+dt()),wt(e,"$mobx",r=new Q(e,t,n)),r)}function ee(e,t,n,r){var i=J(e);if(z(i)){var o=W(i,{object:e,name:t,type:"add",newValue:n});if(!o)return;n=o.newValue}n=(i.values[t]=new Y(n,r,i.name+"."+t,!1)).value,Object.defineProperty(e,t,function(e){return ne[e]||(ne[e]={configurable:!0,enumerable:!0,get:function(){return this.$mobx.read(this,e)},set:function(t){this.$mobx.write(this,e,t)}})}(t)),i.keys&&i.keys.push(t),function(e,t,n,r){var i=H(e),o=f(),s=i||o?{type:"add",object:t,name:n,newValue:r}:null;o&&m(a({},s,{name:e.name,key:n}));i&&q(e,s);o&&v()}(i,e,t,n)}function te(e,t,n){var r=J(e);n.name=r.name+"."+t,n.context=e,r.values[t]=new G(n),Object.defineProperty(e,t,function(e){return re[e]||(re[e]={configurable:!0,enumerable:!1,get:function(){return ie(this).read(this,e)},set:function(t){ie(this).write(this,e,t)}})}(t))}var ne={},re={};function ie(e){var t=e.$mobx;return t||(h(e),e.$mobx)}var oe=St("ObservableObjectAdministration",Q);function ae(e){return!!xt(e)&&(h(e),oe(e.$mobx))}function se(t){var n=p(!0,function(e,n,r,i,o){ee(e,n,r?r.initializer?r.initializer.call(e):r.value:void 0,t)}),r=(void 0!==e&&e.env,n);return r.enhancer=t,r}function ue(e,t){if(null==e)return!1;if(void 0!==t){if(ae(e)){var n=e.$mobx;return n.values&&!!n.values[t]}return!1}return ae(e)||!!e.$mobx||je(e)||mn(e)||V(e)}function le(e){return 1!==arguments.length&&mt(!1),ue(e)}function ce(e,t){return"string"!=typeof t?mt(!1):ue(e,t)}function he(e,t){if(null==e)return!1;if(void 0!==t){if(!1===ae(e))return!1;if(!e.$mobx.values[t])return!1;var n=Ve(e,t);return V(n)}return V(e)}function pe(e){return arguments.length>1?mt(!1):he(e)}function fe(e,t){return"string"!=typeof t?mt(!1):he(e,t)}var de=p(!1,function(e,t,n,r,i){var o=n.get,s=n.set,u=i[0]||{};te(e,t,a({},u,{get:o,set:s}))}),me=de({equals:F.structural}),ge=function(e,t,n){if("string"==typeof t)return de.apply(null,arguments);if(null!==e&&"object"==typeof e&&1===arguments.length)return de.apply(null,arguments);var r="object"==typeof t?t:{};return r.get=e,r.set="function"==typeof t?t:r.set,r.name=r.name||e.name||"",new G(r)};function ve(e,t,n){return vt("'extendShallowObservable' is deprecated, use 'extendObservable(target, props, { deep: false })' instead"),ye(e,t,n,xe)}function ye(e,t,n,r){var i=(r=_e(r)).defaultDecorator||(!1===r.deep?Te:we);J(e,r.name,i.enhancer),Ht();try{for(var o in t){var a=Object.getOwnPropertyDescriptor(t,o);0;var s=(n&&o in n?n[o]:a.get?de:i)(e,o,a,!0);s&&Object.defineProperty(e,o,s)}}finally{Xt()}return e}ge.struct=me;var be={deep:!0,name:void 0,defaultDecorator:void 0},xe={deep:!1,name:void 0,defaultDecorator:void 0};function _e(e){return null==e?be:"string"==typeof e?{name:e,deep:!0}:e}function Ee(e){return e.defaultDecorator?e.defaultDecorator.enhancer:!1===e.deep?Ie:Pe}Object.freeze(be),Object.freeze(xe);var we=se(Pe),Se=se(function(e,t,n){return null==e?e:ae(e)||lt(e)||Ge(e)?e:Array.isArray(e)?Oe.array(e,{name:n,deep:!1}):_t(e)?Oe.object(e,void 0,{name:n,deep:!1}):kt(e)?Oe.map(e,{name:n,deep:!1}):mt(!1)}),Te=se(Ie),ke=se(function(e,t,n){0;return I(e,t)?t:e});var Ce={box:function(e,t){arguments.length>2&&Ae("box");var n=_e(t);return new Y(e,Ee(n),n.name)},shallowBox:function(e,t){return arguments.length>2&&Ae("shallowBox"),vt("observable.shallowBox","observable.box(value, { deep: false })"),Oe.box(e,{name:t,deep:!1})},array:function(e,t){arguments.length>2&&Ae("array");var n=_e(t);return new rt(e,Ee(n),n.name)},shallowArray:function(e,t){return arguments.length>2&&Ae("shallowArray"),vt("observable.shallowArray","observable.array(values, { deep: false })"),Oe.array(e,{name:t,deep:!1})},map:function(e,t){arguments.length>2&&Ae("map");var n=_e(t);return new Ue(e,Ee(n),n.name)},shallowMap:function(e,t){return arguments.length>2&&Ae("shallowMap"),vt("observable.shallowMap","observable.map(values, { deep: false })"),Oe.map(e,{name:t,deep:!1})},object:function(e,t,n){return"string"==typeof arguments[1]&&Ae("object"),ye({},e,t,_e(n))},shallowObject:function(e,t){return"string"==typeof arguments[1]&&Ae("shallowObject"),vt("observable.shallowObject","observable.object(values, {}, { deep: false })"),Oe.object(e,{},{name:t,deep:!1})},ref:Te,shallow:Se,deep:we,struct:ke},Oe=function(e,t,n){if("string"==typeof arguments[1])return we.apply(null,arguments);if(le(e))return e;var r=_t(e)?Oe.object(e,t,n):Array.isArray(e)?Oe.array(e,t):kt(e)?Oe.map(e,t):e;if(r!==e)return r;mt(!1)};function Ae(e){mt("Expected one or two arguments to observable."+e+". Did you accidentally try to use observable."+e+" as decorator?")}function Pe(e,t,n){return le(e)?e:Array.isArray(e)?Oe.array(e,{name:n}):_t(e)?Oe.object(e,void 0,{name:n}):kt(e)?Oe.map(e,{name:n}):e}function Ie(e){return e}function Ne(){return"function"==typeof Symbol&&Symbol.iterator||"@@iterator"}function Re(e,t){wt(e,Ne(),t)}function De(e){return e[Ne()]=Le,e}function Le(){return this}function Fe(e,t){void 0===t&&(t=void 0),Ht();try{return e.apply(t)}finally{Xt()}}Object.keys(Ce).forEach(function(e){return Oe[e]=Ce[e]});var Me={},Ue=function(){function e(e,t,n){if(void 0===t&&(t=Pe),void 0===n&&(n="ObservableMap@"+dt()),this.enhancer=t,this.name=n,this.$mobx=Me,this._keys=new rt(void 0,Ie,this.name+".keys()",!0),"function"!=typeof Map)throw new Error("mobx.map requires Map polyfill for the current browser. Check babel-polyfill or core-js/es6/map.js");this._data=new Map,this._hasMap=new Map,this.merge(e)}return e.prototype._has=function(e){return this._data.has(e)},e.prototype.has=function(e){return this._hasMap.has(e)?this._hasMap.get(e).get():this._updateHasMapEntry(e,!1).get()},e.prototype.set=function(e,t){var n=this._has(e);if(z(this)){var r=W(this,{type:n?"update":"add",object:this,newValue:t,name:e});if(!r)return this;t=r.newValue}return n?this._updateValue(e,t):this._addValue(e,t),this},e.prototype.delete=function(e){var t=this;if(z(this)&&!(i=W(this,{type:"delete",object:this,name:e})))return!1;if(this._has(e)){var n=f(),r=H(this),i=r||n?{type:"delete",object:this,oldValue:this._data.get(e).value,name:e}:null;return n&&m(a({},i,{name:this.name,key:e})),Fe(function(){t._keys.remove(e),t._updateHasMapEntry(e,!1),t._data.get(e).setNewValue(void 0),t._data.delete(e)}),r&&q(this,i),n&&v(),!0}return!1},e.prototype._updateHasMapEntry=function(e,t){var n=this._hasMap.get(e);return n?n.setNewValue(t):(n=new Y(t,Ie,this.name+"."+e+"?",!1),this._hasMap.set(e,n)),n},e.prototype._updateValue=function(e,t){var n=this._data.get(e);if((t=n.prepareNewValue(t))!==$){var r=f(),i=H(this),o=i||r?{type:"update",object:this,oldValue:n.value,name:e,newValue:t}:null;r&&m(a({},o,{name:this.name,key:e})),n.setNewValue(t),i&&q(this,o),r&&v()}},e.prototype._addValue=function(e,t){var n=this;Fe(function(){var r=new Y(t,n.enhancer,n.name+"."+e,!1);n._data.set(e,r),t=r.value,n._updateHasMapEntry(e,!0),n._keys.push(e)});var r=f(),i=H(this),o=i||r?{type:"add",object:this,name:e,newValue:t}:null;r&&m(a({},o,{name:this.name,key:e})),i&&q(this,o),r&&v()},e.prototype.get=function(e){return this.has(e)?this.dehanceValue(this._data.get(e).get()):this.dehanceValue(void 0)},e.prototype.dehanceValue=function(e){return void 0!==this.dehancer?this.dehancer(e):e},e.prototype.keys=function(){return this._keys[Ne()]()},e.prototype.values=function(){var e=this,t=0;return De({next:function(){return t<e._keys.length?{value:e.get(e._keys[t++]),done:!1}:{value:void 0,done:!0}}})},e.prototype.entries=function(){var e=this,t=0;return De({next:function(){if(t<e._keys.length){var n=e._keys[t++];return{value:[n,e.get(n)],done:!1}}return{done:!0}}})},e.prototype.forEach=function(e,t){var n=this;this._keys.forEach(function(r){return e.call(t,n.get(r),r,n)})},e.prototype.merge=function(e){var t=this;return Ge(e)&&(e=e.toJS()),Fe(function(){_t(e)?Object.keys(e).forEach(function(n){return t.set(n,e[n])}):Array.isArray(e)?e.forEach(function(e){var n=s(e,2),r=n[0],i=n[1];return t.set(r,i)}):kt(e)?e.forEach(function(e,n){return t.set(n,e)}):null!=e&&mt("Cannot initialize map from "+e)}),this},e.prototype.clear=function(){var e=this;Fe(function(){rn(function(){e._keys.slice().forEach(function(t){return e.delete(t)})})})},e.prototype.replace=function(e){var t=this;return Fe(function(){var n,r=_t(n=e)?Object.keys(n):Array.isArray(n)?n.map(function(e){return s(e,1)[0]}):kt(n)||Ge(n)?Ct(n.keys()):mt("Cannot get keys from '"+n+"'");t._keys.filter(function(e){return-1===r.indexOf(e)}).forEach(function(e){return t.delete(e)}),t.merge(e)}),this},Object.defineProperty(e.prototype,"size",{get:function(){return this._keys.length},enumerable:!0,configurable:!0}),e.prototype.toPOJO=function(){var e=this,t={};return this._keys.forEach(function(n){return t[""+n]=e.get(n)}),t},e.prototype.toJS=function(){var e=this,t=new Map;return this._keys.forEach(function(n){return t.set(n,e.get(n))}),t},e.prototype.toJSON=function(){return this.toPOJO()},e.prototype.toString=function(){var e=this;return this.name+"[{ "+this._keys.map(function(t){return t+": "+e.get(t)}).join(", ")+" }]"},e.prototype.observe=function(e,t){return X(this,e)},e.prototype.intercept=function(e){return K(this,e)},e}();Re(Ue.prototype,function(){return this.entries()}),wt(Ue.prototype,"undefined"!=typeof Symbol?Symbol.toStringTag:"@@toStringTag","Map");var Be,je,Ge=St("ObservableMap",Ue);function Ve(e,t){if("object"==typeof e&&null!==e){if(lt(e))return void 0!==t&&mt(!1),e.$mobx.atom;if(Ge(e)){var n=e;return void 0===t?Ve(n._keys):((r=n._data.get(t)||n._hasMap.get(t))||mt(!1),r)}var r;if(h(e),t&&!e.$mobx&&e[t],ae(e))return t?((r=e.$mobx.values[t])||mt(!1),r):mt(!1);if(je(e)||V(e)||mn(e))return e}else if("function"==typeof e&&mn(e.$mobx))return e.$mobx;return mt(!1)}function ze(e,t){return e||mt("Expecting some object"),void 0!==t?ze(Ve(e,t)):je(e)||V(e)||mn(e)?e:Ge(e)?e:(h(e),e.$mobx?e.$mobx:void mt(!1))}function Ke(e,t){return(void 0!==t?Ve(e,t):ae(e)||Ge(e)?ze(e):Ve(e)).name}function We(e,t,n){return Xe("onBecomeObserved",e,t,n)}function He(e,t,n){return Xe("onBecomeUnobserved",e,t,n)}function Xe(e,t,n,r){var i="string"==typeof n?Ve(t,n):Ve(t),o="string"==typeof n?r:n,a=i[e];return"function"!=typeof a?mt(!1):(i[e]=function(){a.call(this),o.call(this)},function(){i[e]=a})}function qe(e,t,n){void 0===t&&(t=bt),void 0===n&&(n=bt);var r=new Be(e);return We(r,t),He(r,n),r}var $e,Ye,Ze,Qe,Je=($e=!1,Ye={},Object.defineProperty(Ye,"0",{set:function(){$e=!0}}),Object.create(Ye)[0]=1,!1===$e),et=0,tt=function(){return function(){}}();Ze=tt,Qe=Array.prototype,void 0!==Object.setPrototypeOf?Object.setPrototypeOf(Ze.prototype,Qe):void 0!==Ze.prototype.__proto__?Ze.prototype.__proto__=Qe:Ze.prototype=Qe,Object.isFrozen(Array)&&["constructor","push","shift","concat","pop","unshift","replace","find","findIndex","splice","reverse","sort"].forEach(function(e){Object.defineProperty(tt.prototype,e,{configurable:!0,writable:!0,value:Array.prototype[e]})});var nt=function(){function e(e,t,n,r){this.array=n,this.owned=r,this.values=[],this.lastKnownLength=0,this.atom=new Be(e||"ObservableArray@"+dt()),this.enhancer=function(n,r){return t(n,r,e+"[..]")}}return e.prototype.dehanceValue=function(e){return void 0!==this.dehancer?this.dehancer(e):e},e.prototype.dehanceValues=function(e){return void 0!==this.dehancer&&this.values.length>0?e.map(this.dehancer):e},e.prototype.intercept=function(e){return K(this,e)},e.prototype.observe=function(e,t){return void 0===t&&(t=!1),t&&e({object:this.array,type:"splice",index:0,added:this.values.slice(),addedCount:this.values.length,removed:[],removedCount:0}),X(this,e)},e.prototype.getArrayLength=function(){return this.atom.reportObserved(),this.values.length},e.prototype.setArrayLength=function(e){if("number"!=typeof e||e<0)throw new Error("[mobx.array] Out of range: "+e);var t=this.values.length;if(e!==t)if(e>t){for(var n=new Array(e-t),r=0;r<e-t;r++)n[r]=void 0;this.spliceWithArray(t,0,n)}else this.spliceWithArray(e,t-e)},e.prototype.updateArrayLength=function(e,t){if(e!==this.lastKnownLength)throw new Error("[mobx] Modification exception: the internal structure of an observable array was changed. Did you use peek() to change it?");this.lastKnownLength+=t,t>0&&e+t+1>et&&st(e+t+1)},e.prototype.spliceWithArray=function(e,t,n){var r=this;en(this.atom);var i=this.values.length;if(void 0===e?e=0:e>i?e=i:e<0&&(e=Math.max(0,i+e)),t=1===arguments.length?i-e:null==t?0:Math.max(0,Math.min(t,i-e)),void 0===n&&(n=ht),z(this)){var o=W(this,{object:this.array,type:"splice",index:e,removedCount:t,added:n});if(!o)return ht;t=o.removedCount,n=o.added}var a=(n=0===n.length?n:n.map(function(e){return r.enhancer(e,void 0)})).length-t;this.updateArrayLength(i,a);var s=this.spliceItemsIntoValues(e,t,n);return 0===t&&0===n.length||this.notifyArraySplice(e,n,s),this.dehanceValues(s)},e.prototype.spliceItemsIntoValues=function(e,t,n){if(n.length<1e4)return(r=this.values).splice.apply(r,u([e,t],n));var r,i=this.values.slice(e,e+t);return this.values=this.values.slice(0,e).concat(n,this.values.slice(e+t)),i},e.prototype.notifyArrayChildUpdate=function(e,t,n){var r=!this.owned&&f(),i=H(this),o=i||r?{object:this.array,type:"update",index:e,newValue:t,oldValue:n}:null;r&&m(a({},o,{name:this.atom.name})),this.atom.reportChanged(),i&&q(this,o),r&&v()},e.prototype.notifyArraySplice=function(e,t,n){var r=!this.owned&&f(),i=H(this),o=i||r?{object:this.array,type:"splice",index:e,removed:n,added:t,removedCount:n.length,addedCount:t.length}:null;r&&m(a({},o,{name:this.atom.name})),this.atom.reportChanged(),i&&q(this,o),r&&v()},e}(),rt=function(e){function t(t,n,r,i){void 0===r&&(r="ObservableArray@"+dt()),void 0===i&&(i=!1);var o=e.call(this)||this,a=new nt(r,n,o,i);return wt(o,"$mobx",a),t&&t.length&&o.spliceWithArray(0,0,t),Je&&Object.defineProperty(a.array,"0",it),o}return o(t,e),t.prototype.intercept=function(e){return this.$mobx.intercept(e)},t.prototype.observe=function(e,t){return void 0===t&&(t=!1),this.$mobx.observe(e,t)},t.prototype.clear=function(){return this.splice(0)},t.prototype.concat=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.$mobx.atom.reportObserved(),Array.prototype.concat.apply(this.peek(),e.map(function(e){return lt(e)?e.peek():e}))},t.prototype.replace=function(e){return this.$mobx.spliceWithArray(0,this.$mobx.values.length,e)},t.prototype.toJS=function(){return this.slice()},t.prototype.toJSON=function(){return this.toJS()},t.prototype.peek=function(){return this.$mobx.atom.reportObserved(),this.$mobx.dehanceValues(this.$mobx.values)},t.prototype.find=function(e,t,n){void 0===n&&(n=0),3===arguments.length&&vt("The array.find fromIndex argument to find will not be supported anymore in the next major");var r=this.findIndex.apply(this,arguments);return-1===r?void 0:this.get(r)},t.prototype.findIndex=function(e,t,n){void 0===n&&(n=0),3===arguments.length&&vt("The array.findIndex fromIndex argument to find will not be supported anymore in the next major");for(var r=this.peek(),i=r.length,o=n;o<i;o++)if(e.call(t,r[o],o,this))return o;return-1},t.prototype.splice=function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];switch(arguments.length){case 0:return[];case 1:return this.$mobx.spliceWithArray(e);case 2:return this.$mobx.spliceWithArray(e,t)}return this.$mobx.spliceWithArray(e,t,n)},t.prototype.spliceWithArray=function(e,t,n){return this.$mobx.spliceWithArray(e,t,n)},t.prototype.push=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=this.$mobx;return n.spliceWithArray(n.values.length,0,e),n.values.length},t.prototype.pop=function(){return this.splice(Math.max(this.$mobx.values.length-1,0),1)[0]},t.prototype.shift=function(){return this.splice(0,1)[0]},t.prototype.unshift=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=this.$mobx;return n.spliceWithArray(0,0,e),n.values.length},t.prototype.reverse=function(){var e=this.slice();return e.reverse.apply(e,arguments)},t.prototype.sort=function(e){var t=this.slice();return t.sort.apply(t,arguments)},t.prototype.remove=function(e){var t=this.$mobx.dehanceValues(this.$mobx.values).indexOf(e);return t>-1&&(this.splice(t,1),!0)},t.prototype.move=function(e,t){function n(e){if(e<0)throw new Error("[mobx.array] Index out of bounds: "+e+" is negative");var t=this.$mobx.values.length;if(e>=t)throw new Error("[mobx.array] Index out of bounds: "+e+" is not smaller than "+t)}if(vt("observableArray.move is deprecated, use .slice() & .replace() instead"),n.call(this,e),n.call(this,t),e!==t){var r,i=this.$mobx.values;r=e<t?u(i.slice(0,e),i.slice(e+1,t+1),[i[e]],i.slice(t+1)):u(i.slice(0,t),[i[e]],i.slice(t,e),i.slice(e+1)),this.replace(r)}},t.prototype.get=function(e){var t=this.$mobx;if(t){if(e<t.values.length)return t.atom.reportObserved(),t.dehanceValue(t.values[e]);console.warn("[mobx.array] Attempt to read an array index ("+e+") that is out of bounds ("+t.values.length+"). Please check length first. Out of bound indices will not be tracked by MobX")}},t.prototype.set=function(e,t){var n=this.$mobx,r=n.values;if(e<r.length){en(n.atom);var i=r[e];if(z(n)){var o=W(n,{type:"update",object:this,index:e,newValue:t});if(!o)return;t=o.newValue}(t=n.enhancer(t,i))!==i&&(r[e]=t,n.notifyArrayChildUpdate(e,t,i))}else{if(e!==r.length)throw new Error("[mobx.array] Index out of bounds, "+e+" is larger than "+r.length);n.spliceWithArray(e,0,[t])}},t}(tt);Re(rt.prototype,function(){this.$mobx.atom.reportObserved();var e=this,t=0;return De({next:function(){return t<e.length?{value:e[t++],done:!1}:{done:!0,value:void 0}}})}),Object.defineProperty(rt.prototype,"length",{enumerable:!1,configurable:!0,get:function(){return this.$mobx.getArrayLength()},set:function(e){this.$mobx.setArrayLength(e)}}),"undefined"!=typeof Symbol&&Symbol.toStringTag&&Et(rt.prototype,"undefined"!=typeof Symbol?Symbol.toStringTag:"@@toStringTag","Array"),["every","filter","forEach","indexOf","join","lastIndexOf","map","reduce","reduceRight","slice","some","toString","toLocaleString"].forEach(function(e){var t=Array.prototype[e];gt("function"==typeof t,"Base function not defined on Array prototype: '"+e+"'"),Et(rt.prototype,e,function(){return t.apply(this.peek(),arguments)})}),function(e,t){for(var n=0;n<t.length;n++)Et(e,t[n],e[t[n]])}(rt.prototype,["constructor","intercept","observe","clear","concat","get","replace","toJS","toJSON","peek","find","findIndex","splice","spliceWithArray","push","pop","set","shift","unshift","reverse","sort","remove","move","toString","toLocaleString"]);var it=ot(0);function ot(e){return{enumerable:!1,configurable:!1,get:function(){return this.get(e)},set:function(t){this.set(e,t)}}}function at(e){Object.defineProperty(rt.prototype,""+e,ot(e))}function st(e){for(var t=et;t<e;t++)at(t);et=e}st(1e3);var ut=St("ObservableArrayAdministration",nt);function lt(e){return xt(e)&&ut(e.$mobx)}var ct="An invariant failed, however the error is obfuscated because this is an production build.",ht=[];Object.freeze(ht);var pt={};function ft(){return"undefined"!=typeof window?window:r}function dt(){return++Dt.mobxGuid}function mt(e){throw gt(!1,e),"X"}function gt(e,t){if(!e)throw new Error("[mobx] "+(t||ct))}Object.freeze(pt);function vt(e,t){return!1}function yt(e){var t=!1;return function(){if(!t)return t=!0,e.apply(this,arguments)}}var bt=function(){};function xt(e){return null!==e&&"object"==typeof e}function _t(e){if(null===e||"object"!=typeof e)return!1;var t=Object.getPrototypeOf(e);return t===Object.prototype||null===t}function Et(e,t,n){Object.defineProperty(e,t,{enumerable:!1,writable:!0,configurable:!0,value:n})}function wt(e,t,n){Object.defineProperty(e,t,{enumerable:!1,writable:!1,configurable:!0,value:n})}function St(e,t){var n="isMobX"+e;return t.prototype[n]=!0,function(e){return xt(e)&&!0===e[n]}}function Tt(e){return Array.isArray(e)||lt(e)}function kt(e){return void 0!==ft().Map&&e instanceof ft().Map}function Ct(e){for(var t=[];;){var n=e.next();if(n.done)break;t.push(n.value)}return t}function Ot(){return"function"==typeof Symbol&&Symbol.toPrimitive||"@@toPrimitive"}function At(e){return null===e?null:"object"==typeof e?""+e:e}var Pt,It,Nt=["mobxGuid","spyListeners","enforceActions","computedRequiresReaction","disableErrorBoundaries","runId"],Rt=function(){return function(){this.version=5,this.trackingDerivation=null,this.computationDepth=0,this.runId=0,this.mobxGuid=0,this.inBatch=0,this.pendingUnobservations=[],this.pendingReactions=[],this.isRunningReactions=!1,this.allowStateChanges=!0,this.enforceActions=!1,this.spyListeners=[],this.globalReactionErrorHandlers=[],this.computedRequiresReaction=!1,this.disableErrorBoundaries=!1}}(),Dt=new Rt,Lt=!1,Ft=ft();function Mt(){return Dt}function Ut(){var e=new Rt;for(var t in e)-1===Nt.indexOf(t)&&(Dt[t]=e[t]);Dt.allowStateChanges=!Dt.enforceActions}function Bt(e,t){return jt(Ve(e,t))}function jt(e){var t,n,r={name:e.name};return e.observing&&e.observing.length>0&&(r.dependencies=(t=e.observing,n=[],t.forEach(function(e){-1===n.indexOf(e)&&n.push(e)}),n).map(jt)),r}function Gt(e,t){return Vt(Ve(e,t))}function Vt(e){var t,n={name:e.name};return(t=e).observers&&t.observers.length>0&&(n.observers=function(e){return e.observers}(e).map(Vt)),n}function zt(e,t){var n=e.observers.length;n&&(e.observersIndexes[t.__mapid]=n),e.observers[n]=t,e.lowestObserverState>t.dependenciesState&&(e.lowestObserverState=t.dependenciesState)}function Kt(e,t){if(1===e.observers.length)e.observers.length=0,Wt(e);else{var n=e.observers,r=e.observersIndexes,i=n.pop();if(i!==t){var o=r[t.__mapid]||0;o?r[i.__mapid]=o:delete r[i.__mapid],n[o]=i}delete r[t.__mapid]}}function Wt(e){!1===e.isPendingUnobservation&&(e.isPendingUnobservation=!0,Dt.pendingUnobservations.push(e))}function Ht(){Dt.inBatch++}function Xt(){if(0==--Dt.inBatch){fn();for(var e=Dt.pendingUnobservations,t=0;t<e.length;t++){var n=e[t];n.isPendingUnobservation=!1,0===n.observers.length&&(n.isBeingObserved&&(n.isBeingObserved=!1,n.onBecomeUnobserved()),n instanceof G&&n.suspend())}Dt.pendingUnobservations=[]}}function qt(e){var t=Dt.trackingDerivation;return null!==t?(t.runId!==e.lastAccessedBy&&(e.lastAccessedBy=t.runId,t.newObserving[t.unboundDepsCount++]=e,e.isBeingObserved||(e.isBeingObserved=!0,e.onBecomeObserved())),!0):(0===e.observers.length&&Dt.inBatch>0&&Wt(e),!1)}function $t(e,t){if(console.log("[mobx.trace] '"+e.name+"' is invalidated due to a change in: '"+t.name+"'"),e.isTracing===It.BREAK){var n=[];!function e(t,n,r){if(n.length>=1e3)return void n.push("(and many more)");n.push(""+new Array(r).join("\t")+t.name);t.dependencies&&t.dependencies.forEach(function(t){return e(t,n,r+1)})}(Bt(e),n,1),new Function("debugger;\n/*\nTracing '"+e.name+"'\n\nYou are entering this break point because derivation '"+e.name+"' is being traced and '"+t.name+"' is now forcing it to update.\nJust follow the stacktrace you should now see in the devtools to see precisely what piece of your code is causing this update\nThe stackframe you are looking for is at least ~6-8 stack-frames up.\n\n"+(e instanceof G?e.derivation.toString():"")+"\n\nThe dependencies for this derivation are:\n\n"+n.join("\n")+"\n*/\n    ")()}}Ft.__mobxInstanceCount?(Ft.__mobxInstanceCount++,setTimeout(function(){Lt||mt(!1)},1)):Ft.__mobxInstanceCount=1,function(e){e[e.NOT_TRACKING=-1]="NOT_TRACKING",e[e.UP_TO_DATE=0]="UP_TO_DATE",e[e.POSSIBLY_STALE=1]="POSSIBLY_STALE",e[e.STALE=2]="STALE"}(Pt||(Pt={})),function(e){e[e.NONE=0]="NONE",e[e.LOG=1]="LOG",e[e.BREAK=2]="BREAK"}(It||(It={}));var Yt=function(){return function(e){this.cause=e}}();function Zt(e){return e instanceof Yt}function Qt(e){switch(e.dependenciesState){case Pt.UP_TO_DATE:return!1;case Pt.NOT_TRACKING:case Pt.STALE:return!0;case Pt.POSSIBLY_STALE:for(var t=on(),n=e.observing,r=n.length,i=0;i<r;i++){var o=n[i];if(V(o)){if(Dt.disableErrorBoundaries)o.get();else try{o.get()}catch(e){return an(t),!0}if(e.dependenciesState===Pt.STALE)return an(t),!0}}return sn(e),an(t),!1}}function Jt(){return null!==Dt.trackingDerivation}function en(e){var t=e.observers.length>0;Dt.computationDepth>0&&t&&mt(!1),Dt.allowStateChanges||!t&&"strict"!==Dt.enforceActions||mt(!1)}function tn(e,t,n){sn(e),e.newObserving=new Array(e.observing.length+100),e.unboundDepsCount=0,e.runId=++Dt.runId;var r,i=Dt.trackingDerivation;if(Dt.trackingDerivation=e,!0===Dt.disableErrorBoundaries)r=t.call(n);else try{r=t.call(n)}catch(e){r=new Yt(e)}return Dt.trackingDerivation=i,function(e){for(var t=e.observing,n=e.observing=e.newObserving,r=Pt.UP_TO_DATE,i=0,o=e.unboundDepsCount,a=0;a<o;a++){var s=n[a];0===s.diffValue&&(s.diffValue=1,i!==a&&(n[i]=s),i++),s.dependenciesState>r&&(r=s.dependenciesState)}n.length=i,e.newObserving=null,o=t.length;for(;o--;){var s=t[o];0===s.diffValue&&Kt(s,e),s.diffValue=0}for(;i--;){var s=n[i];1===s.diffValue&&(s.diffValue=0,zt(s,e))}r!==Pt.UP_TO_DATE&&(e.dependenciesState=r,e.onBecomeStale())}(e),r}function nn(e){var t=e.observing;e.observing=[];for(var n=t.length;n--;)Kt(t[n],e);e.dependenciesState=Pt.NOT_TRACKING}function rn(e){var t=on(),n=e();return an(t),n}function on(){var e=Dt.trackingDerivation;return Dt.trackingDerivation=null,e}function an(e){Dt.trackingDerivation=e}function sn(e){if(e.dependenciesState!==Pt.UP_TO_DATE){e.dependenciesState=Pt.UP_TO_DATE;for(var t=e.observing,n=t.length;n--;)t[n].lowestObserverState=Pt.UP_TO_DATE}}function un(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=!1;"boolean"==typeof e[e.length-1]&&(n=e.pop());var r=function(e){switch(e.length){case 0:return Dt.trackingDerivation;case 1:return Ve(e[0]);case 2:return Ve(e[0],e[1])}}(e);if(!r)return mt(!1);r.isTracing===It.NONE&&console.log("[mobx.trace] '"+r.name+"' tracing enabled"),r.isTracing=n?It.BREAK:It.LOG}var ln=function(){function e(e,t,n){void 0===e&&(e="Reaction@"+dt()),this.name=e,this.onInvalidate=t,this.errorHandler=n,this.observing=[],this.newObserving=[],this.dependenciesState=Pt.NOT_TRACKING,this.diffValue=0,this.runId=0,this.unboundDepsCount=0,this.__mapid="#"+dt(),this.isDisposed=!1,this._isScheduled=!1,this._isTrackPending=!1,this._isRunning=!1,this.isTracing=It.NONE}return e.prototype.onBecomeStale=function(){this.schedule()},e.prototype.schedule=function(){this._isScheduled||(this._isScheduled=!0,Dt.pendingReactions.push(this),fn())},e.prototype.isScheduled=function(){return this._isScheduled},e.prototype.runReaction=function(){if(!this.isDisposed){if(Ht(),this._isScheduled=!1,Qt(this)){this._isTrackPending=!0;try{this.onInvalidate(),this._isTrackPending&&f()&&d({name:this.name,type:"scheduled-reaction"})}catch(e){this.reportExceptionInDerivation(e)}}Xt()}},e.prototype.track=function(e){Ht();var t,n=f();n&&(t=Date.now(),m({name:this.name,type:"reaction"})),this._isRunning=!0;var r=tn(this,e,void 0);this._isRunning=!1,this._isTrackPending=!1,this.isDisposed&&nn(this),Zt(r)&&this.reportExceptionInDerivation(r.cause),n&&v({time:Date.now()-t}),Xt()},e.prototype.reportExceptionInDerivation=function(e){var t=this;if(this.errorHandler)this.errorHandler(e,this);else{if(Dt.disableErrorBoundaries)throw e;var n="[mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: '"+this;console.error(n,e),f()&&d({type:"error",name:this.name,message:n,error:""+e}),Dt.globalReactionErrorHandlers.forEach(function(n){return n(e,t)})}},e.prototype.dispose=function(){this.isDisposed||(this.isDisposed=!0,this._isRunning||(Ht(),nn(this),Xt()))},e.prototype.getDisposer=function(){var e=this.dispose.bind(this);return e.$mobx=this,e},e.prototype.toString=function(){return"Reaction["+this.name+"]"},e.prototype.trace=function(e){void 0===e&&(e=!1),un(this,e)},e}();function cn(e){return Dt.globalReactionErrorHandlers.push(e),function(){var t=Dt.globalReactionErrorHandlers.indexOf(e);t>=0&&Dt.globalReactionErrorHandlers.splice(t,1)}}var hn=100,pn=function(e){return e()};function fn(){Dt.inBatch>0||Dt.isRunningReactions||pn(dn)}function dn(){Dt.isRunningReactions=!0;for(var e=Dt.pendingReactions,t=0;e.length>0;){++t===hn&&(console.error("Reaction doesn't converge to a stable state after "+hn+" iterations. Probably there is a cycle in the reactive function: "+e[0]),e.splice(0));for(var n=e.splice(0),r=0,i=n.length;r<i;r++)n[r].runReaction()}Dt.isRunningReactions=!1}var mn=St("Reaction",ln);function gn(e){var t=pn;pn=function(n){return e(function(){return t(n)})}}function vn(e,t,n,r){return"function"==typeof n?function(e,t,n,r){return ze(e,t).observe(n,r)}(e,t,n,r):function(e,t,n){return ze(e).observe(t,n)}(e,t,n)}function yn(e,t,n){return"function"==typeof n?function(e,t,n){return ze(e,t).intercept(n)}(e,t,n):function(e,t){return ze(e).intercept(t)}(e,t)}function bn(e,t,n){return 1===arguments.length||t&&"object"==typeof t?function(e,t){0;var n,r=new Promise(function(r,i){var o=xn(e,r,a({},t,{onError:i}));n=function(){o(),i("WHEN_CANCELLED")}});return r.cancel=n,r}(e,t):xn(e,t,n||{})}function xn(e,t,n){var r;"number"==typeof n.timeout&&(r=setTimeout(function(){if(!o.$mobx.isDisposed){o();var e=new Error("WHEN_TIMEOUT");if(!n.onError)throw e;n.onError(e)}},n.timeout)),n.name=n.name||"When@"+dt();var i=b(n.name+"-effect",t),o=M(function(t){e()&&(t.dispose(),r&&clearTimeout(r),i())},n);return o}function _n(e){return ae(e)?e.$mobx.getKeys():Ge(e)?e._keys.slice():mt(!1)}function En(e){return ae(e)?_n(e).map(function(t){return e[t]}):Ge(e)?_n(e).map(function(t){return e.get(t)}):lt(e)?e.slice():mt(!1)}function wn(e,t,n){if(2!==arguments.length)if(ae(e)){var r=e.$mobx;r.values[t]?r.write(e,t,n):ee(e,t,n,r.defaultEnhancer)}else if(Ge(e))e.set(t,n);else{if(!lt(e))return mt(!1);"number"!=typeof t&&(t=parseInt(t,10)),gt(t>=0,"Not a valid index: '"+t+"'"),Ht(),t>=e.length&&(e.length=t+1),e[t]=n,Xt()}else{Ht();var i=t;try{for(var o in i)wn(e,o,i[o])}finally{Xt()}}}function Sn(e,t){if(ae(e))e.$mobx.remove(t);else if(Ge(e))e.delete(t);else{if(!lt(e))return mt(!1);"number"!=typeof t&&(t=parseInt(t,10)),gt(t>=0,"Not a valid index: '"+t+"'"),e.splice(t,1)}}function Tn(e,t){if(ae(e)){var n=ze(e);return n.getKeys(),n.values[t]instanceof Y}return Ge(e)?e.has(t):lt(e)?t>=0&&t<e.length:mt(!1)}function kn(e,t){if(Tn(e,t))return ae(e)?e[t]:Ge(e)?e.get(t):lt(e)?e[t]:mt(!1)}function Cn(e,t){var n="function"==typeof e?e.prototype:e;for(var r in t){var i=t[r],o=i(n,r,Object.getOwnPropertyDescriptor(n,r));o&&Object.defineProperty(n,r,o)}return e}function On(e){var t=e.enforceActions,n=e.computedRequiresReaction,r=e.disableErrorBoundaries,i=e.arrayBuffer,o=e.reactionScheduler;if(void 0!==t){if("boolean"!=typeof t&&"strict"!==t)return fail("Invalid configuration for 'enforceActions': "+t);Dt.enforceActions=t,Dt.allowStateChanges=!0!==t&&"strict"!==t}void 0!==n&&(Dt.computedRequiresReaction=!!n),!0===e.isolateGlobalState&&(Lt=!0,ft().__mobxInstanceCount--),void 0!==r&&(!0===r&&console.warn("WARNING: Debug feature only. MobX will NOT recover from errors if this is on."),Dt.disableErrorBoundaries=!!r),"number"==typeof i&&st(i),o&&gn(o)}var An=0;function Pn(e){1!==arguments.length&&mt("Flow expects one 1 argument and cannot be used as decorator");var t=e.name||"<unnamed flow>";return function(){var n,r=arguments,i=++An,o=k(t+" - runid: "+i+" - init",e).apply(this,r),a=void 0,s=new Promise(function(e,r){var s=0;function u(e){var n;a=void 0;try{n=k(t+" - runid: "+i+" - yield "+s++,o.next).call(o,e)}catch(e){return r(e)}c(n)}function l(e){var n;a=void 0;try{n=k(t+" - runid: "+i+" - yield "+s++,o.throw).call(o,e)}catch(e){return r(e)}c(n)}function c(t){if(!t||"function"!=typeof t.then)return t.done?e(t.value):(a=Promise.resolve(t.value)).then(u,l);t.then(c,r)}n=r,u(void 0)});return s.cancel=k(t+" - runid: "+i+" - cancel",function(){try{a&&In(a);var e=o.return(),t=Promise.resolve(e.value);t.then(bt,bt),In(t),n(new Error("FLOW_CANCELLED"))}catch(e){n(e)}}),s}}function In(e){"function"==typeof e.cancel&&e.cancel()}var Nn={detectCycles:!0,exportMapsAsObjects:!0};function Rn(e,t,n,r){return r.detectCycles&&e.set(t,n),n}function Dn(e,t){return le(e)?("boolean"==typeof t&&(t={detectCycles:t}),t||(t=Nn),!0===t.detectCycles&&(n=new Map),function e(t,n,r){if(!le(t))return t;if(!0===n.detectCycles&&null!==t&&"object"==typeof t&&r.has(t))return r.get(t);if(lt(t)){var i=Rn(r,t,[],n),o=t.map(function(t){return e(t,n,r)});i.length=o.length;for(var a=0,s=o.length;a<s;a++)i[a]=o[a];return i}if(ae(t)){for(var u in i=Rn(r,t,{},n),_n(t),t)i[u]=e(t[u],n,r);return i}if(Ge(t)){if(!1===n.exportMapsAsObjects){var l=Rn(r,t,new Map,n);return t.forEach(function(t,i){l.set(i,e(t,n,r))}),l}var c=Rn(r,t,{},n);return t.forEach(function(t,i){c[i]=e(t,n,r)}),c}return Z(t)?e(t.get(),n,r):t}(e,t,n)):e;var n}function Ln(e,t,n){var r;if(Ge(e)||lt(e)||Z(e))r=ze(e);else{if(!ae(e))return mt(!1);if("string"!=typeof t)return mt(!1);r=ze(e,t)}return void 0!==r.dehancer?mt(!1):(r.dehancer="function"==typeof t?t:n,function(){r.dehancer=void 0})}"object"==typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__&&__MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({spy:y,extras:{getDebugName:Ke}})}.call(this,n(72),n(32))},function(e,t,n){e.exports=n(60)()},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(70)},function(e,t,n){"use strict";n.r(t),function(e){n.d(t,"propTypes",function(){return k}),n.d(t,"PropTypes",function(){return k}),n.d(t,"onError",function(){return ee}),n.d(t,"observer",function(){return K}),n.d(t,"Observer",function(){return W}),n.d(t,"renderReporter",function(){return L}),n.d(t,"componentByNodeRegistery",function(){return D}),n.d(t,"componentByNodeRegistry",function(){return D}),n.d(t,"trackComponents",function(){return U}),n.d(t,"useStaticRendering",function(){return B}),n.d(t,"Provider",function(){return J}),n.d(t,"inject",function(){return P});var r=n(2),i=n(0),o=n.n(i),a=n(4);"undefined"!=typeof window?window:void 0!==e||"undefined"!=typeof self&&self;var s,u=(function(e,t){var n,r,i,o,a,s,u,l;e.exports=(n={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},r={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i=Object.defineProperty,o=Object.getOwnPropertyNames,a=Object.getOwnPropertySymbols,s=Object.getOwnPropertyDescriptor,u=Object.getPrototypeOf,l=u&&u(Object),function e(t,c,h){if("string"!=typeof c){if(l){var p=u(c);p&&p!==l&&e(t,p,h)}var f=o(c);a&&(f=f.concat(a(c)));for(var d=0;d<f.length;++d){var m=f[d];if(!(n[m]||r[m]||h&&h[m])){var g=s(c,m);try{i(t,m,g)}catch(e){}}}return t}return t})}(s={exports:{}},s.exports),s.exports),l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},c=(function(){function e(e){this.value=e}function t(t){var n,r;function i(n,r){try{var a=t[n](r),s=a.value;s instanceof e?Promise.resolve(s.value).then(function(e){i("next",e)},function(e){i("throw",e)}):o(a.done?"return":"normal",a.value)}catch(e){o("throw",e)}}function o(e,t){switch(e){case"return":n.resolve({value:t,done:!0});break;case"throw":n.reject(t);break;default:n.resolve({value:t,done:!1})}(n=n.next)?i(n.key,n.arg):r=null}this._invoke=function(e,t){return new Promise(function(o,a){var s={key:e,arg:t,resolve:o,reject:a,next:null};r?r=r.next=s:(n=r=s,i(e,t))})},"function"!=typeof t.return&&(this.return=void 0)}"function"==typeof Symbol&&Symbol.asyncIterator&&(t.prototype[Symbol.asyncIterator]=function(){return this}),t.prototype.next=function(e){return this._invoke("next",e)},t.prototype.throw=function(e){return this._invoke("throw",e)},t.prototype.return=function(e){return this._invoke("return",e)}}(),function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}),h=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),p=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)},f=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},d=function(){function e(){c(this,e),this.listeners=[]}return h(e,[{key:"on",value:function(e){var t=this;return this.listeners.push(e),function(){var n=t.listeners.indexOf(e);-1!==n&&t.listeners.splice(n,1)}}},{key:"emit",value:function(e){this.listeners.forEach(function(t){return t(e)})}}]),e}();function m(e){function t(t,n,i,o,a,s){for(var u=arguments.length,l=Array(u>6?u-6:0),c=6;c<u;c++)l[c-6]=arguments[c];return Object(r.untracked)(function(){if(o=o||"<<anonymous>>",s=s||i,null==n[i]){if(t){var r=null===n[i]?"null":"undefined";return new Error("The "+a+" `"+s+"` is marked as required in `"+o+"`, but its value is `"+r+"`.")}return null}return e.apply(void 0,[n,i,o,a,s].concat(l))})}var n=t.bind(null,!1);return n.isRequired=t.bind(null,!0),n}function g(e){var t=void 0===e?"undefined":l(e);return Array.isArray(e)?"array":e instanceof RegExp?"object":function(e,t){return"symbol"===e||"Symbol"===t["@@toStringTag"]||"function"==typeof Symbol&&t instanceof Symbol}(t,e)?"symbol":t}function v(e,t){return m(function(n,i,o,a,s){return Object(r.untracked)(function(){if(e&&g(n[i])===t.toLowerCase())return null;var a=void 0;switch(t){case"Array":a=r.isObservableArray;break;case"Object":a=r.isObservableObject;break;case"Map":a=r.isObservableMap;break;default:throw new Error("Unexpected mobxType: "+t)}var u=n[i];if(!a(u)){var l=function(e){var t=g(e);if("object"===t){if(e instanceof Date)return"date";if(e instanceof RegExp)return"regexp"}return t}(u),c=e?" or javascript `"+t.toLowerCase()+"`":"";return new Error("Invalid prop `"+s+"` of type `"+l+"` supplied to `"+o+"`, expected `mobx.Observable"+t+"`"+c+".")}return null})})}function y(e,t){return m(function(n,i,o,a,s){for(var u=arguments.length,l=Array(u>5?u-5:0),c=5;c<u;c++)l[c-5]=arguments[c];return Object(r.untracked)(function(){if("function"!=typeof t)return new Error("Property `"+s+"` of component `"+o+"` has invalid PropType notation.");var r=v(e,"Array")(n,i,o);if(r instanceof Error)return r;for(var u=n[i],c=0;c<u.length;c++)if((r=t.apply(void 0,[u,c,o,a,s+"["+c+"]"].concat(l)))instanceof Error)return r;return null})})}var b=v(!1,"Array"),x=y.bind(null,!1),_=v(!1,"Map"),E=v(!1,"Object"),w=v(!0,"Array"),S=y.bind(null,!0),T=v(!0,"Object"),k=Object.freeze({observableArray:b,observableArrayOf:x,observableMap:_,observableObject:E,arrayOrObservableArray:w,arrayOrObservableArrayOf:S,objectOrObservableObject:T});var C={mobxStores:T};Object.seal(C);var O={contextTypes:{get:function(){return C},set:function(e){console.warn("Mobx Injector: you are trying to attach `contextTypes` on an component decorated with `inject` (or `observer`) HOC. Please specify the contextTypes on the wrapped component instead. It is accessible through the `wrappedComponent`")},configurable:!0,enumerable:!1},isMobxInjector:{value:!0,writable:!0,configurable:!0,enumerable:!0}};function A(e,t,n){var r,o,a="inject-"+(t.displayName||t.name||t.constructor&&t.constructor.name||"Unknown");n&&(a+="-with-"+n);var s=(o=r=function(n){function r(){var e,t,n;c(this,r);for(var i=arguments.length,o=Array(i),a=0;a<i;a++)o[a]=arguments[a];return t=n=f(this,(e=r.__proto__||Object.getPrototypeOf(r)).call.apply(e,[this].concat(o))),n.storeRef=function(e){n.wrappedInstance=e},f(n,t)}return p(r,n),h(r,[{key:"render",value:function(){var n={};for(var r in this.props)this.props.hasOwnProperty(r)&&(n[r]=this.props[r]);var o=e(this.context.mobxStores||{},n,this.context)||{};for(var a in o)n[a]=o[a];return function(e){return!(e.prototype&&e.prototype.render)}(t)||(n.ref=this.storeRef),Object(i.createElement)(t,n)}}]),r}(i.Component),r.displayName=a,o);return u(s,t),s.wrappedComponent=t,Object.defineProperties(s,O),s}function P(){var e=void 0;if("function"==typeof arguments[0])return e=arguments[0],function(t){var n=A(e,t);return n.isMobxInjector=!1,(n=K(n)).isMobxInjector=!0,n};for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e=function(e){return function(t,n){return e.forEach(function(e){if(!(e in n)){if(!(e in t))throw new Error("MobX injector: Store '"+e+"' is not available! Make sure it is provided by some Provider");n[e]=t[e]}}),n}}(t),function(n){return A(e,n,t.join("-"))}}var I=!1,N=!1,R=!1,D="undefined"!=typeof WeakMap?new WeakMap:void 0,L=new d;function F(e){if(a.findDOMNode)try{return Object(a.findDOMNode)(e)}catch(e){return null}return null}function M(e){var t=F(e);t&&D&&D.set(t,e),L.emit({event:"render",renderTime:e.__$mobRenderEnd-e.__$mobRenderStart,totalTime:Date.now()-e.__$mobRenderStart,component:e,node:t})}function U(){if("undefined"==typeof WeakMap)throw new Error("[mobx-react] tracking components is not supported in this browser.");I||(I=!0)}function B(e){N=e}var j=new d;function G(e,t){if(V(e,t))return!0;if("object"!==(void 0===e?"undefined":l(e))||null===e||"object"!==(void 0===t?"undefined":l(t))||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var i=0;i<n.length;i++)if(!hasOwnProperty.call(t,n[i])||!V(e[n[i]],t[n[i]]))return!1;return!0}function V(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}var z={componentWillUnmount:function(){if(!0!==N&&(this.render.$mobx&&this.render.$mobx.dispose(),this.__$mobxIsUnmounted=!0,I)){var e=F(this);e&&D&&D.delete(e),L.emit({event:"destroy",component:this,node:e})}},componentDidMount:function(){I&&M(this)},componentDidUpdate:function(){I&&M(this)},shouldComponentUpdate:function(e,t){return N&&console.warn("[mobx-react] It seems that a re-rendering of a React component is triggered while in static (server-side) mode. Please make sure components are rendered only once server-side."),this.state!==t||!G(this.props,e)}};function K(e,t){if("string"==typeof e)throw new Error("Store names should be provided as array");if(Array.isArray(e))return R||(R=!0,console.warn('Mobx observer: Using observer to inject stores is deprecated since 4.0. Use `@inject("store1", "store2") @observer ComponentClass` or `inject("store1", "store2")(observer(componentClass))` instead of `@observer(["store1", "store2"]) ComponentClass`')),t?P.apply(null,e)(K(t)):function(t){return K(e,t)};var n=e;if(!0===n.isMobxInjector&&console.warn("Mobx observer: You are trying to use 'observer' on a component that already has 'inject'. Please apply 'observer' before applying 'inject'"),n.__proto__===i.PureComponent&&console.warn("Mobx observer: You are using 'observer' on React.PureComponent. These two achieve two opposite goals and should not be used together"),!("function"!=typeof n||n.prototype&&n.prototype.render||n.isReactClass||i.Component.isPrototypeOf(n))){var o,a,s=K((a=o=function(e){function t(){return c(this,t),f(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return p(t,e),h(t,[{key:"render",value:function(){return n.call(this,this.props,this.context)}}]),t}(i.Component),o.displayName=n.displayName||n.name,o.contextTypes=n.contextTypes,o.propTypes=n.propTypes,o.defaultProps=n.defaultProps,a));return u(s,n),s}if(!n)throw new Error("Please pass a valid component to 'observer'");var l=n.prototype||n;!function(e){["componentDidMount","componentWillUnmount","componentDidUpdate"].forEach(function(t){!function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=e[t],i=z[t],o=r?!0===n?function(){i.apply(this,arguments),r.apply(this,arguments)}:function(){r.apply(this,arguments),i.apply(this,arguments)}:i;e[t]=o}(e,t)}),e.shouldComponentUpdate?console.warn("Use `shouldComponentUpdate` in an `observer` based component breaks the behavior of `observer` and might lead to unexpected results. Manually implementing `sCU` should not be needed when using mobx-react."):e.shouldComponentUpdate=z.shouldComponentUpdate}(l),n.isMobXReactObserver=!0;var d=l.render;return l.render=function(){return function(e){var t=this;if(!0===N)return e.call(this);function n(e){var t=this[e],n=Object(r.createAtom)("reactive "+e);Object.defineProperty(this,e,{configurable:!0,enumerable:!0,get:function(){return n.reportObserved(),t},set:function(e){l||G(t,e)?t=e:(t=e,u=!0,n.reportChanged(),u=!1)}})}function o(){var e=this;h=!1;var t=void 0,n=void 0;if(p.track(function(){I&&(e.__$mobRenderStart=Date.now());try{n=Object(r._allowStateChanges)(!1,c)}catch(e){t=e}I&&(e.__$mobRenderEnd=Date.now())}),t)throw j.emit(t),t;return n}var a=this.displayName||this.name||this.constructor&&(this.constructor.displayName||this.constructor.name)||"<component>",s=this._reactInternalInstance&&this._reactInternalInstance._rootNodeID||this._reactInternalFiber&&this._reactInternalFiber._debugID,u=!1,l=!1;n.call(this,"props"),n.call(this,"state");var c=e.bind(this),h=!1,p=new r.Reaction(a+"#"+s+".render()",function(){if(!h&&(h=!0,"function"==typeof t.componentWillReact&&t.componentWillReact(),!0!==t.__$mobxIsUnmounted)){var e=!0;try{l=!0,u||i.Component.prototype.forceUpdate.call(t),e=!1}finally{l=!1,e&&p.dispose()}}});return p.reactComponent=this,o.$mobx=p,this.render=o,o.call(this)}.call(this,d)},n}var W=K(function(e){var t=e.children,n=e.inject,r=e.render,i=t||r;if(void 0===i)return null;if(!n)return i();console.warn("<Observer inject=.../> is no longer supported. Please use inject on the enclosing component instead");var a=P(n)(i);return o.a.createElement(a,null)});W.displayName="Observer";var H,X,q=function(e,t,n,r,i){var o="children"===t?"render":"children";return"function"==typeof e[t]&&"function"==typeof e[o]?new Error("Invalid prop,do not use children and render in the same time in`"+n):"function"!=typeof e[t]&&"function"!=typeof e[o]?new Error("Invalid prop `"+i+"` of type `"+l(e[t])+"` supplied to `"+n+"`, expected `function`."):void 0};function $(){var e=this.constructor.getDerivedStateFromProps(this.props,this.state);null!=e&&this.setState(e)}function Y(e){var t=this.constructor.getDerivedStateFromProps(e,this.state);null!=t&&this.setState(t)}function Z(e,t){try{var n=this.props,r=this.state;this.props=e,this.state=t,this.__reactInternalSnapshotFlag=!0,this.__reactInternalSnapshot=this.getSnapshotBeforeUpdate(n,r)}finally{this.props=n,this.state=r}}W.propTypes={render:q,children:q},$.__suppressDeprecationWarning=!0,Y.__suppressDeprecationWarning=!0,Z.__suppressDeprecationWarning=!0;var Q={children:!0,key:!0,ref:!0},J=(X=H=function(e){function t(e,n){c(this,t);var r=f(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return r.state=e||{},r}return p(t,e),h(t,[{key:"render",value:function(){return i.Children.only(this.props.children)}},{key:"getChildContext",value:function(){var e={},t=this.context.mobxStores;if(t)for(var n in t)e[n]=t[n];for(var r in this.state)Q[r]||"suppressChangedStoreWarning"===r||(e[r]=this.props[r]);return{mobxStores:e}}}],[{key:"getDerivedStateFromProps",value:function(e,t){if(!e)return null;if(!t)return e;if(Object.keys(e).length!==Object.keys(t).length&&console.warn("MobX Provider: The set of provided stores has changed. Please avoid changing stores as the change might not propagate to all children"),!e.suppressChangedStoreWarning)for(var n in e)Q[n]||t[n]===e[n]||console.warn("MobX Provider: Provided store '"+n+"' has changed. Please avoid replacing stores as the change might not propagate to all children");return e}}]),t}(i.Component),H.contextTypes={mobxStores:T},H.childContextTypes={mobxStores:T.isRequired},X);if(function(e){var t=e.prototype;if(!t||!t.isReactComponent)throw new Error("Can only polyfill class components");if("function"!=typeof e.getDerivedStateFromProps&&"function"!=typeof t.getSnapshotBeforeUpdate)return e;var n=null,r=null,i=null;if("function"==typeof t.componentWillMount?n="componentWillMount":"function"==typeof t.UNSAFE_componentWillMount&&(n="UNSAFE_componentWillMount"),"function"==typeof t.componentWillReceiveProps?r="componentWillReceiveProps":"function"==typeof t.UNSAFE_componentWillReceiveProps&&(r="UNSAFE_componentWillReceiveProps"),"function"==typeof t.componentWillUpdate?i="componentWillUpdate":"function"==typeof t.UNSAFE_componentWillUpdate&&(i="UNSAFE_componentWillUpdate"),null!==n||null!==r||null!==i){var o=e.displayName||e.name,a="function"==typeof e.getDerivedStateFromProps?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()";throw Error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n"+o+" uses "+a+" but also contains the following legacy lifecycles:"+(null!==n?"\n  "+n:"")+(null!==r?"\n  "+r:"")+(null!==i?"\n  "+i:"")+"\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks")}if("function"==typeof e.getDerivedStateFromProps&&(t.componentWillMount=$,t.componentWillReceiveProps=Y),"function"==typeof t.getSnapshotBeforeUpdate){if("function"!=typeof t.componentDidUpdate)throw new Error("Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype");t.componentWillUpdate=Z;var s=t.componentDidUpdate;t.componentDidUpdate=function(e,t,n){var r=this.__reactInternalSnapshotFlag?this.__reactInternalSnapshot:n;s.call(this,e,t,r)}}}(J),!i.Component)throw new Error("mobx-react requires React to be available");if(!r.spy)throw new Error("mobx-react requires mobx to be available");"function"==typeof a.unstable_batchedUpdates&&Object(r.configure)({reactionScheduler:a.unstable_batchedUpdates});var ee=function(e){return j.on(e)};if("object"===("undefined"==typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__?"undefined":l(__MOBX_DEVTOOLS_GLOBAL_HOOK__))){var te={spy:r.spy,extras:{getDebugName:r.getDebugName}},ne={renderReporter:L,componentByNodeRegistry:D,componentByNodeRegistery:D,trackComponents:U};__MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobxReact(ne,te)}}.call(this,n(32))},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,a,s=function(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),u=1;u<arguments.length;u++){for(var l in n=Object(arguments[u]))i.call(n,l)&&(s[l]=n[l]);if(r){a=r(n);for(var c=0;c<a.length;c++)o.call(n,a[c])&&(s[a[c]]=n[a[c]])}}return s}},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=n(26),o=n(1),a=n(8),s=n(45),u=n(44),l=n(43),c=[],h={};e.exports=function(e){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return r.textureCache={},r.threadDim={},r.programUniformLocationCache={},r.framebuffer=null,r.buffer=null,r.program=null,r.outputToTexture=n.outputToTexture,r.endianness=o.systemEndianness(),r.subKernelOutputTextures=null,r.subKernelOutputVariableNames=null,r.argumentsLength=0,r.compiledFragShaderString=null,r.compiledVertShaderString=null,r.drawBuffersMap=null,r.outputTexture=null,r.maxTexSize=null,r.uniform1fCache={},r.uniform1iCache={},r.uniform2fCache={},r.uniform2fvCache={},r.uniform3fvCache={},r._webGl||(r._webGl=r.initWebGl()),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i),r(t,[{key:"initWebGl",value:function(){return o.initWebGl(this.getCanvas())}},{key:"validateOptions",value:function(){var e=o.isFloatReadPixelsSupported();if(!0===this.floatTextures&&!o.OES_texture_float)throw new Error("Float textures are not supported on this browser");if(!0===this.floatOutput&&!0!==this.floatOutputForce&&!e)throw new Error("Float texture outputs are not supported on this browser");if(void 0===this.floatTextures&&o.OES_texture_float&&(this.floatTextures=!0,this.floatOutput=e),!this.output||0===this.output.length){if(1!==arguments.length)throw new Error("Auto output only supported for kernels with only one input");var t=o.getArgumentType(arguments[0]);if("Array"===t)this.output=o.getDimensions(t);else{if("Texture"!==t)throw new Error("Auto output not supported for input type: "+t);this.output=arguments[0].output}}if(this.texSize=o.dimToTexSize({floatTextures:this.floatTextures,floatOutput:this.floatOutput},this.output,!0),this.graphical){if(2!==this.output.length)throw new Error("Output must have 2 dimensions on graphical mode");this.floatOutput&&(this.floatOutput=!1,console.warn("Cannot use graphical mode and float output at the same time")),this.texSize=o.clone(this.output)}else void 0===this.floatOutput&&o.OES_texture_float&&(this.floatOutput=!0)}},{key:"updateMaxTexSize",value:function(){var e=this.texSize,t=this._canvas;if(null===this.maxTexSize){var n=c.indexOf(t);-1===n&&(n=c.length,c.push(t),h[n]=[e[0],e[1]]),this.maxTexSize=h[n]}this.maxTexSize[0]<e[0]&&(this.maxTexSize[0]=e[0]),this.maxTexSize[1]<e[1]&&(this.maxTexSize[1]=e[1])}},{key:"build",value:function(){this.validateOptions(),this.setupParams(arguments),this.updateMaxTexSize();var e=this.texSize,t=this._webGl,n=this._canvas;t.enable(t.SCISSOR_TEST),t.viewport(0,0,this.maxTexSize[0],this.maxTexSize[1]),n.width=this.maxTexSize[0],n.height=this.maxTexSize[1];for(var r=this.threadDim=o.clone(this.output);r.length<3;)r.push(1);this.functionBuilder&&this._addKernels();var i=this._getVertShaderString(arguments),a=t.createShader(t.VERTEX_SHADER);t.shaderSource(a,i),t.compileShader(a);var s=this._getFragShaderString(arguments),u=t.createShader(t.FRAGMENT_SHADER);if(t.shaderSource(u,s),t.compileShader(u),!t.getShaderParameter(a,t.COMPILE_STATUS))throw console.log(i),console.error("An error occurred compiling the shaders: "+t.getShaderInfoLog(a)),new Error("Error compiling vertex shader");if(!t.getShaderParameter(u,t.COMPILE_STATUS))throw console.log(s),console.error("An error occurred compiling the shaders: "+t.getShaderInfoLog(u)),new Error("Error compiling fragment shader");this.debug&&(console.log("Options:"),console.dir(this),console.log("GLSL Shader Output:"),console.log(s));var l=this.program=t.createProgram();t.attachShader(l,a),t.attachShader(l,u),t.linkProgram(l),this.framebuffer=t.createFramebuffer(),this.framebuffer.width=e[0],this.framebuffer.height=e[1];var c=new Float32Array([-1,-1,1,-1,-1,1,1,1]),h=new Float32Array([0,0,1,0,0,1,1,1]),p=c.byteLength,f=this.buffer;f?t.bindBuffer(t.ARRAY_BUFFER,f):(f=this.buffer=t.createBuffer(),t.bindBuffer(t.ARRAY_BUFFER,f),t.bufferData(t.ARRAY_BUFFER,c.byteLength+h.byteLength,t.STATIC_DRAW)),t.bufferSubData(t.ARRAY_BUFFER,0,c),t.bufferSubData(t.ARRAY_BUFFER,p,h);var d=t.getAttribLocation(this.program,"aPos");t.enableVertexAttribArray(d),t.vertexAttribPointer(d,2,t.FLOAT,t.FALSE,0,0);var m=t.getAttribLocation(this.program,"aTexCoord");t.enableVertexAttribArray(m),t.vertexAttribPointer(m,2,t.FLOAT,t.FALSE,0,p),t.bindFramebuffer(t.FRAMEBUFFER,this.framebuffer),this.outputImmutable||(this._setupOutputTexture(),null!==this.subKernelOutputVariableNames&&this.subKernelOutputVariableNames.length>0&&this._setupSubOutputTextures(this.subKernelOutputVariableNames.length))}},{key:"run",value:function(){null===this.program&&this.build.apply(this,arguments);var e=this.paramNames,t=this.paramTypes,n=this.texSize,r=this._webGl;r.useProgram(this.program),r.scissor(0,0,n[0],n[1]),this.hardcodeConstants||(this.setUniform3fv("uOutputDim",this.threadDim),this.setUniform2fv("uTexSize",n)),this.setUniform2f("ratio",n[0]/this.maxTexSize[0],n[1]/this.maxTexSize[1]),this.argumentsLength=0;for(var i=0;i<e.length;i++)this._addArgument(arguments[i],t[i],e[i]);if(this.graphical)return r.bindRenderbuffer(r.RENDERBUFFER,null),r.bindFramebuffer(r.FRAMEBUFFER,null),void r.drawArrays(r.TRIANGLE_STRIP,0,4);r.bindFramebuffer(r.FRAMEBUFFER,this.framebuffer),this.outputImmutable&&this._setupOutputTexture();var o=this.outputTexture;if(null!==this.subKernelOutputVariableNames&&(this.outputImmutable&&(this.subKernelOutputTextures=[],this._setupSubOutputTextures(this.subKernelOutputVariableNames.length)),this.drawBuffers.drawBuffersWEBGL(this.drawBuffersMap)),r.drawArrays(r.TRIANGLE_STRIP,0,4),null!==this.subKernelOutputTextures){if(null!==this.subKernels){var s=[];s.result=this.renderOutput(o);for(var u=0;u<this.subKernels.length;u++)s.push(new a(this.subKernelOutputTextures[u],n,this.threadDim,this.output,this._webGl));return s}if(null!==this.subKernelProperties){var l={result:this.renderOutput(o)},c=0;for(var h in this.subKernelProperties)this.subKernelProperties.hasOwnProperty(h)&&(l[h]=new a(this.subKernelOutputTextures[c],n,this.threadDim,this.output,this._webGl),c++);return l}}return this.renderOutput(o)}},{key:"renderOutput",value:function(e){var t=this.texSize,n=this._webGl,r=this.threadDim,i=this.output;if(this.outputToTexture)return new a(e,t,this.threadDim,i,this._webGl);var s=void 0;if(this.floatOutput)s=new Float32Array(t[0]*t[1]*4),n.readPixels(0,0,t[0],t[1],n.RGBA,n.FLOAT,s);else{var u=new Uint8Array(t[0]*t[1]*4);n.readPixels(0,0,t[0],t[1],n.RGBA,n.UNSIGNED_BYTE,u),s=new Float32Array(u.buffer)}return s=s.subarray(0,r[0]*r[1]*r[2]),1===i.length?s:2===i.length?o.splitArray(s,i[0]):3===i.length?o.splitArray(s,i[0]*i[1]).map(function(e){return o.splitArray(e,i[0])}):void 0}},{key:"getOutputTexture",value:function(){return this.outputTexture}},{key:"_setupOutputTexture",value:function(){var e=this._webGl,t=this.texSize,n=this.outputTexture=this._webGl.createTexture();e.activeTexture(e.TEXTURE0+this.paramNames.length),e.bindTexture(e.TEXTURE_2D,n),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST),this.floatOutput?e.texImage2D(e.TEXTURE_2D,0,e.RGBA,t[0],t[1],0,e.RGBA,e.FLOAT,null):e.texImage2D(e.TEXTURE_2D,0,e.RGBA,t[0],t[1],0,e.RGBA,e.UNSIGNED_BYTE,null),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0)}},{key:"_setupSubOutputTextures",value:function(e){for(var t=this._webGl,n=this.texSize,r=this.drawBuffersMap=[t.COLOR_ATTACHMENT0],i=this.subKernelOutputTextures=[],o=0;o<e;o++){var a=this._webGl.createTexture();i.push(a),r.push(t.COLOR_ATTACHMENT0+o+1),t.activeTexture(t.TEXTURE0+this.paramNames.length+o),t.bindTexture(t.TEXTURE_2D,a),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.NEAREST),this.floatOutput?t.texImage2D(t.TEXTURE_2D,0,t.RGBA,n[0],n[1],0,t.RGBA,t.FLOAT,null):t.texImage2D(t.TEXTURE_2D,0,t.RGBA,n[0],n[1],0,t.RGBA,t.UNSIGNED_BYTE,null),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0+o+1,t.TEXTURE_2D,a,0)}}},{key:"getArgumentTexture",value:function(e){return this.getTextureCache("ARGUMENT_"+e)}},{key:"getTextureCache",value:function(e){return this.textureCache.hasOwnProperty(e)?this.textureCache[e]:this.textureCache[e]=this._webGl.createTexture()}},{key:"detachTextureCache",value:function(e){delete this.textureCache[e]}},{key:"setUniform1f",value:function(e,t){if(this.uniform1fCache.hasOwnProperty(e)&&t===this.uniform1fCache[e])return;this.uniform1fCache[e]=t;var n=this.getUniformLocation(e);this._webGl.uniform1f(n,t)}},{key:"setUniform1i",value:function(e,t){if(this.uniform1iCache.hasOwnProperty(e)&&t===this.uniform1iCache[e])return;this.uniform1iCache[e]=t;var n=this.getUniformLocation(e);this._webGl.uniform1i(n,t)}},{key:"setUniform2f",value:function(e,t,n){if(this.uniform2fCache.hasOwnProperty(e)){var r=this.uniform2fCache[e];if(t===r[0]&&n===r[1])return}this.uniform2fCache[e]=[t,n];var i=this.getUniformLocation(e);this._webGl.uniform2f(i,t,n)}},{key:"setUniform2fv",value:function(e,t){if(this.uniform2fvCache.hasOwnProperty(e)){var n=this.uniform2fvCache[e];if(t[0]===n[0]&&t[1]===n[1])return}this.uniform2fvCache[e]=t;var r=this.getUniformLocation(e);this._webGl.uniform2fv(r,t)}},{key:"setUniform3fv",value:function(e,t){if(this.uniform3fvCache.hasOwnProperty(e)){var n=this.uniform3fvCache[e];if(t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2])return}this.uniform3fvCache[e]=t;var r=this.getUniformLocation(e);this._webGl.uniform3fv(r,t)}},{key:"getUniformLocation",value:function(e){return this.programUniformLocationCache.hasOwnProperty(e)?this.programUniformLocationCache[e]:this.programUniformLocationCache[e]=this._webGl.getUniformLocation(this.program,e)}},{key:"_getFragShaderArtifactMap",value:function(e){return{HEADER:this._getHeaderString(),LOOP_MAX:this._getLoopMaxString(),CONSTANTS:this._getConstantsString(),DECODE32_ENDIANNESS:this._getDecode32EndiannessString(),ENCODE32_ENDIANNESS:this._getEncode32EndiannessString(),GET_WRAPAROUND:this._getGetWraparoundString(),GET_TEXTURE_CHANNEL:this._getGetTextureChannelString(),GET_TEXTURE_INDEX:this._getGetTextureIndexString(),GET_RESULT:this._getGetResultString(),MAIN_PARAMS:this._getMainParamsString(e),MAIN_CONSTANTS:this._getMainConstantsString(),KERNEL:this._getKernelString(),MAIN_RESULT:this._getMainResultString()}}},{key:"_addArgument",value:function(e,t,n){var r=this._webGl,i=this.getArgumentTexture(n);switch(e instanceof a&&(t="Texture"),t){case"Array":var s=o.getDimensions(e,!0),u=o.dimToTexSize({floatTextures:this.floatTextures,floatOutput:this.floatOutput},s);r.activeTexture(r.TEXTURE0+this.argumentsLength),r.bindTexture(r.TEXTURE_2D,i),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_S,r.CLAMP_TO_EDGE),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_T,r.CLAMP_TO_EDGE),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MIN_FILTER,r.NEAREST),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MAG_FILTER,r.NEAREST);var l=u[0]*u[1];this.floatTextures&&(l*=4);var c=new Float32Array(l);o.flattenTo(e,c);var h=void 0;this.floatTextures?r.texImage2D(r.TEXTURE_2D,0,r.RGBA,u[0],u[1],0,r.RGBA,r.FLOAT,c):(h=new Uint8Array(c.buffer),r.texImage2D(r.TEXTURE_2D,0,r.RGBA,u[0],u[1],0,r.RGBA,r.UNSIGNED_BYTE,h)),this.hardcodeConstants||(this.setUniform3fv("user_"+n+"Dim",s),this.setUniform2fv("user_"+n+"Size",u)),this.setUniform1i("user_"+n,this.argumentsLength);break;case"Number":this.setUniform1f("user_"+n,e);break;case"Input":var p=e,f=p.size,d=o.dimToTexSize({floatTextures:this.floatTextures,floatOutput:this.floatOutput},f);r.activeTexture(r.TEXTURE0+this.argumentsLength),r.bindTexture(r.TEXTURE_2D,i),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_S,r.CLAMP_TO_EDGE),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_T,r.CLAMP_TO_EDGE),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MIN_FILTER,r.NEAREST),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MAG_FILTER,r.NEAREST);var m=d[0]*d[1],g=void 0;if(this.floatTextures?(g=new Float32Array(m*=4)).set(p.value):g=p.value,this.floatTextures)r.texImage2D(r.TEXTURE_2D,0,r.RGBA,d[0],d[1],0,r.RGBA,r.FLOAT,g);else{var v=new Uint8Array(g.buffer);r.texImage2D(r.TEXTURE_2D,0,r.RGBA,d[0],d[1],0,r.RGBA,r.UNSIGNED_BYTE,v)}this.hardcodeConstants||(this.setUniform3fv("user_"+n+"Dim",f),this.setUniform2fv("user_"+n+"Size",d)),this.setUniform1i("user_"+n,this.argumentsLength);break;case"Texture":var y=e,b=y.dimensions,x=y.size;r.activeTexture(r.TEXTURE0+this.argumentsLength),r.bindTexture(r.TEXTURE_2D,y.texture),this.setUniform3fv("user_"+n+"Dim",b),this.setUniform2fv("user_"+n+"Size",x),this.setUniform1i("user_"+n,this.argumentsLength);break;default:throw new Error("Input type not supported (WebGL): "+e)}this.argumentsLength++}},{key:"_getHeaderString",value:function(){return null!==this.subKernels||null!==this.subKernelProperties?"#extension GL_EXT_draw_buffers : require\n":""}},{key:"_getLoopMaxString",value:function(){return this.loopMaxIterations?" "+parseInt(this.loopMaxIterations)+".0;\n":" 1000.0;\n"}},{key:"_getConstantsString",value:function(){var e=[],t=this.threadDim,n=this.texSize;return this.hardcodeConstants?e.push("highp vec3 uOutputDim = vec3("+t[0]+","+t[1]+", "+t[2]+")","highp vec2 uTexSize = vec2("+n[0]+", "+n[1]+")"):e.push("uniform highp vec3 uOutputDim","uniform highp vec2 uTexSize"),this._linesToString(e)}},{key:"_getTextureCoordinate",value:function(){var e=this.subKernelOutputVariableNames;return null===e||e.length<1?"varying highp vec2 vTexCoord;\n":"out highp vec2 vTexCoord;\n"}},{key:"_getDecode32EndiannessString",value:function(){return"LE"===this.endianness?"":"  rgba.rgba = rgba.abgr;\n"}},{key:"_getEncode32EndiannessString",value:function(){return"LE"===this.endianness?"":"  rgba.rgba = rgba.abgr;\n"}},{key:"_getGetWraparoundString",value:function(){return this.wraparound?"  xyz = mod(xyz, texDim);\n":""}},{key:"_getGetTextureChannelString",value:function(){return this.floatTextures?this._linesToString(["  int channel = int(integerMod(index, 4.0))","  index = float(int(index) / 4)"]):""}},{key:"_getGetTextureIndexString",value:function(){return this.floatTextures?"  index = float(int(index)/4);\n":""}},{key:"_getGetResultString",value:function(){return this.floatTextures?this._linesToString(["  if (channel == 0) return texel.r","  if (channel == 1) return texel.g","  if (channel == 2) return texel.b","  if (channel == 3) return texel.a"]):"  return decode32(texel);\n"}},{key:"_getMainParamsString",value:function(e){for(var t=[],n=this.paramTypes,r=this.paramNames,i=0;i<r.length;i++){var a=e[i],s=r[i],u=n[i];if(this.hardcodeConstants)if("Array"===u||"Texture"===u){var l=o.getDimensions(a,!0),c=o.dimToTexSize({floatTextures:this.floatTextures,floatOutput:this.floatOutput},l);t.push("uniform highp sampler2D user_"+s,"highp vec2 user_"+s+"Size = vec2("+c[0]+".0, "+c[1]+".0)","highp vec3 user_"+s+"Dim = vec3("+l[0]+".0, "+l[1]+".0, "+l[2]+".0)")}else"Number"===u&&Number.isInteger(a)?t.push("highp float user_"+s+" = "+a+".0"):"Number"===u&&t.push("highp float user_"+s+" = "+a);else"Array"===u||"Texture"===u||"Input"===u?t.push("uniform highp sampler2D user_"+s,"uniform highp vec2 user_"+s+"Size","uniform highp vec3 user_"+s+"Dim"):"Number"===u&&t.push("uniform highp float user_"+s)}return this._linesToString(t)}},{key:"_getMainConstantsString",value:function(){var e=[];if(this.constants)for(var t in this.constants)if(this.constants.hasOwnProperty(t)){var n=parseFloat(this.constants[t]);Number.isInteger(n)?e.push("const float constants_"+t+" = "+parseInt(n)+".0"):e.push("const float constants_"+t+" = "+parseFloat(n))}return this._linesToString(e)}},{key:"_getKernelString",value:function(){var e=[],t=this.subKernelOutputVariableNames;if(null!==t){e.push("highp float kernelResult = 0.0");for(var n=0;n<t.length;n++)e.push("highp float "+t[n]+" = 0.0")}else e.push("highp float kernelResult = 0.0");return this._linesToString(e)+this.functionBuilder.getPrototypeString("kernel")}},{key:"_getMainResultString",value:function(){var e=this.subKernelOutputVariableNames,t=[];if(this.floatOutput&&t.push("  index *= 4.0"),this.graphical)t.push("  threadId = indexTo3D(index, uOutputDim)","  kernel()","  gl_FragColor = actualColor");else if(this.floatOutput)for(var n=["r","g","b","a"],r=0;r<n.length;++r){if(t.push("  threadId = indexTo3D(index, uOutputDim)"),t.push("  kernel()"),e){t.push("  gl_FragData[0]."+n[r]+" = kernelResult");for(var i=0;i<e.length;++i)t.push("  gl_FragData["+(i+1)+"]."+n[r]+" = "+e[i])}else t.push("  gl_FragColor."+n[r]+" = kernelResult");r<n.length-1&&t.push("  index += 1.0")}else if(null!==e){t.push("  threadId = indexTo3D(index, uOutputDim)"),t.push("  kernel()"),t.push("  gl_FragData[0] = encode32(kernelResult)");for(var o=0;o<e.length;o++)t.push("  gl_FragData["+(o+1)+"] = encode32("+e[o]+")")}else t.push("  threadId = indexTo3D(index, uOutputDim)","  kernel()","  gl_FragColor = encode32(kernelResult)");return this._linesToString(t)}},{key:"_linesToString",value:function(e){return e.length>0?e.join(";\n")+";\n":"\n"}},{key:"_replaceArtifacts",value:function(e,t){return e.replace(/[ ]*__([A-Z]+[0-9]*([_]?[A-Z])*)__;\n/g,function(e,n){if(t.hasOwnProperty(n))return t[n];throw"unhandled artifact "+n})}},{key:"_addKernels",value:function(){var e=this,t=this.functionBuilder,n=this._webGl;if(t.addFunctions(this.functions,{constants:this.constants,output:this.output}),t.addNativeFunctions(this.nativeFunctions),t.addKernel(this.fnString,{prototypeOnly:!1,constants:this.constants,output:this.output,debug:this.debug,loopMaxIterations:this.loopMaxIterations},this.paramNames,this.paramTypes),null!==this.subKernels){if(!(this.drawBuffers=n.getExtension("WEBGL_draw_buffers")))throw new Error("could not instantiate draw buffers extension");this.subKernelOutputVariableNames=[],this.subKernels.forEach(function(t){return e._addSubKernel(t)})}else if(null!==this.subKernelProperties){if(!(this.drawBuffers=n.getExtension("WEBGL_draw_buffers")))throw new Error("could not instantiate draw buffers extension");this.subKernelOutputVariableNames=[],Object.keys(this.subKernelProperties).forEach(function(t){return e._addSubKernel(e.subKernelProperties[t])})}}},{key:"_addSubKernel",value:function(e){this.functionBuilder.addSubKernel(e,{prototypeOnly:!1,constants:this.constants,output:this.output,debug:this.debug,loopMaxIterations:this.loopMaxIterations}),this.subKernelOutputVariableNames.push(e.name+"Result")}},{key:"_getFragShaderString",value:function(e){return null!==this.compiledFragShaderString?this.compiledFragShaderString:this.compiledFragShaderString=this._replaceArtifacts(s,this._getFragShaderArtifactMap(e))}},{key:"_getVertShaderString",value:function(e){return null!==this.compiledVertShaderString?this.compiledVertShaderString:this.compiledVertShaderString=u}},{key:"toString",value:function(){return l(this)}},{key:"addFunction",value:function(e){this.functionBuilder.addFunction(null,e)}}]),t}()},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();e.exports=function(){function e(t,n,r,i,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.texture=t,this.size=n,this.dimensions=r,this.output=i,this.webGl=o,this.kernel=null}return r(e,[{key:"toArray",value:function(e){if(!e)throw new Error("You need to pass the GPU object for toArray to work.");return this.kernel?this.kernel(this):(this.kernel=e.createKernel(function(e){return e[this.thread.z][this.thread.y][this.thread.x]}).setOutput(this.output),this.kernel(this))}},{key:"delete",value:function(){return this.webGl.deleteTexture(this.texture)}}]),e}()},function(e,t,n){"use strict";var r=n(46),i=n(35),o=n(1),a=n(28),s=n(8),u=n(18),l=n(17),c=n(19),h=n(20),p=n(25),f=n(24),d=n(7),m=n(14),g=n(22),v=n(21),y=n(10),b=n(23);r.alias=i,r.utils=o,r.Texture=s,r.Input=a,r.input=function(e,t){return new a(e,t)},r.CPUFunctionBuilder=u,r.CPUFunctionNode=l,r.CPUKernel=c,r.CPURunner=h,r.WebGLFunctionBuilder=p,r.WebGLFunctionNode=f,r.WebGLKernel=d,r.WebGLRunner=m,r.WebGL2FunctionBuilder=g,r.WebGL2FunctionNode=v,r.WebGL2Kernel=y,r.WebGL2Runner=b,e.exports=r,"undefined"!=typeof window&&(window.GPU=r)},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=n(7),o=n(1),a=n(8),s=n(41),u=n(40);e.exports=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i),r(t,[{key:"initWebGl",value:function(){return o.initWebGl2(this.getCanvas())}},{key:"validateOptions",value:function(){var e=o.isFloatReadPixelsSupportedWebGL2();if(!0===this.floatOutput&&!0!==this.floatOutputForce&&!e)throw new Error("Float texture outputs are not supported on this browser");if(void 0===this.floatTextures&&(this.floatTextures=!0,this.floatOutput=e),!this.output||0===this.output.length){if(1!==arguments.length)throw new Error("Auto output only supported for kernels with only one input");var t=o.getArgumentType(arguments[0]);if("Array"===t)this.output=o.getDimensions(t);else{if("Texture"!==t)throw new Error("Auto output not supported for input type: "+t);this.output=arguments[0].output}}if(this.texSize=o.dimToTexSize({floatTextures:this.floatTextures,floatOutput:this.floatOutput},this.output,!0),this.graphical){if(2!==this.output.length)throw new Error("Output must have 2 dimensions on graphical mode");this.floatOutput&&(this.floatOutput=!1,console.warn("Cannot use graphical mode and float output at the same time")),this.texSize=o.clone(this.output)}else void 0===this.floatOutput&&(this.floatOutput=!0);(this.floatOutput||this.floatOutputForce)&&this._webGl.getExtension("EXT_color_buffer_float")}},{key:"run",value:function(){null===this.program&&this.build.apply(this,arguments);var e=this.paramNames,t=this.paramTypes,n=this.texSize,r=this._webGl;r.useProgram(this.program),r.scissor(0,0,n[0],n[1]),this.hardcodeConstants||(this.setUniform3fv("uOutputDim",this.threadDim),this.setUniform2fv("uTexSize",n)),this.setUniform2f("ratio",n[0]/this.maxTexSize[0],n[1]/this.maxTexSize[1]),this.argumentsLength=0;for(var i=0;i<e.length;i++)this._addArgument(arguments[i],t[i],e[i]);if(this.graphical)return r.bindRenderbuffer(r.RENDERBUFFER,null),r.bindFramebuffer(r.FRAMEBUFFER,null),void r.drawArrays(r.TRIANGLE_STRIP,0,4);r.bindFramebuffer(r.FRAMEBUFFER,this.framebuffer),this.outputImmutable&&this._setupOutputTexture();var o=this.outputTexture;if(null!==this.subKernelOutputVariableNames&&(this.outputImmutable&&(this.subKernelOutputTextures=[],this._setupSubOutputTextures(this.subKernelOutputVariableNames.length)),r.drawBuffers(this.drawBuffersMap)),r.drawArrays(r.TRIANGLE_STRIP,0,4),null!==this.subKernelOutputTextures){if(null!==this.subKernels){var s=[];s.result=this.renderOutput(o);for(var u=0;u<this.subKernels.length;u++)s.push(new a(this.subKernelOutputTextures[u],n,this.threadDim,this.output,this._webGl));return s}if(null!==this.subKernelProperties){var l={result:this.renderOutput(o)},c=0;for(var h in this.subKernelProperties)this.subKernelProperties.hasOwnProperty(h)&&(l[h]=new a(this.subKernelOutputTextures[c],n,this.threadDim,this.output,this._webGl),c++);return l}}return this.renderOutput(o)}},{key:"getOutputTexture",value:function(){return this.outputTexture}},{key:"_setupOutputTexture",value:function(){var e=this._webGl,t=this.texSize,n=this.outputTexture=this._webGl.createTexture();e.activeTexture(e.TEXTURE0+this.paramNames.length),e.bindTexture(e.TEXTURE_2D,n),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST),this.floatOutput?e.texImage2D(e.TEXTURE_2D,0,e.RGBA32F,t[0],t[1],0,e.RGBA,e.FLOAT,null):e.texImage2D(e.TEXTURE_2D,0,e.RGBA,t[0],t[1],0,e.RGBA,e.UNSIGNED_BYTE,null),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0)}},{key:"_setupSubOutputTextures",value:function(e){for(var t=this._webGl,n=this.texSize,r=this.drawBuffersMap=[t.COLOR_ATTACHMENT0],i=this.subKernelOutputTextures=[],o=0;o<e;o++){var a=this._webGl.createTexture();i.push(a),r.push(t.COLOR_ATTACHMENT0+o+1),t.activeTexture(t.TEXTURE0+this.paramNames.length+o),t.bindTexture(t.TEXTURE_2D,a),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.NEAREST),this.floatOutput?t.texImage2D(t.TEXTURE_2D,0,t.RGBA32F,n[0],n[1],0,t.RGBA,t.FLOAT,null):t.texImage2D(t.TEXTURE_2D,0,t.RGBA,n[0],n[1],0,t.RGBA,t.UNSIGNED_BYTE,null),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0+o+1,t.TEXTURE_2D,a,0)}}},{key:"_addArgument",value:function(e,t,n){var r=this._webGl,i=this.getArgumentTexture(n);switch(e instanceof a&&(t="Texture"),t){case"Array":var s=o.getDimensions(e,!0),u=o.dimToTexSize({floatTextures:this.floatTextures,floatOutput:this.floatOutput},s);r.activeTexture(r.TEXTURE0+this.argumentsLength),r.bindTexture(r.TEXTURE_2D,i),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_S,r.CLAMP_TO_EDGE),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_T,r.CLAMP_TO_EDGE),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MIN_FILTER,r.NEAREST),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MAG_FILTER,r.NEAREST);var l=u[0]*u[1];this.floatTextures&&(l*=4);var c=new Float32Array(l);o.flattenTo(e,c);var h=void 0;this.floatTextures?r.texImage2D(r.TEXTURE_2D,0,r.RGBA32F,u[0],u[1],0,r.RGBA,r.FLOAT,c):(h=new Uint8Array(c.buffer),r.texImage2D(r.TEXTURE_2D,0,r.RGBA,u[0],u[1],0,r.RGBA,r.UNSIGNED_BYTE,h)),this.hardcodeConstants||(this.setUniform3fv("user_"+n+"Dim",s),this.setUniform2fv("user_"+n+"Size",u)),this.setUniform1i("user_"+n,this.argumentsLength);break;case"Number":this.setUniform1f("user_"+n,e);break;case"Input":var p=e,f=p.size,d=o.dimToTexSize({floatTextures:this.floatTextures,floatOutput:this.floatOutput},f);r.activeTexture(r.TEXTURE0+this.argumentsLength),r.bindTexture(r.TEXTURE_2D,i),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_S,r.CLAMP_TO_EDGE),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_T,r.CLAMP_TO_EDGE),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MIN_FILTER,r.NEAREST),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MAG_FILTER,r.NEAREST);var m=d[0]*d[1],g=void 0;if(this.floatTextures?(g=new Float32Array(m*=4)).set(p.value):g=p.value,this.floatTextures)r.texImage2D(r.TEXTURE_2D,0,r.RGBA32F,d[0],d[1],0,r.RGBA,r.FLOAT,g);else{var v=new Uint8Array(g.buffer);r.texImage2D(r.TEXTURE_2D,0,r.RGBA,d[0],d[1],0,r.RGBA,r.UNSIGNED_BYTE,v)}this.hardcodeConstants||(this.setUniform3fv("user_"+n+"Dim",f),this.setUniform2fv("user_"+n+"Size",d)),this.setUniform1i("user_"+n,this.argumentsLength);break;case"Texture":var y=e,b=y.dimensions,x=y.size;r.activeTexture(r.TEXTURE0+this.argumentsLength),r.bindTexture(r.TEXTURE_2D,y.texture),this.setUniform3fv("user_"+n+"Dim",b),this.setUniform2fv("user_"+n+"Size",x),this.setUniform1i("user_"+n,this.argumentsLength);break;default:throw new Error("Input type not supported (WebGL): "+e)}this.argumentsLength++}},{key:"_getHeaderString",value:function(){return""}},{key:"_getTextureCoordinate",value:function(){var e=this.subKernelOutputVariableNames;return null===e||e.length<1?"in highp vec2 vTexCoord;\n":"out highp vec2 vTexCoord;\n"}},{key:"_getKernelString",value:function(){var e=[],t=this.subKernelOutputVariableNames;if(null!==t){e.push("highp float kernelResult = 0.0"),e.push("layout(location = 0) out highp vec4 data0");for(var n=0;n<t.length;n++)e.push("highp float "+t[n]+" = 0.0","layout(location = "+(n+1)+") out highp vec4 data"+(n+1))}else e.push("out highp vec4 data0"),e.push("highp float kernelResult = 0.0");return this._linesToString(e)+this.functionBuilder.getPrototypeString("kernel")}},{key:"_getMainResultString",value:function(){var e=this.subKernelOutputVariableNames,t=[];if(this.floatOutput&&t.push("  index *= 4.0"),this.graphical)t.push("  threadId = indexTo3D(index, uOutputDim)","  kernel()","  data0 = actualColor");else if(this.floatOutput)for(var n=["r","g","b","a"],r=0;r<n.length;++r){if(t.push("  threadId = indexTo3D(index, uOutputDim)"),t.push("  kernel()"),e){t.push("  data0."+n[r]+" = kernelResult");for(var i=0;i<e.length;++i)t.push("  data"+(i+1)+"."+n[r]+" = "+e[i])}else t.push("  data0."+n[r]+" = kernelResult");r<n.length-1&&t.push("  index += 1.0")}else if(null!==e){t.push("  threadId = indexTo3D(index, uOutputDim)"),t.push("  kernel()"),t.push("  data0 = encode32(kernelResult)");for(var o=0;o<e.length;o++)t.push("  data"+(o+1)+" = encode32("+e[o]+")")}else t.push("  threadId = indexTo3D(index, uOutputDim)","  kernel()","  data0 = encode32(kernelResult)");return this._linesToString(t)}},{key:"_addKernels",value:function(){var e=this,t=this.functionBuilder;this._webGl;t.addFunctions(this.functions,{constants:this.constants,output:this.output}),t.addNativeFunctions(this.nativeFunctions),t.addKernel(this.fnString,{prototypeOnly:!1,constants:this.constants,output:this.output,debug:this.debug,loopMaxIterations:this.loopMaxIterations},this.paramNames,this.paramTypes),null!==this.subKernels?(this.subKernelOutputTextures=[],this.subKernelOutputVariableNames=[],this.subKernels.forEach(function(t){return e._addSubKernel(t)})):null!==this.subKernelProperties&&(this.subKernelOutputTextures=[],this.subKernelOutputVariableNames=[],Object.keys(this.subKernelProperties).forEach(function(t){return e._addSubKernel(e.subKernelProperties[t])}))}},{key:"_getFragShaderString",value:function(e){return null!==this.compiledFragShaderString?this.compiledFragShaderString:this.compiledFragShaderString=this._replaceArtifacts(s,this._getFragShaderArtifactMap(e))}},{key:"_getVertShaderString",value:function(e){return null!==this.compiledVertShaderString?this.compiledVertShaderString:this.compiledVertShaderString=u}}]),t}()},function(module,exports,__webpack_require__){"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var utils=__webpack_require__(1),acorn=__webpack_require__(42);module.exports=function(){function BaseFunctionNode(e,t,n,r,i){if(_classCallCheck(this,BaseFunctionNode),this.calledFunctions=[],this.calledFunctionsArguments={},this.initVariables=[],this.readVariables=[],this.writeVariables=[],this.addFunction=null,this.isRootKernel=!1,this.isSubKernel=!1,this.parent=null,this.debug=null,this.prototypeOnly=null,this.constants=null,this.output=null,n&&(n.hasOwnProperty("debug")&&(this.debug=n.debug),n.hasOwnProperty("prototypeOnly")&&(this.prototypeOnly=n.prototypeOnly),n.hasOwnProperty("constants")&&(this.constants=n.constants),n.hasOwnProperty("output")&&(this.output=n.output),n.hasOwnProperty("loopMaxIterations")&&(this.loopMaxIterations=n.loopMaxIterations)),!t)throw"jsFunction, parameter is missing";if(this.jsFunctionString=t.toString(),!utils.isFunctionString(this.jsFunctionString))throw console.error("jsFunction, to string conversion check failed: not a function?",this.jsFunctionString),"jsFunction, to string conversion check failed: not a function?";if(utils.isFunction(t)?this.jsFunction=t:this.jsFunction=null,this.functionName=e||t&&t.name||utils.getFunctionNameFromString(this.jsFunctionString),!this.functionName)throw"jsFunction, missing name argument or value";if(this.paramNames=utils.getParamNamesFromString(this.jsFunctionString),r){if(Array.isArray(r)){if(r.length!==this.paramNames.length)throw"Invalid argument type array length, against function length -> ("+r.length+","+this.paramNames.length+")";this.paramTypes=r}else if("object"===(void 0===r?"undefined":_typeof(r))){var o=Object.keys(r);if(r.hasOwnProperty("returns")&&(this.returnType=r.returns,o.splice(o.indexOf("returns"),1)),o.length>0&&o.length!==this.paramNames.length)throw"Invalid argument type array length, against function length -> ("+o.length+","+this.paramNames.length+")";this.paramTypes=this.paramNames.map(function(e){return r.hasOwnProperty(e)?r[e]:"float"})}}else this.paramTypes=[];this.returnType||(this.returnType=i||"float")}return _createClass(BaseFunctionNode,[{key:"isIdentifierConstant",value:function(e){return!!this.constants&&this.constants.hasOwnProperty(e)}},{key:"setAddFunction",value:function(e){return this.addFunction=e,this}},{key:"getJsFunction",value:function getJsFunction(){if(this.jsFunction)return this.jsFunction;if(this.jsFunctionString)return this.jsFunction=eval(this.jsFunctionString),this.jsFunction;throw"Missing jsFunction, and jsFunctionString parameter"}},{key:"astMemberExpressionUnroll",value:function(e,t){if("Identifier"===e.type)return e.name;if("ThisExpression"===e.type)return"this";if("MemberExpression"===e.type&&e.object&&e.property)return e.object.hasOwnProperty("name")&&"_"===e.object.name[0]?this.astMemberExpressionUnroll(e.property,t):this.astMemberExpressionUnroll(e.object,t)+"."+this.astMemberExpressionUnroll(e.property,t);if(e.hasOwnProperty("expressions")){var n=e.expressions[0];if("Literal"===n.type&&0===n.value&&2===e.expressions.length)return this.astMemberExpressionUnroll(e.expressions[1])}throw this.astErrorOutput("Unknown CallExpression_unroll",e,t)}},{key:"getJsAST",value:function(e){if(this.jsFunctionAST)return this.jsFunctionAST;if(null===(e=e||acorn))throw"Missing JS to AST parser";var t=e.parse("var "+this.functionName+" = "+this.jsFunctionString+";",{locations:!0});if(null===t)throw"Failed to parse JS code";var n=t.body[0].declarations[0].init;return this.jsFunctionAST=n,n}},{key:"getFunctionString",value:function(){return this.generate(),this.functionString}},{key:"setFunctionString",value:function(e){this.functionString=e}},{key:"getParamType",value:function(e){var t=this.paramNames.indexOf(e);if(-1===t)return null;if(!this.parent)return null;if(this.paramTypes[t])return this.paramTypes[t];for(var n=this.parent.calledFunctionsArguments[this.functionName],r=0;r<n.length;r++){var i=n[r];if(null!==i[t])return this.paramTypes[t]=i[t].type}return null}},{key:"getUserParamName",value:function(e){var t=this.paramNames.indexOf(e);if(-1===t)return null;if(!this.parent)return null;for(var n=this.parent.calledFunctionsArguments[this.functionName],r=0;r<n.length;r++){var i=n[r];if(null!==i[t])return i[t].name}return null}},{key:"generate",value:function(e){throw new Error("generate not defined on BaseFunctionNode")}},{key:"astErrorOutput",value:function(e,t,n){return console.error(utils.getAstString(this.jsFunctionString,t)),console.error(e,t,n),e}},{key:"astDebuggerStatement",value:function(e,t,n){return t}}]),BaseFunctionNode}()},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();e.exports=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.nodeMap={},this.nativeFunctions={},this.gpu=t,this.rootKernel=null,this.Node=null}return r(e,[{key:"addNativeFunction",value:function(e,t){this.nativeFunctions[e]=t}},{key:"addFunction",value:function(e,t,n,r,i){this.addFunctionNode(new this.Node(e,t,n,r,i).setAddFunction(this.addFunction.bind(this)))}},{key:"addFunctions",value:function(e,t){if(e)if(Array.isArray(e))for(var n=0;n<e.length;n++)this.addFunction(null,e[n],t);else for(var r in e)this.addFunction(r,e[r],t)}},{key:"addNativeFunctions",value:function(e){for(var t in e)e.hasOwnProperty(t)&&this.addNativeFunction(t,e[t])}},{key:"addFunctionNode",value:function(e){this.nodeMap[e.functionName]=e,e.isRootKernel&&(this.rootKernel=e)}},{key:"traceFunctionCalls",value:function(e,t,n){e=e||"kernel",t=t||[];var r=this.nodeMap[e];if(r){var i=t.indexOf(e);if(-1===i){t.push(e),n&&(r.parent=n),r.getFunctionString();for(var o=0;o<r.calledFunctions.length;++o)this.traceFunctionCalls(r.calledFunctions[o],t,r)}else{var a=t.splice(i,1)[0];t.push(a)}}return this.nativeFunctions[e]&&(t.indexOf(e)>=0||t.push(e)),t}},{key:"addKernel",value:function(e,t,n,r){var i=new this.Node("kernel",e,t,r);return i.setAddFunction(this.addFunction.bind(this)),i.paramNames=n,i.paramTypes=r,i.isRootKernel=!0,this.addFunctionNode(i),i}},{key:"addSubKernel",value:function(e,t,n,r){var i=new this.Node(null,e,t,n,r);return i.setAddFunction(this.addFunction.bind(this)),i.isSubKernel=!0,this.addFunctionNode(i),i}},{key:"getPrototypeString",value:function(e){return this.getPrototypes(e).join("\n")}},{key:"getPrototypes",value:function(e){return this.rootKernel.generate(),e?this.getPrototypesFromFunctionNames(this.traceFunctionCalls(e,[]).reverse()):this.getPrototypesFromFunctionNames(Object.keys(this.nodeMap))}},{key:"getStringFromFunctionNames",value:function(e){for(var t=[],n=0;n<e.length;++n){this.nodeMap[e[n]]&&t.push(this.nodeMap[e[n]].getFunctionString())}return t.join("\n")}},{key:"getPrototypesFromFunctionNames",value:function(e,t){for(var n=[],r=0;r<e.length;++r){var i=e[r],o=this.nodeMap[i];o?n.push(o.getFunctionPrototypeString(t)):this.nativeFunctions[i]&&n.push(this.nativeFunctions[i])}return n}},{key:"getPrototypeStringFromFunctionNames",value:function(e,t){return this.getPrototypesFromFunctionNames(e,t).toString()}},{key:"getString",value:function(e,t){return void 0===t&&(t={}),e?this.getStringFromFunctionNames(this.traceFunctionCalls(e,[],t).reverse(),t):this.getStringFromFunctionNames(Object.keys(this.nodeMap),t)}}]),e}()},function(e,t,n){"use strict";var r=n(1);e.exports=function(e){var t=function(){return e.run.apply(e,arguments)};return r.allPropertiesOf(e).forEach(function(n){"_"===n[0]&&"_"===n[1]||("function"==typeof e[n]?t[n]="add"===n.substring(0,3)||"set"===n.substring(0,3)?function(){return e[n].apply(e,arguments),t}:e[n].bind(e):(t.__defineGetter__(n,function(){return e[n]}),t.__defineSetter__(n,function(t){e[n]=t})))}),t.kernel=e,t}},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=n(27),o=n(7),a=(n(1),n(25));e.exports=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,new a,e));return n.Kernel=o,n.kernel=null,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i),r(t,[{key:"getMode",value:function(){return"gpu"}}]),t}()},function(e,t,n){"use strict";function r(e){return function(){return e}}var i=function(){};i.thatReturns=r,i.thatReturnsFalse=r(!1),i.thatReturnsTrue=r(!0),i.thatReturnsNull=r(null),i.thatReturnsThis=function(){return this},i.thatReturnsArgument=function(e){return e},e.exports=i},function(e,t,n){"use strict";var r=function(e){};e.exports=function(e,t,n,i,o,a,s,u){if(r(t),!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,i,o,a,s,u],h=0;(l=new Error(t.replace(/%s/g,function(){return c[h++]}))).name="Invariant Violation"}throw l.framesToPop=1,l}}},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=n(11),o=n(1);e.exports=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i),r(t,[{key:"generate",value:function(){return this.debug&&console.log(this),this.functionStringArray=this.astGeneric(this.getJsAST(),[],this),this.functionString=this.functionStringArray.join("").trim(),this.functionString}},{key:"getFunctionPrototypeString",value:function(){return this.webGlFunctionPrototypeString?this.webGlFunctionPrototypeString:this.webGlFunctionPrototypeString=this.generate()}},{key:"astGeneric",value:function(e,t,n){if(null===e)throw this.astErrorOutput("NULL ast",e,n);if(Array.isArray(e)){for(var r=0;r<e.length;r++)this.astGeneric(e[r],t,n);return t}switch(e.type){case"FunctionDeclaration":return this.astFunctionDeclaration(e,t,n);case"FunctionExpression":return this.astFunctionExpression(e,t,n);case"ReturnStatement":return this.astReturnStatement(e,t,n);case"Literal":return this.astLiteral(e,t,n);case"BinaryExpression":return this.astBinaryExpression(e,t,n);case"Identifier":return this.astIdentifierExpression(e,t,n);case"AssignmentExpression":return this.astAssignmentExpression(e,t,n);case"ExpressionStatement":return this.astExpressionStatement(e,t,n);case"EmptyStatement":return this.astEmptyStatement(e,t,n);case"BlockStatement":return this.astBlockStatement(e,t,n);case"IfStatement":return this.astIfStatement(e,t,n);case"BreakStatement":return this.astBreakStatement(e,t,n);case"ContinueStatement":return this.astContinueStatement(e,t,n);case"ForStatement":return this.astForStatement(e,t,n);case"WhileStatement":return this.astWhileStatement(e,t,n);case"VariableDeclaration":return this.astVariableDeclaration(e,t,n);case"VariableDeclarator":return this.astVariableDeclarator(e,t,n);case"ThisExpression":return this.astThisExpression(e,t,n);case"SequenceExpression":return this.astSequenceExpression(e,t,n);case"UnaryExpression":return this.astUnaryExpression(e,t,n);case"UpdateExpression":return this.astUpdateExpression(e,t,n);case"LogicalExpression":return this.astLogicalExpression(e,t,n);case"MemberExpression":return this.astMemberExpression(e,t,n);case"CallExpression":return this.astCallExpression(e,t,n);case"ArrayExpression":return this.astArrayExpression(e,t,n);case"DebuggerStatement":return this.astDebuggerStatement(e,t,n)}throw this.astErrorOutput("Unknown ast type : "+e.type,e,n)}},{key:"astFunctionDeclaration",value:function(e,t,n){return this.addFunction&&this.addFunction(null,o.getAstString(this.jsFunctionString,e)),t}},{key:"astFunctionExpression",value:function(e,t,n){if(!n.isRootKernel){t.push("function"),n.kernalAst=e,t.push(" "),t.push(n.functionName),t.push("(");for(var r=0;r<n.paramNames.length;++r){var i=n.paramNames[r];r>0&&t.push(", "),t.push(" "),t.push("user_"),t.push(i)}t.push(") {\n")}for(var o=0;o<e.body.body.length;++o)this.astGeneric(e.body.body[o],t,n),t.push("\n");return n.isRootKernel||t.push("}\n"),t}},{key:"astReturnStatement",value:function(e,t,n){return n.isRootKernel?(t.push("kernelResult = "),this.astGeneric(e.argument,t,n),t.push(";")):n.isSubKernel?(t.push(n.functionName+"Result = "),this.astGeneric(e.argument,t,n),t.push(";"),t.push("return "+n.functionName+"Result;")):(t.push("return "),this.astGeneric(e.argument,t,n),t.push(";")),t}},{key:"astLiteral",value:function(e,t,n){if(isNaN(e.value))throw this.astErrorOutput("Non-numeric literal not supported : "+e.value,e,n);return t.push(e.value),t}},{key:"astBinaryExpression",value:function(e,t,n){return t.push("("),this.astGeneric(e.left,t,n),t.push(e.operator),this.astGeneric(e.right,t,n),t.push(")"),t}},{key:"astIdentifierExpression",value:function(e,t,n){if("Identifier"!==e.type)throw this.astErrorOutput("IdentifierExpression - not an Identifier",e,n);switch(e.name){case"gpu_threadX":t.push("threadId.x");break;case"gpu_threadY":t.push("threadId.y");break;case"gpu_threadZ":t.push("threadId.z");break;case"gpu_outputX":t.push("uOutputDim.x");break;case"gpu_outputY":t.push("uOutputDim.y");break;case"gpu_outputZ":t.push("uOutputDim.z");break;default:if(this.constants&&this.constants.hasOwnProperty(e.name))t.push("constants_"+e.name);else{var r=n.getUserParamName(e.name);null!==r?t.push("user_"+r):t.push("user_"+e.name)}}return t}},{key:"astForStatement",value:function(e,t,n){if("ForStatement"!==e.type)throw this.astErrorOutput("Invalid for statment",e,n);if(e.test&&"BinaryExpression"===e.test.type){if(("Identifier"===e.test.right.type||"Literal"===e.test.right.type)&&"<"===e.test.operator&&!1===this.isIdentifierConstant(e.test.right.name)){if(this.loopMaxIterations||(console.warn("Warning: loopMaxIterations is not set! Using default of 1000 which may result in unintended behavior."),console.warn("Set loopMaxIterations or use a for loop of fixed length to silence this message.")),t.push("for ("),this.astGeneric(e.init,t,n),";"!==t[t.length-1]&&t.push(";"),this.astGeneric(e.test.left,t,n),t.push(e.test.operator),t.push("LOOP_MAX"),t.push(";"),this.astGeneric(e.update,t,n),t.push(")"),t.push("{\n"),t.push("if ("),this.astGeneric(e.test.left,t,n),t.push(e.test.operator),this.astGeneric(e.test.right,t,n),t.push(") {\n"),"BlockStatement"===e.body.type)for(var r=0;r<e.body.body.length;r++)this.astGeneric(e.body.body[r],t,n);else this.astGeneric(e.body,t,n);return t.push("} else {\n"),t.push("break;\n"),t.push("}\n"),t.push("}\n"),t}if(e.init.declarations){var i=JSON.parse(JSON.stringify(e.init.declarations)),o=e.update.argument;if(!Array.isArray(i)||i.length<1)throw console.log(this.jsFunctionString),new Error("Error: Incompatible for loop declaration");if(i.length>1){for(var a=null,s=0;s<i.length;s++){var u=i[s];u.id.name===o.name?(a=u,i.splice(s,1)):(t.push("var "),this.astGeneric(u,t,n),t.push(";"))}t.push("for (let "),this.astGeneric(a,t,n),t.push(";")}else t.push("for ("),this.astGeneric(e.init,t,n);return this.astGeneric(e.test,t,n),t.push(";"),this.astGeneric(e.update,t,n),t.push(")"),this.astGeneric(e.body,t,n),t}}throw this.astErrorOutput("Invalid for statement",e,n)}},{key:"astWhileStatement",value:function(e,t,n){if("WhileStatement"!==e.type)throw this.astErrorOutput("Invalid while statment",e,n);return t.push("for (let i = 0; i < LOOP_MAX; i++) {"),t.push("if ("),this.astGeneric(e.test,t,n),t.push(") {\n"),this.astGeneric(e.body,t,n),t.push("} else {\n"),t.push("break;\n"),t.push("}\n"),t.push("}\n"),t}},{key:"astAssignmentExpression",value:function(e,t,n){return this.astGeneric(e.left,t,n),t.push(e.operator),this.astGeneric(e.right,t,n),t}},{key:"astEmptyStatement",value:function(e,t,n){return t}},{key:"astBlockStatement",value:function(e,t,n){t.push("{\n");for(var r=0;r<e.body.length;r++)this.astGeneric(e.body[r],t,n);return t.push("}\n"),t}},{key:"astExpressionStatement",value:function(e,t,n){return this.astGeneric(e.expression,t,n),t.push(";\n"),t}},{key:"astVariableDeclaration",value:function(e,t,n){t.push("var ");for(var r=0;r<e.declarations.length;r++)r>0&&t.push(","),this.astGeneric(e.declarations[r],t,n);return t.push(";"),t}},{key:"astVariableDeclarator",value:function(e,t,n){return this.astGeneric(e.id,t,n),null!==e.init&&(t.push("="),this.astGeneric(e.init,t,n)),t}},{key:"astIfStatement",value:function(e,t,n){return t.push("if ("),this.astGeneric(e.test,t,n),t.push(")"),"BlockStatement"===e.consequent.type?this.astGeneric(e.consequent,t,n):(t.push(" {\n"),this.astGeneric(e.consequent,t,n),t.push("\n}\n")),e.alternate&&(t.push("else "),"BlockStatement"===e.alternate.type?this.astGeneric(e.alternate,t,n):(t.push(" {\n"),this.astGeneric(e.alternate,t,n),t.push("\n}\n"))),t}},{key:"astBreakStatement",value:function(e,t,n){return t.push("break;\n"),t}},{key:"astContinueStatement",value:function(e,t,n){return t.push("continue;\n"),t}},{key:"astLogicalExpression",value:function(e,t,n){return t.push("("),this.astGeneric(e.left,t,n),t.push(e.operator),this.astGeneric(e.right,t,n),t.push(")"),t}},{key:"astUpdateExpression",value:function(e,t,n){return e.prefix?(t.push(e.operator),this.astGeneric(e.argument,t,n)):(this.astGeneric(e.argument,t,n),t.push(e.operator)),t}},{key:"astUnaryExpression",value:function(e,t,n){return e.prefix?(t.push(e.operator),this.astGeneric(e.argument,t,n)):(this.astGeneric(e.argument,t,n),t.push(e.operator)),t}},{key:"astThisExpression",value:function(e,t,n){return t.push("_this"),t}},{key:"astMemberExpression",value:function(e,t,n){if(e.computed)if("Identifier"===e.object.type)this.astGeneric(e.object,t,n),t.push("["),this.astGeneric(e.property,t,n),t.push("]");else{this.astGeneric(e.object,t,n);var r=t.pop();t.push("]["),this.astGeneric(e.property,t,n),t.push(r)}else{var i=this.astMemberExpressionUnroll(e);switch("Identifier"===e.property.type&&e.computed&&(i="user_"+i),0===i.indexOf("this")&&(i="_"+i),i){case"_this.output.x":t.push(this.output[0]);break;case"_this.output.y":t.push(this.output[1]);break;case"_this.output.z":t.push(this.output[2]);break;default:t.push(i)}}return t}},{key:"astSequenceExpression",value:function(e,t,n){for(var r=0;r<e.expressions.length;r++)r>0&&t.push(","),this.astGeneric(e.expressions,t,n);return t}},{key:"astCallExpression",value:function(e,t,n){if(e.callee){var r=this.astMemberExpressionUnroll(e.callee);n.calledFunctions.indexOf(r)<0&&n.calledFunctions.push(r),n.hasOwnProperty("funcName")||(n.calledFunctionsArguments[r]=[]);var i=[];n.calledFunctionsArguments[r].push(i),t.push(r),t.push("(");for(var o=0;o<e.arguments.length;++o){var a=e.arguments[o];if(o>0&&t.push(", "),this.astGeneric(a,t,n),"Identifier"===a.type){var s=n.paramNames.indexOf(a.name);-1===s?i.push(null):i.push({name:a.name,type:n.paramTypes[s]})}else i.push(null)}return t.push(")"),t}throw this.astErrorOutput("Unknown CallExpression",e,n)}},{key:"astArrayExpression",value:function(e,t,n){var r=e.elements.length;t.push("new Float32Array(");for(var i=0;i<r;++i){i>0&&t.push(", ");var o=e.elements[i];this.astGeneric(o,t,n)}return t.push(")"),t}},{key:"astDebuggerStatement",value:function(e,t,n){return t.push("debugger;"),t}}],[{key:"astFunctionPrototype",value:function(e,t,n){if(n.isRootKernel||n.isSubKernel)return t;t.push(n.returnType),t.push(" "),t.push(n.functionName),t.push("(");for(var r=0;r<n.paramNames.length;++r)r>0&&t.push(", "),t.push(n.paramTypes[r]),t.push(" "),t.push("user_"),t.push(n.paramNames[r]);return t.push(");\n"),t}}]),t}()},function(e,t,n){"use strict";var r=n(12),i=n(17);e.exports=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e.Node=i,e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r),t}()},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=n(26),o=n(1),a=n(39);e.exports=function(e){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return r._fnBody=o.getFunctionBodyFromString(e),r._fn=null,r.run=null,r._canvasCtx=null,r._imageData=null,r._colorData=null,r._kernelString=null,r.thread={x:0,y:0,z:0},r.run=function(){return this.run=null,this.build.apply(this,arguments),this.run.apply(this,arguments)}.bind(r),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i),r(t,[{key:"validateOptions",value:function(){if(!this.output||0===this.output.length){if(1!==arguments.length)throw"Auto dimensions only supported for kernels with only one input";var e=o.getArgumentType(arguments[0]);if("Array"===e)this.output=o.getDimensions(e);else{if("Texture"!==e)throw"Auto dimensions not supported for input type: "+e;this.output=arguments[0].output}}}},{key:"build",value:function(){this.setupParams(arguments);for(var e=this.threadDim=o.clone(this.output);e.length<3;)e.push(1);if(this.graphical){var t=this.getCanvas();t.width=e[0],t.height=e[1],this._canvasCtx=t.getContext("2d"),this._imageData=this._canvasCtx.createImageData(e[0],e[1]),this._colorData=new Uint8ClampedArray(e[0]*e[1]*4)}var n=this.getKernelString();this.debug&&(console.log("Options:"),console.dir(this),console.log("Function output:"),console.log(n)),this.kernelString=n,this.run=new Function([],n).bind(this)()}},{key:"color",value:function(e,t,n,r){void 0===r&&(r=1),e=Math.floor(255*e),t=Math.floor(255*t),n=Math.floor(255*n),r=Math.floor(255*r);var i=this.output[0],o=this.output[1],a=this.thread.x+(o-this.thread.y-1)*i;this._colorData[4*a+0]=e,this._colorData[4*a+1]=t,this._colorData[4*a+2]=n,this._colorData[4*a+3]=r}},{key:"getKernelString",value:function(){var e=this;if(null!==this._kernelString)return this._kernelString;for(var t=this.functionBuilder,n=this.threadDim||(this.threadDim=o.clone(this.output));n.length<3;)n.push(1);if(t.addKernel(this.fnString,{prototypeOnly:!1,constants:this.constants,output:this.output,debug:this.debug,loopMaxIterations:this.loopMaxIterations},this.paramNames,this.paramTypes),t.addFunctions(this.functions,{constants:this.constants,output:this.output}),null!==this.subKernels){this.subKernelOutputTextures=[],this.subKernelOutputVariableNames=[];for(var r=0;r<this.subKernels.length;r++){var i=this.subKernels[r];t.addSubKernel(i,{prototypeOnly:!1,constants:this.constants,output:this.output,debug:this.debug,loopMaxIterations:this.loopMaxIterations}),this.subKernelOutputVariableNames.push(i.name+"Result")}}else if(null!==this.subKernelProperties){this.subKernelOutputVariableNames=[];for(var a in this.subKernelProperties)if(this.subKernelProperties.hasOwnProperty(a)){var s=this.subKernelProperties[a];t.addSubKernel(s),this.subKernelOutputVariableNames.push(s.name+"Result"),0}}var u=t.getPrototypes(),l=null;return u.length>1?u=u.filter(function(e){return/^function/.test(e)?e:(l=e,!1)}):l=u.shift(),this._kernelString="\n\t\tvar LOOP_MAX = "+this._getLoopMaxString()+";\n\t\tvar _this = this;\n  "+(null===this.subKernelOutputVariableNames?"":this.subKernelOutputVariableNames.map(function(e){return"  var "+e+" = null;\n"}).join(""))+"\n    return function ("+this.paramNames.map(function(e){return"user_"+e}).join(", ")+") {\n    var ret = new Array("+n[2]+");\n  "+(null===this.subKernelOutputVariableNames?"":this.subKernelOutputVariableNames.map(function(e){return"  "+e+"Z = new Array("+n[2]+");\n"}).join(""))+"\n    for (this.thread.z = 0; this.thread.z < "+n[2]+"; this.thread.z++) {\n      ret[this.thread.z] = new Array("+n[1]+");\n  "+(null===this.subKernelOutputVariableNames?"":this.subKernelOutputVariableNames.map(function(e){return"    "+e+"Z[this.thread.z] = new Array("+n[1]+");\n"}).join(""))+"\n      for (this.thread.y = 0; this.thread.y < "+n[1]+"; this.thread.y++) {\n        ret[this.thread.z][this.thread.y] = new Array("+n[0]+");\n  "+(null===this.subKernelOutputVariableNames?"":this.subKernelOutputVariableNames.map(function(e){return"      "+e+"Z[this.thread.z][this.thread.y] = new Array("+n[0]+");\n"}).join(""))+"\n        for (this.thread.x = 0; this.thread.x < "+n[0]+"; this.thread.x++) {\n          var kernelResult;\n          "+l+"\n          ret[this.thread.z][this.thread.y][this.thread.x] = kernelResult;\n"+(null===this.subKernelOutputVariableNames?"":this.subKernelOutputVariableNames.map(function(e){return"        "+e+"Z[this.thread.z][this.thread.y][this.thread.x] = "+e+";\n"}).join(""))+"\n          }\n        }\n      }\n      \n      if (this.graphical) {\n        this._imageData.data.set(this._colorData);\n        this._canvasCtx.putImageData(this._imageData, 0, 0);\n        return;\n      }\n      \n      if (this.output.length === 1) {\n        ret = ret[0][0];\n"+(null===this.subKernelOutputVariableNames?"":this.subKernelOutputVariableNames.map(function(e){return"    "+e+" = "+e+"Z[0][0];\n"}).join(""))+"\n      \n    } else if (this.output.length === 2) {\n      ret = ret[0];\n      "+(null===this.subKernelOutputVariableNames?"":this.subKernelOutputVariableNames.map(function(e){return"    "+e+" = "+e+"Z[0];\n"}).join(""))+"\n    }\n    \n    "+(null===this.subKernelOutputVariableNames?"return ret;\n":null!==this.subKernels?"var result = [\n        "+this.subKernelOutputVariableNames.map(function(e){return""+e}).join(",\n")+"\n      ];\n      result.result = ret;\n      return result;\n":"return {\n        result: ret,\n        "+Object.keys(this.subKernelProperties).map(function(t,n){return t+": "+e.subKernelOutputVariableNames[n]}).join(",\n")+"\n      };")+"\n    "+(u.length>0?u.join("\n"):"")+"\n    }.bind(this);"}},{key:"toString",value:function(){return a(this)}},{key:"precompileKernelObj",value:function(e){return{threadDim:this.threadDim||(this.threadDim=o.clone(this.output))}}},{key:"_getLoopMaxString",value:function(){return this.loopMaxIterations?" "+parseInt(this.loopMaxIterations)+";\n":" 1000;\n"}}],[{key:"compileKernel",value:function(e){for(var t=e.threadDim;t.length<3;)t.push(1)}}]),t}()},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();n(1);var i=n(27),o=n(19),a=n(18);e.exports=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,new a,e));return n.Kernel=o,n.kernel=null,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i),r(t,[{key:"getMode",value:function(){return"cpu"}}]),t}()},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=n(11),o=n(1),a=/decode32\(\s+encode32\(/g,s=/encode32\(\s+decode32\(/g;e.exports=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i),r(t,[{key:"generate",value:function(){return this.debug&&console.log(this),this.prototypeOnly?t.astFunctionPrototype(this.getJsAST(),[],this).join("").trim():(this.functionStringArray=this.astGeneric(this.getJsAST(),[],this),this.functionString=this.functionStringArray.join("").trim().replace(a,"((").replace(s,"(("),this.functionString)}},{key:"astGeneric",value:function(e,t,n){if(null===e)throw this.astErrorOutput("NULL ast",e,n);if(Array.isArray(e)){for(var r=0;r<e.length;r++)this.astGeneric(e[r],t,n);return t}switch(e.type){case"FunctionDeclaration":return this.astFunctionDeclaration(e,t,n);case"FunctionExpression":return this.astFunctionExpression(e,t,n);case"ReturnStatement":return this.astReturnStatement(e,t,n);case"Literal":return this.astLiteral(e,t,n);case"BinaryExpression":return this.astBinaryExpression(e,t,n);case"Identifier":return this.astIdentifierExpression(e,t,n);case"AssignmentExpression":return this.astAssignmentExpression(e,t,n);case"ExpressionStatement":return this.astExpressionStatement(e,t,n);case"EmptyStatement":return this.astEmptyStatement(e,t,n);case"BlockStatement":return this.astBlockStatement(e,t,n);case"IfStatement":return this.astIfStatement(e,t,n);case"BreakStatement":return this.astBreakStatement(e,t,n);case"ContinueStatement":return this.astContinueStatement(e,t,n);case"ForStatement":return this.astForStatement(e,t,n);case"WhileStatement":return this.astWhileStatement(e,t,n);case"VariableDeclaration":return this.astVariableDeclaration(e,t,n);case"VariableDeclarator":return this.astVariableDeclarator(e,t,n);case"ThisExpression":return this.astThisExpression(e,t,n);case"SequenceExpression":return this.astSequenceExpression(e,t,n);case"UnaryExpression":return this.astUnaryExpression(e,t,n);case"UpdateExpression":return this.astUpdateExpression(e,t,n);case"LogicalExpression":return this.astLogicalExpression(e,t,n);case"MemberExpression":return this.astMemberExpression(e,t,n);case"CallExpression":return this.astCallExpression(e,t,n);case"ArrayExpression":return this.astArrayExpression(e,t,n);case"DebuggerStatement":return this.astDebuggerStatement(e,t,n)}throw this.astErrorOutput("Unknown ast type : "+e.type,e,n)}},{key:"astFunctionDeclaration",value:function(e,t,n){return this.addFunction&&this.addFunction(null,o.getAstString(this.jsFunctionString,e)),t}},{key:"astFunctionExpression",value:function(e,t,n){if(n.isRootKernel?(t.push("void"),n.kernalAst=e):t.push(n.returnType),t.push(" "),t.push(n.functionName),t.push("("),!n.isRootKernel)for(var r=0;r<n.paramNames.length;++r){var i=n.paramNames[r];switch(r>0&&t.push(", "),n.getParamType(i)){case"Texture":case"Input":case"Array":t.push("sampler2D");break;default:t.push("float")}t.push(" "),t.push("user_"),t.push(i)}t.push(") {\n");for(var o=0;o<e.body.body.length;++o)this.astGeneric(e.body.body[o],t,n),t.push("\n");return t.push("}\n"),t}},{key:"astReturnStatement",value:function(e,t,n){return n.isRootKernel?(t.push("kernelResult = "),this.astGeneric(e.argument,t,n),t.push(";"),t.push("return;")):n.isSubKernel?(t.push(n.functionName+"Result = "),this.astGeneric(e.argument,t,n),t.push(";"),t.push("return "+n.functionName+"Result;")):(t.push("return "),this.astGeneric(e.argument,t,n),t.push(";")),t}},{key:"astLiteral",value:function(e,t,n){if(isNaN(e.value))throw this.astErrorOutput("Non-numeric literal not supported : "+e.value,e,n);return t.push(e.value),Number.isInteger(e.value)&&t.push(".0"),t}},{key:"astBinaryExpression",value:function(e,t,n){return t.push("("),"%"===e.operator?(t.push("mod("),this.astGeneric(e.left,t,n),t.push(","),this.astGeneric(e.right,t,n),t.push(")")):"==="===e.operator?(this.astGeneric(e.left,t,n),t.push("=="),this.astGeneric(e.right,t,n)):"!=="===e.operator?(this.astGeneric(e.left,t,n),t.push("!="),this.astGeneric(e.right,t,n)):(this.astGeneric(e.left,t,n),t.push(e.operator),this.astGeneric(e.right,t,n)),t.push(")"),t}},{key:"astIdentifierExpression",value:function(e,t,n){if("Identifier"!==e.type)throw this.astErrorOutput("IdentifierExpression - not an Identifier",e,n);switch(e.name){case"gpu_threadX":t.push("threadId.x");break;case"gpu_threadY":t.push("threadId.y");break;case"gpu_threadZ":t.push("threadId.z");break;case"gpu_outputX":t.push("uOutputDim.x");break;case"gpu_outputY":t.push("uOutputDim.y");break;case"gpu_outputZ":t.push("uOutputDim.z");break;default:if(this.constants&&this.constants.hasOwnProperty(e.name))t.push("constants_"+e.name);else{var r=n.getUserParamName(e.name);null!==r?t.push("user_"+r):t.push("user_"+e.name)}}return t}},{key:"astForStatement",value:function(e,t,n){if("ForStatement"!==e.type)throw this.astErrorOutput("Invalid for statment",e,n);if(e.test&&"BinaryExpression"===e.test.type){if("Identifier"===e.test.right.type&&"<"===e.test.operator&&!1===this.isIdentifierConstant(e.test.right.name)){if(this.loopMaxIterations||(console.warn("Warning: loopMaxIterations is not set! Using default of 1000 which may result in unintended behavior."),console.warn("Set loopMaxIterations or use a for loop of fixed length to silence this message.")),t.push("for ("),this.astGeneric(e.init,t,n),this.astGeneric(e.test.left,t,n),t.push(e.test.operator),t.push("LOOP_MAX"),t.push(";"),this.astGeneric(e.update,t,n),t.push(")"),t.push("{\n"),t.push("if ("),this.astGeneric(e.test.left,t,n),t.push(e.test.operator),this.astGeneric(e.test.right,t,n),t.push(") {\n"),"BlockStatement"===e.body.type)for(var r=0;r<e.body.body.length;r++)this.astGeneric(e.body.body[r],t,n);else this.astGeneric(e.body,t,n);return t.push("} else {\n"),t.push("break;\n"),t.push("}\n"),t.push("}\n"),t}var i=JSON.parse(JSON.stringify(e.init.declarations)),o=e.update.argument;if(!Array.isArray(i)||i.length<1)throw console.log(this.jsFunctionString),new Error("Error: Incompatible for loop declaration");if(i.length>1){for(var a=null,s=0;s<i.length;s++){var u=i[s];u.id.name===o.name?(a=u,i.splice(s,1)):(t.push("float "),this.astGeneric(u,t,n),t.push(";"))}t.push("for (float "),this.astGeneric(a,t,n),t.push(";")}else t.push("for ("),this.astGeneric(e.init,t,n);return this.astGeneric(e.test,t,n),t.push(";"),this.astGeneric(e.update,t,n),t.push(")"),this.astGeneric(e.body,t,n),t}throw this.astErrorOutput("Invalid for statement",e,n)}},{key:"astWhileStatement",value:function(e,t,n){if("WhileStatement"!==e.type)throw this.astErrorOutput("Invalid while statment",e,n);return t.push("for (float i = 0.0; i < LOOP_MAX; i++) {"),t.push("if ("),this.astGeneric(e.test,t,n),t.push(") {\n"),this.astGeneric(e.body,t,n),t.push("} else {\n"),t.push("break;\n"),t.push("}\n"),t.push("}\n"),t}},{key:"astAssignmentExpression",value:function(e,t,n){if("%="!==e.operator)return this.astGeneric(e.left,t,n),t.push(e.operator),this.astGeneric(e.right,t,n),t;this.astGeneric(e.left,t,n),t.push("="),t.push("mod("),this.astGeneric(e.left,t,n),t.push(","),this.astGeneric(e.right,t,n),t.push(")")}},{key:"astEmptyStatement",value:function(e,t,n){return t}},{key:"astBlockStatement",value:function(e,t,n){t.push("{\n");for(var r=0;r<e.body.length;r++)this.astGeneric(e.body[r],t,n);return t.push("}\n"),t}},{key:"astExpressionStatement",value:function(e,t,n){return this.astGeneric(e.expression,t,n),t.push(";\n"),t}},{key:"astVariableDeclaration",value:function(e,t,n){t.push("float ");for(var r=0;r<e.declarations.length;r++)r>0&&t.push(","),this.astGeneric(e.declarations[r],t,n);return t.push(";"),t}},{key:"astVariableDeclarator",value:function(e,t,n){return this.astGeneric(e.id,t,n),null!==e.init&&(t.push("="),this.astGeneric(e.init,t,n)),t}},{key:"astIfStatement",value:function(e,t,n){return t.push("if ("),this.astGeneric(e.test,t,n),t.push(")"),"BlockStatement"===e.consequent.type?this.astGeneric(e.consequent,t,n):(t.push(" {\n"),this.astGeneric(e.consequent,t,n),t.push("\n}\n")),e.alternate&&(t.push("else "),"BlockStatement"===e.alternate.type?this.astGeneric(e.alternate,t,n):(t.push(" {\n"),this.astGeneric(e.alternate,t,n),t.push("\n}\n"))),t}},{key:"astBreakStatement",value:function(e,t,n){return t.push("break;\n"),t}},{key:"astContinueStatement",value:function(e,t,n){return t.push("continue;\n"),t}},{key:"astLogicalExpression",value:function(e,t,n){return t.push("("),this.astGeneric(e.left,t,n),t.push(e.operator),this.astGeneric(e.right,t,n),t.push(")"),t}},{key:"astUpdateExpression",value:function(e,t,n){return e.prefix?(t.push(e.operator),this.astGeneric(e.argument,t,n)):(this.astGeneric(e.argument,t,n),t.push(e.operator)),t}},{key:"astUnaryExpression",value:function(e,t,n){return e.prefix?(t.push(e.operator),this.astGeneric(e.argument,t,n)):(this.astGeneric(e.argument,t,n),t.push(e.operator)),t}},{key:"astThisExpression",value:function(e,t,n){return t.push("this"),t}},{key:"astMemberExpression",value:function(e,t,n){if(e.computed)if("Identifier"===e.object.type){var r=e.object.name,i=(n.functionName,!1);if(n.paramNames){var o=n.paramNames.indexOf(r);o>=0&&"float"===n.paramTypes[o]&&(i=!0)}i?(this.astGeneric(e.object,t,n),t.push("[int("),this.astGeneric(e.property,t,n),t.push(")]")):(t.push("get("),this.astGeneric(e.object,t,n),t.push(", vec2("),this.astGeneric(e.object,t,n),t.push("Size[0],"),this.astGeneric(e.object,t,n),t.push("Size[1]), vec3("),this.astGeneric(e.object,t,n),t.push("Dim[0],"),this.astGeneric(e.object,t,n),t.push("Dim[1],"),this.astGeneric(e.object,t,n),t.push("Dim[2]"),t.push("), "),this.astGeneric(e.property,t,n),t.push(")"))}else{this.astGeneric(e.object,t,n);var a=t.pop();t.push(","),this.astGeneric(e.property,t,n),t.push(a)}else{var s=this.astMemberExpressionUnroll(e),u=s.toLowerCase();switch(0===s.indexOf("this.constants.")&&(s="constants_"+s.slice("this.constants.".length)),u){case"this.thread.x":t.push("threadId.x");break;case"this.thread.y":t.push("threadId.y");break;case"this.thread.z":t.push("threadId.z");break;case"this.output.x":t.push(this.output[0]+".0");break;case"this.output.y":t.push(this.output[1]+".0");break;case"this.output.z":t.push(this.output[2]+".0");break;default:t.push(s)}}return t}},{key:"astSequenceExpression",value:function(e,t,n){for(var r=0;r<e.expressions.length;r++)r>0&&t.push(","),this.astGeneric(e.expressions,t,n);return t}},{key:"astCallExpression",value:function(e,t,n){if(e.callee){var r=this.astMemberExpressionUnroll(e.callee);0===r.indexOf("Math.")&&(r=r.slice("Math.".length)),0===r.indexOf("this.")&&(r=r.slice("this.".length)),"atan2"===r&&(r="atan"),n.calledFunctions.indexOf(r)<0&&n.calledFunctions.push(r),n.hasOwnProperty("funcName")||(n.calledFunctionsArguments[r]=[]);var i=[];n.calledFunctionsArguments[r].push(i),t.push(r),t.push("(");for(var o=0;o<e.arguments.length;++o){var a=e.arguments[o];if(o>0&&t.push(", "),this.astGeneric(a,t,n),"Identifier"===a.type){var s=n.paramNames.indexOf(a.name);-1===s?i.push(null):i.push({name:a.name,type:n.paramTypes[s]})}else i.push(null)}return t.push(")"),t}throw this.astErrorOutput("Unknown CallExpression",e,n)}},{key:"astArrayExpression",value:function(e,t,n){var r=e.elements.length;t.push("float["+r+"](");for(var i=0;i<r;++i){i>0&&t.push(", ");var o=e.elements[i];this.astGeneric(o,t,n)}return t.push(")"),t}},{key:"getFunctionPrototypeString",value:function(){return this.webGlFunctionPrototypeString?this.webGlFunctionPrototypeString:this.webGlFunctionPrototypeString=this.generate()}},{key:"build",value:function(){return this.getFunctionPrototypeString().length>0}}],[{key:"astFunctionPrototype",value:function(e,t,n){if(n.isRootKernel||n.isSubKernel)return t;t.push(n.returnType),t.push(" "),t.push(n.functionName),t.push("(");for(var r=0;r<n.paramNames.length;++r)r>0&&t.push(", "),t.push(n.paramTypes[r]),t.push(" "),t.push("user_"),t.push(n.paramNames[r]);return t.push(");\n"),t}}]),t}()},function(e,t,n){"use strict";var r=n(12),i=n(21);e.exports=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e.Node=i,e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r),t}()},function(e,t,n){"use strict";var r=n(14),i=n(22),o=n(10);e.exports=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,new i,e));return n.Kernel=o,n.kernel=null,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r),t}()},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=n(11),o=n(1),a=/decode32\(\s+encode32\(/g,s=/encode32\(\s+decode32\(/g;e.exports=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i),r(t,[{key:"generate",value:function(){return this.debug&&console.log(this),this.prototypeOnly?t.astFunctionPrototype(this.getJsAST(),[],this).join("").trim():(this.functionStringArray=this.astGeneric(this.getJsAST(),[],this),this.functionString=this.functionStringArray.join("").trim().replace(a,"((").replace(s,"(("),this.functionString)}},{key:"astGeneric",value:function(e,t,n){if(null===e)throw this.astErrorOutput("NULL ast",e,n);if(Array.isArray(e)){for(var r=0;r<e.length;r++)this.astGeneric(e[r],t,n);return t}switch(e.type){case"FunctionDeclaration":return this.astFunctionDeclaration(e,t,n);case"FunctionExpression":return this.astFunctionExpression(e,t,n);case"ReturnStatement":return this.astReturnStatement(e,t,n);case"Literal":return this.astLiteral(e,t,n);case"BinaryExpression":return this.astBinaryExpression(e,t,n);case"Identifier":return this.astIdentifierExpression(e,t,n);case"AssignmentExpression":return this.astAssignmentExpression(e,t,n);case"ExpressionStatement":return this.astExpressionStatement(e,t,n);case"EmptyStatement":return this.astEmptyStatement(e,t,n);case"BlockStatement":return this.astBlockStatement(e,t,n);case"IfStatement":return this.astIfStatement(e,t,n);case"BreakStatement":return this.astBreakStatement(e,t,n);case"ContinueStatement":return this.astContinueStatement(e,t,n);case"ForStatement":return this.astForStatement(e,t,n);case"WhileStatement":return this.astWhileStatement(e,t,n);case"VariableDeclaration":return this.astVariableDeclaration(e,t,n);case"VariableDeclarator":return this.astVariableDeclarator(e,t,n);case"ThisExpression":return this.astThisExpression(e,t,n);case"SequenceExpression":return this.astSequenceExpression(e,t,n);case"UnaryExpression":return this.astUnaryExpression(e,t,n);case"UpdateExpression":return this.astUpdateExpression(e,t,n);case"LogicalExpression":return this.astLogicalExpression(e,t,n);case"MemberExpression":return this.astMemberExpression(e,t,n);case"CallExpression":return this.astCallExpression(e,t,n);case"ArrayExpression":return this.astArrayExpression(e,t,n);case"DebuggerStatement":return this.astDebuggerStatement(e,t,n)}throw this.astErrorOutput("Unknown ast type : "+e.type,e,n)}},{key:"astFunctionDeclaration",value:function(e,t,n){return this.addFunction&&this.addFunction(null,o.getAstString(this.jsFunctionString,e)),t}},{key:"astFunctionExpression",value:function(e,t,n){if(n.isRootKernel?(t.push("void"),n.kernalAst=e):t.push(n.returnType),t.push(" "),t.push(n.functionName),t.push("("),!n.isRootKernel)for(var r=0;r<n.paramNames.length;++r){var i=n.paramNames[r];switch(r>0&&t.push(", "),n.getParamType(i)){case"Texture":case"Input":case"Array":t.push("sampler2D");break;default:t.push("float")}t.push(" "),t.push("user_"),t.push(i)}t.push(") {\n");for(var o=0;o<e.body.body.length;++o)this.astGeneric(e.body.body[o],t,n),t.push("\n");return t.push("}\n"),t}},{key:"astReturnStatement",value:function(e,t,n){return n.isRootKernel?(t.push("kernelResult = "),this.astGeneric(e.argument,t,n),t.push(";"),t.push("return;")):n.isSubKernel?(t.push(n.functionName+"Result = "),this.astGeneric(e.argument,t,n),t.push(";"),t.push("return "+n.functionName+"Result;")):(t.push("return "),this.astGeneric(e.argument,t,n),t.push(";")),t}},{key:"astLiteral",value:function(e,t,n){if(isNaN(e.value))throw this.astErrorOutput("Non-numeric literal not supported : "+e.value,e,n);return t.push(e.value),Number.isInteger(e.value)&&t.push(".0"),t}},{key:"astBinaryExpression",value:function(e,t,n){return t.push("("),"%"===e.operator?(t.push("mod("),this.astGeneric(e.left,t,n),t.push(","),this.astGeneric(e.right,t,n),t.push(")")):"==="===e.operator?(this.astGeneric(e.left,t,n),t.push("=="),this.astGeneric(e.right,t,n)):"!=="===e.operator?(this.astGeneric(e.left,t,n),t.push("!="),this.astGeneric(e.right,t,n)):(this.astGeneric(e.left,t,n),t.push(e.operator),this.astGeneric(e.right,t,n)),t.push(")"),t}},{key:"astIdentifierExpression",value:function(e,t,n){if("Identifier"!==e.type)throw this.astErrorOutput("IdentifierExpression - not an Identifier",e,n);switch(e.name){case"gpu_threadX":t.push("threadId.x");break;case"gpu_threadY":t.push("threadId.y");break;case"gpu_threadZ":t.push("threadId.z");break;case"gpu_outputX":t.push("uOutputDim.x");break;case"gpu_outputY":t.push("uOutputDim.y");break;case"gpu_outputZ":t.push("uOutputDim.z");break;default:if(this.constants&&this.constants.hasOwnProperty(e.name))t.push("constants_"+e.name);else{var r=n.getUserParamName(e.name);null!==r?t.push("user_"+r):t.push("user_"+e.name)}}return t}},{key:"astForStatement",value:function(e,t,n){if("ForStatement"!==e.type)throw this.astErrorOutput("Invalid for statment",e,n);if(e.test&&"BinaryExpression"===e.test.type){if("Identifier"===e.test.right.type&&"<"===e.test.operator&&!1===this.isIdentifierConstant(e.test.right.name)){if(this.loopMaxIterations||(console.warn("Warning: loopMaxIterations is not set! Using default of 1000 which may result in unintended behavior."),console.warn("Set loopMaxIterations or use a for loop of fixed length to silence this message.")),t.push("for ("),this.astGeneric(e.init,t,n),this.astGeneric(e.test.left,t,n),t.push(e.test.operator),t.push("LOOP_MAX"),t.push(";"),this.astGeneric(e.update,t,n),t.push(")"),t.push("{\n"),t.push("if ("),this.astGeneric(e.test.left,t,n),t.push(e.test.operator),this.astGeneric(e.test.right,t,n),t.push(") {\n"),"BlockStatement"===e.body.type)for(var r=0;r<e.body.body.length;r++)this.astGeneric(e.body.body[r],t,n);else this.astGeneric(e.body,t,n);return t.push("} else {\n"),t.push("break;\n"),t.push("}\n"),t.push("}\n"),t}var i=JSON.parse(JSON.stringify(e.init.declarations)),o=e.update.argument;if(!Array.isArray(i)||i.length<1)throw console.log(this.jsFunctionString),new Error("Error: Incompatible for loop declaration");if(i.length>1){for(var a=null,s=0;s<i.length;s++){var u=i[s];u.id.name===o.name?(a=u,i.splice(s,1)):(t.push("float "),this.astGeneric(u,t,n),t.push(";"))}t.push("for (float "),this.astGeneric(a,t,n),t.push(";")}else t.push("for ("),this.astGeneric(e.init,t,n);return this.astGeneric(e.test,t,n),t.push(";"),this.astGeneric(e.update,t,n),t.push(")"),this.astGeneric(e.body,t,n),t}throw this.astErrorOutput("Invalid for statement",e,n)}},{key:"astWhileStatement",value:function(e,t,n){if("WhileStatement"!==e.type)throw this.astErrorOutput("Invalid while statment",e,n);return t.push("for (float i = 0.0; i < LOOP_MAX; i++) {"),t.push("if ("),this.astGeneric(e.test,t,n),t.push(") {\n"),this.astGeneric(e.body,t,n),t.push("} else {\n"),t.push("break;\n"),t.push("}\n"),t.push("}\n"),t}},{key:"astAssignmentExpression",value:function(e,t,n){if("%="!==e.operator)return this.astGeneric(e.left,t,n),t.push(e.operator),this.astGeneric(e.right,t,n),t;this.astGeneric(e.left,t,n),t.push("="),t.push("mod("),this.astGeneric(e.left,t,n),t.push(","),this.astGeneric(e.right,t,n),t.push(")")}},{key:"astEmptyStatement",value:function(e,t,n){return t}},{key:"astBlockStatement",value:function(e,t,n){t.push("{\n");for(var r=0;r<e.body.length;r++)this.astGeneric(e.body[r],t,n);return t.push("}\n"),t}},{key:"astExpressionStatement",value:function(e,t,n){return this.astGeneric(e.expression,t,n),t.push(";\n"),t}},{key:"astVariableDeclaration",value:function(e,t,n){t.push("float ");for(var r=0;r<e.declarations.length;r++)r>0&&t.push(","),this.astGeneric(e.declarations[r],t,n);return t.push(";"),t}},{key:"astVariableDeclarator",value:function(e,t,n){return this.astGeneric(e.id,t,n),null!==e.init&&(t.push("="),this.astGeneric(e.init,t,n)),t}},{key:"astIfStatement",value:function(e,t,n){return t.push("if ("),this.astGeneric(e.test,t,n),t.push(")"),"BlockStatement"===e.consequent.type?this.astGeneric(e.consequent,t,n):(t.push(" {\n"),this.astGeneric(e.consequent,t,n),t.push("\n}\n")),e.alternate&&(t.push("else "),"BlockStatement"===e.alternate.type?this.astGeneric(e.alternate,t,n):(t.push(" {\n"),this.astGeneric(e.alternate,t,n),t.push("\n}\n"))),t}},{key:"astBreakStatement",value:function(e,t,n){return t.push("break;\n"),t}},{key:"astContinueStatement",value:function(e,t,n){return t.push("continue;\n"),t}},{key:"astLogicalExpression",value:function(e,t,n){return t.push("("),this.astGeneric(e.left,t,n),t.push(e.operator),this.astGeneric(e.right,t,n),t.push(")"),t}},{key:"astUpdateExpression",value:function(e,t,n){return e.prefix?(t.push(e.operator),this.astGeneric(e.argument,t,n)):(this.astGeneric(e.argument,t,n),t.push(e.operator)),t}},{key:"astUnaryExpression",value:function(e,t,n){return e.prefix?(t.push(e.operator),this.astGeneric(e.argument,t,n)):(this.astGeneric(e.argument,t,n),t.push(e.operator)),t}},{key:"astThisExpression",value:function(e,t,n){return t.push("this"),t}},{key:"astMemberExpression",value:function(e,t,n){if(e.computed)if("Identifier"===e.object.type){var r=e.object.name,i=(n.functionName,!1);if(n.paramNames){var o=n.paramNames.indexOf(r);o>=0&&"float"===n.paramTypes[o]&&(i=!0)}i?(this.astGeneric(e.object,t,n),t.push("[int("),this.astGeneric(e.property,t,n),t.push(")]")):(t.push("get("),this.astGeneric(e.object,t,n),t.push(", vec2("),this.astGeneric(e.object,t,n),t.push("Size[0],"),this.astGeneric(e.object,t,n),t.push("Size[1]), vec3("),this.astGeneric(e.object,t,n),t.push("Dim[0],"),this.astGeneric(e.object,t,n),t.push("Dim[1],"),this.astGeneric(e.object,t,n),t.push("Dim[2]"),t.push("), "),this.astGeneric(e.property,t,n),t.push(")"))}else{this.astGeneric(e.object,t,n);var a=t.pop();t.push(","),this.astGeneric(e.property,t,n),t.push(a)}else{var s=this.astMemberExpressionUnroll(e),u=s.toLowerCase();switch(0===s.indexOf("this.constants.")&&(s="constants_"+s.slice("this.constants.".length)),u){case"this.thread.x":t.push("threadId.x");break;case"this.thread.y":t.push("threadId.y");break;case"this.thread.z":t.push("threadId.z");break;case"this.output.x":t.push(this.output[0]+".0");break;case"this.output.y":t.push(this.output[1]+".0");break;case"this.output.z":t.push(this.output[2]+".0");break;default:t.push(s)}}return t}},{key:"astSequenceExpression",value:function(e,t,n){for(var r=0;r<e.expressions.length;r++)r>0&&t.push(","),this.astGeneric(e.expressions,t,n);return t}},{key:"astCallExpression",value:function(e,t,n){if(e.callee){var r=this.astMemberExpressionUnroll(e.callee);0===r.indexOf("Math.")&&(r=r.slice("Math.".length)),0===r.indexOf("this.")&&(r=r.slice("this.".length)),"atan2"===r&&(r="atan"),n.calledFunctions.indexOf(r)<0&&n.calledFunctions.push(r),n.hasOwnProperty("funcName")||(n.calledFunctionsArguments[r]=[]);var i=[];n.calledFunctionsArguments[r].push(i),t.push(r),t.push("(");for(var o=0;o<e.arguments.length;++o){var a=e.arguments[o];if(o>0&&t.push(", "),this.astGeneric(a,t,n),"Identifier"===a.type){var s=n.paramNames.indexOf(a.name);-1===s?i.push(null):i.push({name:a.name,type:n.paramTypes[s]})}else i.push(null)}return t.push(")"),t}throw this.astErrorOutput("Unknown CallExpression",e,n)}},{key:"astArrayExpression",value:function(e,t,n){var r=e.elements.length;t.push("float["+r+"](");for(var i=0;i<r;++i){i>0&&t.push(", ");var o=e.elements[i];this.astGeneric(o,t,n)}return t.push(")"),t}},{key:"getFunctionPrototypeString",value:function(){return this.webGlFunctionPrototypeString?this.webGlFunctionPrototypeString:this.webGlFunctionPrototypeString=this.generate()}},{key:"build",value:function(){return this.getFunctionPrototypeString().length>0}}],[{key:"astFunctionPrototype",value:function(e,t,n){if(n.isRootKernel||n.isSubKernel)return t;t.push(n.returnType),t.push(" "),t.push(n.functionName),t.push("(");for(var r=0;r<n.paramNames.length;++r)r>0&&t.push(", "),t.push(n.paramTypes[r]),t.push(" "),t.push("user_"),t.push(n.paramNames[r]);return t.push(");\n"),t}}]),t}()},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=n(12),o=n(24);function a(e){return Math.floor(e+.5)}e.exports=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e.Node=o,e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i),r(t,[{key:"polyfillStandardFunctions",value:function(){this.addFunction("round",a)}}],[{key:"round",value:function(e){return a(e)}}]),t}()},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=n(1);e.exports=function(){function e(t,n){for(var r in function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.paramNames=i.getParamNamesFromString(t),this.fnString=t,this.output=null,this.debug=!1,this.graphical=!1,this.loopMaxIterations=0,this.constants=null,this.wraparound=null,this.hardcodeConstants=null,this.outputToTexture=null,this.outputImmutable=null,this.texSize=null,this._canvas=null,this._webGl=null,this.threadDim=null,this.floatTextures=null,this.floatOutput=null,this.floatOutputForce=null,this.addFunction=null,this.functions=null,this.nativeFunctions=null,this.subKernels=null,this.subKernelProperties=null,this.subKernelNames=null,this.subKernelOutputVariableNames=null,this.functionBuilder=null,this.paramTypes=null,n)n.hasOwnProperty(r)&&this.hasOwnProperty(r)&&(this[r]=n[r]);n.hasOwnProperty("canvas")&&(this._canvas=n.canvas),n.hasOwnProperty("output")&&this.setOutput(n.output),this._canvas||(this._canvas=i.initCanvas())}return r(e,[{key:"build",value:function(){throw new Error('"build" not defined on Base')}},{key:"setupParams",value:function(e){for(var t=this.paramTypes=[],n=0;n<e.length;n++){var r=e[n],o=i.getArgumentType(r);t.push(o)}}},{key:"setAddFunction",value:function(e){return this.addFunction=e,this}},{key:"setFunctions",value:function(e){return this.functions=e,this}},{key:"setOutput",value:function(e){return e.hasOwnProperty("x")?e.hasOwnProperty("y")?e.hasOwnProperty("z")?this.output=[e.x,e.y,e.z]:this.output=[e.x,e.y]:this.output=[e.x]:this.output=e,this}},{key:"setDebug",value:function(e){return this.debug=e,this}},{key:"setGraphical",value:function(e){return this.graphical=e,this}},{key:"setLoopMaxIterations",value:function(e){return this.loopMaxIterations=e,this}},{key:"setConstants",value:function(e){return this.constants=e,this}},{key:"setWraparound",value:function(e){return console.warn("Wraparound mode is not supported and undocumented."),this.wraparound=e,this}},{key:"setHardcodeConstants",value:function(e){return this.hardcodeConstants=e,this}},{key:"setOutputToTexture",value:function(e){return this.outputToTexture=e,this}},{key:"setOutputImmutable",value:function(e){return this.outputImmutable=e,this}},{key:"setFloatTextures",value:function(e){return this.floatTextures=e,this}},{key:"setFloatOutput",value:function(e){return this.floatOutput=e,this}},{key:"setFloatOutputForce",value:function(e){return this.floatOutputForce=e,this}},{key:"setCanvas",value:function(e){return this._canvas=e,this}},{key:"setWebGl",value:function(e){return this._webGl=e,this}},{key:"getCanvas",value:function(){return this._canvas}},{key:"getWebGl",value:function(){return this._webGl}},{key:"validateOptions",value:function(){throw new Error("validateOptions not defined")}},{key:"exec",value:function(){return this.execute.apply(this,arguments)}},{key:"execute",value:function(){var e=this,t=1===arguments.length?[arguments[0]]:Array.apply(null,arguments);return i.newPromise(function(n,r){try{n(e.run.apply(e,t))}catch(e){r(e)}})}},{key:"addSubKernel",value:function(e){return null===this.subKernels&&(this.subKernels=[],this.subKernelNames=[]),this.subKernels.push(e),this.subKernelNames.push(i.getFunctionNameFromString(e)),this}},{key:"addSubKernelProperty",value:function(e,t){if(null===this.subKernelProperties&&(this.subKernelProperties={},this.subKernelNames=[]),this.subKernelProperties.hasOwnProperty(e))throw new Error("cannot add sub kernel "+e+", already defined");return this.subKernelProperties[e]=t,this.subKernelNames.push(i.getFunctionNameFromString(t)),this}},{key:"addNativeFunction",value:function(e,t){this.functionBuilder.addNativeFunction(e,t)}}]),e}()},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=n(1),o=n(13);e.exports=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),n=n||{},this.kernel=n.kernel,this.canvas=n.canvas,this.webGl=n.webGl,this.fn=null,this.functionBuilder=t,this.fnString=null,this.endianness=i.systemEndianness()}return r(e,[{key:"textureToArray",value:function(e){return this.createKernel(function(e){return e[this.thread.z][this.thread.y][this.thread.x]})(e)}},{key:"deleteTexture",value:function(e){this.webGl.deleteTexture(e.texture)}},{key:"buildPromiseKernel",value:function(){throw new Error("not yet implemented")}},{key:"getMode",value:function(){throw new Error('"mode" not implemented on BaseRunner')}},{key:"buildKernel",value:function(e,t){t=Object.assign({},t||{});var n=e.toString();return t.functionBuilder||(t.functionBuilder=this.functionBuilder),t.canvas||(t.canvas=this.canvas),t.webGl||(t.webGl=this.webgl),o(new this.Kernel(n,t))}}]),e}()},function(e,t,n){"use strict";e.exports=function e(t,n){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.value=t,Array.isArray(n)){this.size=[];for(var r=0;r<n.length;r++)this.size[r]=n[r];for(;this.size.length<3;)this.size.push(1)}else n.z?this.size=[n.x,n.y,n.z]:n.y?this.size=[n.x,n.y,1]:this.size=[n.x,1,1]}},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,null,[{key:"isCanvas",value:function(e){return null!==e&&e.nodeName&&e.getContext&&"CANVAS"===e.nodeName.toUpperCase()}},{key:"isCanvasSupported",value:function(){return o}},{key:"initCanvas",value:function(){if(!o)return null;var e=document.createElement("canvas");return e.width=2,e.height=2,e}},{key:"isWebGl",value:function(e){return e&&"function"==typeof e.getExtension}},{key:"isWebGlSupported",value:function(){return s}},{key:"isWebGlDrawBuffersSupported",value:function(){return u}},{key:"initWebGlDefaultOptions",value:function(){return{alpha:!1,depth:!1,antialias:!1}}},{key:"initWebGl",value:function(t){if((void 0!==o||null===t)&&!o)return null;if(!e.isCanvas(t))throw new Error("Invalid canvas object - "+t);var n=t.getContext("experimental-webgl",e.initWebGlDefaultOptions())||t.getContext("webgl",e.initWebGlDefaultOptions());return n&&(n.OES_texture_float=n.getExtension("OES_texture_float"),n.OES_texture_float_linear=n.getExtension("OES_texture_float_linear"),n.OES_element_index_uint=n.getExtension("OES_element_index_uint")),n}},{key:"initWebGl2",value:function(t){if((void 0!==o||null===t)&&!o)return null;if(!e.isCanvas(t))throw new Error("Invalid canvas object - "+t);return t.getContext("webgl2",e.initWebGlDefaultOptions())}}]),e}(),o="undefined"!=typeof document&&i.isCanvas(document.createElement("canvas")),a=i.initWebGl(i.initCanvas()),s=i.isWebGl(a),u=s&&Boolean(a.getExtension("WEBGL_draw_buffers"));s?(i.OES_texture_float=a.OES_texture_float,i.OES_texture_float_linear=a.OES_texture_float_linear,i.OES_element_index_uint=a.OES_element_index_uint):(i.OES_texture_float=!1,i.OES_texture_float_linear=!1,i.OES_element_index_uint=!1),e.exports=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=["linear","sqrt","cuberoot","log","loglog","sqrtlog"]},function(e,t,n){"use strict";e.exports={}},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";
/*!
 * object.omit <https://github.com/jonschlinkert/object.omit>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */var r=n(58);e.exports=function(e,t,n){if(!r(e))return{};"function"==typeof t&&(n=t,t=[]),"string"==typeof t&&(t=[t]);for(var i="function"==typeof n,o=Object.keys(e),a={},s=0;s<o.length;s++){var u=o[s],l=e[u];t&&(-1!==t.indexOf(u)||i&&!n(l,u,e))||(a[u]=l)}return a}},function(e,t,n){"use strict";n.r(t);var r=n(0),i=n.n(r),o=n(3),a=n.n(o),s=n(6),u=n.n(s),l=n(33),c=n.n(l),h=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var p=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.el=t}return h(e,[{key:"getDocumentRelativeElementOffset",value:function(e){var t=this.getRootOfEl(e).getBoundingClientRect(),n=t.left,r=t.top,i=e.getBoundingClientRect(),o=i.left,a=i.top;return{x:Math.abs(n)+o,y:Math.abs(r)+a}}},{key:"getRootOfEl",value:function(e){return e.parentElement?this.getRootOfEl(e.parentElement):e}},{key:"getComputedElementRelativeCursorPosition",value:function(e,t){var n=this.getDocumentRelativeCursorPosition(e),r=n.x,i=n.y,o=t.x,a=t.y;return{x:Math.round(r-o),y:Math.round(i-a)}}},{key:"getDocumentRelativeCursorPosition",value:function(e){return{x:e.pageX,y:e.pageY}}},{key:"getCursorPosition",value:function(e){return this.getComputedElementRelativeCursorPosition(e,this.documentRelativeElementOffset)}},{key:"documentRelativeElementOffset",get:function(){return this.elementOffset||(this.elementOffset=this.getDocumentRelativeElementOffset(this.el)),this.elementOffset}}]),e}();function f(e,t,n,r){return e.addEventListener(t,n,r),{removeEventListener:function(){e.removeEventListener(t,n,r)}}}var d=function(){},m=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var g=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return v.call(n),n.state={detectedEnvironment:{isMouseDetected:!1,isTouchDetected:!1},elementDimensions:{width:0,height:0},isActive:!1,isPositionOutside:!0,position:{x:0,y:0}},n.shouldGuardAgainstMouseEmulationByDevices=!1,n.eventListeners=[],n.timers=[],n.elementOffset={x:0,y:0},n.onTouchStart=n.onTouchStart.bind(n),n.onTouchMove=n.onTouchMove.bind(n),n.onTouchEnd=n.onTouchEnd.bind(n),n.onTouchCancel=n.onTouchCancel.bind(n),n.onMouseEnter=n.onMouseEnter.bind(n),n.onMouseMove=n.onMouseMove.bind(n),n.onMouseLeave=n.onMouseLeave.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.a.Component),m(t,[{key:"onTouchStart",value:function(e){this.init(),this.onTouchDetected(),this.setShouldGuardAgainstMouseEmulationByDevices();var t=this.core.getCursorPosition(this.getTouchEvent(e));if(this.setPositionState(t),this.props.isActivatedOnTouch)return e.preventDefault(),void this.activate();this.initPressEventCriteria(t),this.setPressEventTimer()}},{key:"onTouchMove",value:function(e){var t=this.core.getCursorPosition(this.getTouchEvent(e));this.state.isActive?(this.setPositionState(t),e.preventDefault(),this.props.shouldStopTouchMovePropagation&&e.stopPropagation()):this.setPressEventCriteria(t)}},{key:"onTouchEnd",value:function(){this.deactivate(),this.unsetShouldGuardAgainstMouseEmulationByDevices()}},{key:"onTouchCancel",value:function(){this.deactivate(),this.unsetShouldGuardAgainstMouseEmulationByDevices()}},{key:"onMouseEnter",value:function(e){this.shouldGuardAgainstMouseEmulationByDevices||(this.init(),this.onMouseDetected(),this.setPositionState(this.core.getCursorPosition(e)),this.clearActivationTimers(),this.schedulActivation(this.props.hoverDelayInMs))}},{key:"onMouseMove",value:function(e){this.setPositionState(this.core.getCursorPosition(e))}},{key:"onMouseLeave",value:function(){this.clearActivationTimers(),this.scheduleDeactivation(this.props.hoverOffDelayInMs),this.setState({isPositionOutside:!0})}},{key:"onTouchDetected",value:function(){var e={isTouchDetected:!0,isMouseDetected:!1};this.setState({detectedEnvironment:e}),this.props.onDetectedEnvironmentChanged(e)}},{key:"onMouseDetected",value:function(){var e={isTouchDetected:!1,isMouseDetected:!0};this.setState({detectedEnvironment:e}),this.props.onDetectedEnvironmentChanged(e)}},{key:"componentDidMount",value:function(){this.props.isEnabled&&this.enable()}},{key:"componentWillReceiveProps",value:function(e){var t=e.isEnabled;this.props.isEnabled!==t&&(t?this.enable():this.disable())}},{key:"componentWillUnmount",value:function(){this.clearTimers(),this.disable()}},{key:"enable",value:function(){this.addEventListeners()}},{key:"disable",value:function(){this.removeEventListeners()}},{key:"init",value:function(){this.core=new p(this.el),this.setElementDimensionsState(this.getElementDimensions(this.el))}},{key:"activate",value:function(){this.setState({isActive:!0}),this.props.onActivationChanged({isActive:!0})}},{key:"deactivate",value:function(){var e=this;this.clearTimer("pressEvent"),this.setState({isActive:!1},function(){var t=e.state,n=t.isPositionOutside,r=t.position;e.props.onPositionChanged({isPositionOutside:n,position:r}),e.props.onActivationChanged({isActive:!1})})}},{key:"setPositionState",value:function(e){var t=this.getIsPositionOutside(e);this.setState({isPositionOutside:t,position:e},this.onPositionChanged)}},{key:"setElementDimensionsState",value:function(e){this.setState({elementDimensions:e})}},{key:"schedulActivation",value:function(e){var t=this,n=setTimeout(function(){t.activate()},e);this.timers.push({id:n,name:"setHovering"})}},{key:"scheduleDeactivation",value:function(e){var t=this,n=setTimeout(function(){t.deactivate()},e);this.timers.push({id:n,name:"unsetHovering"})}},{key:"clearActivationTimers",value:function(){this.clearTimer("setHovering"),this.clearTimer("unsetHovering")}},{key:"setPressEventTimer",value:function(){var e=this,t=this.props,n=t.pressDuration,r=t.pressMoveThreshold;this.timers.push({name:"pressEvent",id:setTimeout(function(){Math.abs(e.currentElTop-e.initialElTop)<r&&e.activate()},n)})}},{key:"setPressEventCriteria",value:function(e){this.currentElTop=e.y}},{key:"initPressEventCriteria",value:function(e){var t=e.y;this.initialElTop=t,this.currentElTop=t}},{key:"setShouldGuardAgainstMouseEmulationByDevices",value:function(){this.shouldGuardAgainstMouseEmulationByDevices=!0}},{key:"unsetShouldGuardAgainstMouseEmulationByDevices",value:function(){var e=this;this.timers.push({name:"mouseEmulation",id:setTimeout(function(){e.shouldGuardAgainstMouseEmulationByDevices=!1},0)})}},{key:"clearTimers",value:function(){for(var e=this.timers;e.length;){var t=e.pop();clearTimeout(t.id)}}},{key:"clearTimer",value:function(e){this.timers.forEach(function(t){t.name===e&&clearTimeout(t.id)})}},{key:"getElementDimensions",value:function(e){var t=e.getBoundingClientRect();return{width:t.width,height:t.height}}},{key:"getIsPositionOutside",value:function(e){var t=e.x,n=e.y,r=this.state.elementDimensions,i=r.width,o=r.height;return t<0||n<0||t>i||n>o}},{key:"getTouchEvent",value:function(e){return e.touches[0]}},{key:"isReactComponent",value:function(e){return"function"==typeof e.type}},{key:"shouldDecorateChild",value:function(e){return!!e&&this.isReactComponent(e)&&this.props.shouldDecorateChildren}},{key:"decorateChild",value:function(e,t){return Object(r.cloneElement)(e,t)}},{key:"decorateChildren",value:function(e,t){var n=this;return r.Children.map(e,function(e){return n.shouldDecorateChild(e)?n.decorateChild(e,t):e})}},{key:"addEventListeners",value:function(){this.eventListeners.push(f(this.el,"touchstart",this.onTouchStart,{passive:!1}),f(this.el,"touchmove",this.onTouchMove,{passive:!1}),f(this.el,"touchend",this.onTouchEnd),f(this.el,"touchcancel",this.onTouchCancel),f(this.el,"mouseenter",this.onMouseEnter),f(this.el,"mousemove",this.onMouseMove),f(this.el,"mouseleave",this.onMouseLeave))}},{key:"removeEventListeners",value:function(){for(;this.eventListeners.length;)this.eventListeners.pop().removeEventListener()}},{key:"getPassThroughProps",value:function(){var e=Object.keys(this.constructor.propTypes);return c()(this.props,e)}},{key:"render",value:function(){var e=this,t=this.props,n=t.children,r=t.className,o=t.mapChildProps,a=t.style,s=u()({},o(this.state),this.getPassThroughProps());return i.a.createElement("div",{className:r,ref:function(t){return e.el=t},style:u()({},a,{WebkitUserSelect:"none"})},this.decorateChildren(n,s))}}]),t}();g.displayName="ReactCursorPosition",g.propTypes={children:a.a.any,className:a.a.string,hoverDelayInMs:a.a.number,hoverOffDelayInMs:a.a.number,isActivatedOnTouch:a.a.bool,isEnabled:a.a.bool,mapChildProps:a.a.func,onActivationChanged:a.a.func,onPositionChanged:a.a.func,onDetectedEnvironmentChanged:a.a.func,pressDuration:a.a.number,pressMoveThreshold:a.a.number,shouldDecorateChildren:a.a.bool,shouldStopTouchMovePropagation:a.a.bool,style:a.a.object},g.defaultProps={isActivatedOnTouch:!1,isEnabled:!0,hoverDelayInMs:0,hoverOffDelayInMs:0,mapChildProps:function(e){return e},onActivationChanged:d,onPositionChanged:d,onDetectedEnvironmentChanged:d,pressDuration:500,pressMoveThreshold:5,shouldDecorateChildren:!0,shouldStopTouchMovePropagation:!1};var v=function(){var e=this;this.onPositionChanged=function(){(0,e.props.onPositionChanged)(e.state)}};t.default=g},function(e,t,n){"use strict";var r=n(1);e.exports=function(e,t){var n=t.toString();return new Function("return function "+e+" ("+r.getParamNamesFromString(n).join(", ")+") {"+r.getFunctionBodyFromString(n)+"}")()}},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();n(29);e.exports=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,null,[{key:"validateKernelObj",value:function(e){if(null===e)throw"KernelObj being validated is NULL";if("string"==typeof e){try{e=JSON.parse(e)}catch(e){throw console.error(e),"Failed to convert KernelObj from JSON string"}if(null===e)throw"Invalid (NULL) KernelObj JSON string representation"}if(!0!==e.isKernelObj)throw"Failed missing isKernelObj flag check";return e}},{key:"loadKernelObj",value:function(e,t){e=validateKernelObj(e)}}]),e}()},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=n(10),o=n(1);e.exports=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i),r(t,[{key:"validateOptions",value:function(){this._webGl.getExtension("EXT_color_buffer_float"),this.texSize=o.dimToTexSize({floatTextures:this.floatTextures,floatOutput:this.floatOutput},this.output,!0)}}]),t}()},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=n(7),o=n(1);e.exports=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i),r(t,[{key:"validateOptions",value:function(){this.texSize=o.dimToTexSize({floatTextures:this.floatTextures,floatOutput:this.floatOutput},this.output,!0)}}]),t}()},function(e,t,n){"use strict";var r=n(1),i=n(13);function o(e){return/^function /.test(e)&&(e=e.substring(9)),e.replace(/[_]typeof/g,"typeof")}function a(e){return e.replace(/[_]typeof/g,"typeof")}e.exports=function(e,t){return"() => {\n    "+i.toString()+";\n    const utils = {\n      allPropertiesOf: "+a(r.allPropertiesOf.toString())+",\n      clone: "+a(r.clone.toString())+"\n    };\n    const Utils = utils;\n    class "+(t||"Kernel")+" {\n      constructor() {        \n        this.argumentsLength = 0;\n        this._canvas = null;\n        this._webGl = null;\n        this.built = false;\n        this.program = null;\n        this.paramNames = "+JSON.stringify(e.paramNames)+";\n        this.paramTypes = "+JSON.stringify(e.paramTypes)+";\n        this.texSize = "+JSON.stringify(e.texSize)+";\n        this.output = "+JSON.stringify(e.output)+";\n        this._kernelString = `"+e._kernelString+"`;\n        this.output = "+JSON.stringify(e.output)+";\n\t\t    this.run = function() {\n          this.run = null;\n          this.build();\n          return this.run.apply(this, arguments);\n        }.bind(this);\n        this.thread = {\n          x: 0,\n          y: 0,\n          z: 0\n        };\n      }\n      setCanvas(canvas) { this._canvas = canvas; return this; }\n      setWebGl(webGl) { this._webGl = webGl; return this; }\n      "+o(e.build.toString())+"\n      "+o(e.setupParams.toString())+"\n      run () { "+e.kernelString+" }\n      getKernelString() { return this._kernelString; }\n    };\n    return kernelRunShortcut(new Kernel());\n  };"}},function(e,t,n){"use strict";e.exports="#version 300 es\nprecision highp float;\nprecision highp int;\nprecision highp sampler2D;\n\nin highp vec2 aPos;\nin highp vec2 aTexCoord;\n\nout highp vec2 vTexCoord;\nuniform vec2 ratio;\n\nvoid main(void) {\n  gl_Position = vec4((aPos + vec2(1)) * ratio + vec2(-1), 0, 1);\n  vTexCoord = aTexCoord;\n}"},function(e,t,n){"use strict";e.exports="#version 300 es\n__HEADER__;\nprecision highp float;\nprecision highp int;\nprecision highp sampler2D;\n\nconst float LOOP_MAX = __LOOP_MAX__;\n#define EPSILON 0.0000001;\n\n__CONSTANTS__;\n\nin highp vec2 vTexCoord;\n\nvec2 integerMod(vec2 x, float y) {\n  vec2 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec3 integerMod(vec3 x, float y) {\n  vec3 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec4 integerMod(vec4 x, vec4 y) {\n  vec4 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nhighp float integerMod(highp float x, highp float y) {\n  highp float res = floor(mod(x, y));\n  return res * (res > floor(y) - 1.0 ? 0.0 : 1.0);\n}\n\nhighp int integerMod(highp int x, highp int y) {\n  return int(integerMod(float(x), float(y)));\n}\n\n// Here be dragons!\n// DO NOT OPTIMIZE THIS CODE\n// YOU WILL BREAK SOMETHING ON SOMEBODY'S MACHINE\n// LEAVE IT AS IT IS, LEST YOU WASTE YOUR OWN TIME\nconst vec2 MAGIC_VEC = vec2(1.0, -256.0);\nconst vec4 SCALE_FACTOR = vec4(1.0, 256.0, 65536.0, 0.0);\nconst vec4 SCALE_FACTOR_INV = vec4(1.0, 0.00390625, 0.0000152587890625, 0.0); // 1, 1/256, 1/65536\nhighp float decode32(highp vec4 rgba) {\n  __DECODE32_ENDIANNESS__;\n  rgba *= 255.0;\n  vec2 gte128;\n  gte128.x = rgba.b >= 128.0 ? 1.0 : 0.0;\n  gte128.y = rgba.a >= 128.0 ? 1.0 : 0.0;\n  float exponent = 2.0 * rgba.a - 127.0 + dot(gte128, MAGIC_VEC);\n  float res = exp2(round(exponent));\n  rgba.b = rgba.b - 128.0 * gte128.x;\n  res = dot(rgba, SCALE_FACTOR) * exp2(round(exponent-23.0)) + res;\n  res *= gte128.y * -2.0 + 1.0;\n  return res;\n}\n\nhighp vec4 encode32(highp float f) {\n  highp float F = abs(f);\n  highp float sign = f < 0.0 ? 1.0 : 0.0;\n  highp float exponent = floor(log2(F));\n  highp float mantissa = (exp2(-exponent) * F);\n  // exponent += floor(log2(mantissa));\n  vec4 rgba = vec4(F * exp2(23.0-exponent)) * SCALE_FACTOR_INV;\n  rgba.rg = integerMod(rgba.rg, 256.0);\n  rgba.b = integerMod(rgba.b, 128.0);\n  rgba.a = exponent*0.5 + 63.5;\n  rgba.ba += vec2(integerMod(exponent+127.0, 2.0), sign) * 128.0;\n  rgba = floor(rgba);\n  rgba *= 0.003921569; // 1/255\n  __ENCODE32_ENDIANNESS__;\n  return rgba;\n}\n// Dragons end here\n\nhighp float index;\nhighp vec3 threadId;\n\nhighp vec3 indexTo3D(highp float idx, highp vec3 texDim) {\n  highp float z = floor(idx / (texDim.x * texDim.y));\n  idx -= z * texDim.x * texDim.y;\n  highp float y = floor(idx / texDim.x);\n  highp float x = integerMod(idx, texDim.x);\n  return vec3(x, y, z);\n}\n\nhighp float get(highp sampler2D tex, highp vec2 texSize, highp vec3 texDim, highp float z, highp float y, highp float x) {\n  highp vec3 xyz = vec3(x, y, z);\n  xyz = floor(xyz + 0.5);\n  __GET_WRAPAROUND__;\n  highp float index = round(xyz.x + texDim.x * (xyz.y + texDim.y * xyz.z));\n  __GET_TEXTURE_CHANNEL__;\n  highp float w = round(texSize.x);\n  vec2 st = vec2(integerMod(index, w), float(int(index) / int(w))) + 0.5;\n  __GET_TEXTURE_INDEX__;\n  highp vec4 texel = texture(tex, st / texSize);\n  __GET_RESULT__;\n}\n\nhighp float get(highp sampler2D tex, highp vec2 texSize, highp vec3 texDim, highp float y, highp float x) {\n  return get(tex, texSize, texDim, 0.0, y, x);\n}\n\nhighp float get(highp sampler2D tex, highp vec2 texSize, highp vec3 texDim, highp float x) {\n  return get(tex, texSize, texDim, 0.0, 0.0, x);\n}\n\nhighp vec4 actualColor;\nvoid color(float r, float g, float b, float a) {\n  actualColor = vec4(r,g,b,a);\n}\n\nvoid color(float r, float g, float b) {\n  color(r,g,b,1.0);\n}\n\n__MAIN_PARAMS__;\n__MAIN_CONSTANTS__;\n__KERNEL__;\n\nvoid main(void) {\n  index = floor(vTexCoord.s * float(uTexSize.x)) + floor(vTexCoord.t * float(uTexSize.y)) * uTexSize.x;\n  __MAIN_RESULT__;\n}"},function(e,t,n){"use strict";n.r(t),n.d(t,"version",function(){return Te}),n.d(t,"parse",function(){return ke}),n.d(t,"parseExpressionAt",function(){return Ce}),n.d(t,"tokenizer",function(){return Oe}),n.d(t,"parse_dammit",function(){return Ee}),n.d(t,"LooseParser",function(){return we}),n.d(t,"pluginsLoose",function(){return Se}),n.d(t,"addLooseExports",function(){return Ae}),n.d(t,"Parser",function(){return j}),n.d(t,"plugins",function(){return U}),n.d(t,"defaultOptions",function(){return F}),n.d(t,"Position",function(){return R}),n.d(t,"SourceLocation",function(){return D}),n.d(t,"getLineInfo",function(){return L}),n.d(t,"Node",function(){return ee}),n.d(t,"TokenType",function(){return g}),n.d(t,"tokTypes",function(){return E}),n.d(t,"keywordTypes",function(){return x}),n.d(t,"TokContext",function(){return re}),n.d(t,"tokContexts",function(){return ie}),n.d(t,"isIdentifierChar",function(){return m}),n.d(t,"isIdentifierStart",function(){return d}),n.d(t,"Token",function(){return ye}),n.d(t,"isNewLine",function(){return T}),n.d(t,"lineBreak",function(){return w}),n.d(t,"lineBreakG",function(){return S}),n.d(t,"nonASCIIwhitespace",function(){return k});var r={3:"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",5:"class enum extends super const export import",6:"enum",strict:"implements interface let package private protected public static yield",strictBind:"eval arguments"},i="break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this",o={5:i,6:i+" const class extends export import super"},a=/^in(stanceof)?$/,s="ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࢠ-ࢴࢶ-ࢽऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲈᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄮㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿪ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞮꞰ-ꞷꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭥꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ",u="‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛ࣔ-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఃా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ංඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ູົຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠐-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭ᳲ-᳴᳷-᳹᷀-᷹᷻-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱꤀-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿",l=new RegExp("["+s+"]"),c=new RegExp("["+s+u+"]");s=u=null;var h=[0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,26,45,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,785,52,76,44,33,24,27,35,42,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,54,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,86,25,391,63,32,0,257,0,11,39,8,0,22,0,12,39,3,3,55,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,698,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,881,68,12,0,67,12,65,1,31,6124,20,754,9486,286,82,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,4149,196,60,67,1213,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42710,42,4148,12,221,3,5761,15,7472,3104,541],p=[509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,1306,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,52,0,13,2,49,13,10,2,4,9,83,11,7,0,161,11,6,9,7,3,57,0,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,87,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,423,9,280,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,19719,9,135,4,60,6,26,9,1016,45,17,3,19723,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,2214,6,110,6,6,9,792487,239];function f(e,t){for(var n=65536,r=0;r<t.length;r+=2){if((n+=t[r])>e)return!1;if((n+=t[r+1])>=e)return!0}}function d(e,t){return e<65?36===e:e<91||(e<97?95===e:e<123||(e<=65535?e>=170&&l.test(String.fromCharCode(e)):!1!==t&&f(e,h)))}function m(e,t){return e<48?36===e:e<58||!(e<65)&&(e<91||(e<97?95===e:e<123||(e<=65535?e>=170&&c.test(String.fromCharCode(e)):!1!==t&&(f(e,h)||f(e,p)))))}var g=function(e,t){void 0===t&&(t={}),this.label=e,this.keyword=t.keyword,this.beforeExpr=!!t.beforeExpr,this.startsExpr=!!t.startsExpr,this.isLoop=!!t.isLoop,this.isAssign=!!t.isAssign,this.prefix=!!t.prefix,this.postfix=!!t.postfix,this.binop=t.binop||null,this.updateContext=null};function v(e,t){return new g(e,{beforeExpr:!0,binop:t})}var y={beforeExpr:!0},b={startsExpr:!0},x={};function _(e,t){return void 0===t&&(t={}),t.keyword=e,x[e]=new g(e,t)}var E={num:new g("num",b),regexp:new g("regexp",b),string:new g("string",b),name:new g("name",b),eof:new g("eof"),bracketL:new g("[",{beforeExpr:!0,startsExpr:!0}),bracketR:new g("]"),braceL:new g("{",{beforeExpr:!0,startsExpr:!0}),braceR:new g("}"),parenL:new g("(",{beforeExpr:!0,startsExpr:!0}),parenR:new g(")"),comma:new g(",",y),semi:new g(";",y),colon:new g(":",y),dot:new g("."),question:new g("?",y),arrow:new g("=>",y),template:new g("template"),invalidTemplate:new g("invalidTemplate"),ellipsis:new g("...",y),backQuote:new g("`",b),dollarBraceL:new g("${",{beforeExpr:!0,startsExpr:!0}),eq:new g("=",{beforeExpr:!0,isAssign:!0}),assign:new g("_=",{beforeExpr:!0,isAssign:!0}),incDec:new g("++/--",{prefix:!0,postfix:!0,startsExpr:!0}),prefix:new g("!/~",{beforeExpr:!0,prefix:!0,startsExpr:!0}),logicalOR:v("||",1),logicalAND:v("&&",2),bitwiseOR:v("|",3),bitwiseXOR:v("^",4),bitwiseAND:v("&",5),equality:v("==/!=/===/!==",6),relational:v("</>/<=/>=",7),bitShift:v("<</>>/>>>",8),plusMin:new g("+/-",{beforeExpr:!0,binop:9,prefix:!0,startsExpr:!0}),modulo:v("%",10),star:v("*",10),slash:v("/",10),starstar:new g("**",{beforeExpr:!0}),_break:_("break"),_case:_("case",y),_catch:_("catch"),_continue:_("continue"),_debugger:_("debugger"),_default:_("default",y),_do:_("do",{isLoop:!0,beforeExpr:!0}),_else:_("else",y),_finally:_("finally"),_for:_("for",{isLoop:!0}),_function:_("function",b),_if:_("if"),_return:_("return",y),_switch:_("switch"),_throw:_("throw",y),_try:_("try"),_var:_("var"),_const:_("const"),_while:_("while",{isLoop:!0}),_with:_("with"),_new:_("new",{beforeExpr:!0,startsExpr:!0}),_this:_("this",b),_super:_("super",b),_class:_("class",b),_extends:_("extends",y),_export:_("export"),_import:_("import"),_null:_("null",b),_true:_("true",b),_false:_("false",b),_in:_("in",{beforeExpr:!0,binop:7}),_instanceof:_("instanceof",{beforeExpr:!0,binop:7}),_typeof:_("typeof",{beforeExpr:!0,prefix:!0,startsExpr:!0}),_void:_("void",{beforeExpr:!0,prefix:!0,startsExpr:!0}),_delete:_("delete",{beforeExpr:!0,prefix:!0,startsExpr:!0})},w=/\r\n?|\n|\u2028|\u2029/,S=new RegExp(w.source,"g");function T(e){return 10===e||13===e||8232===e||8233===e}var k=/[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/,C=/(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g,O=Object.prototype,A=O.hasOwnProperty,P=O.toString;function I(e,t){return A.call(e,t)}var N=Array.isArray||function(e){return"[object Array]"===P.call(e)},R=function(e,t){this.line=e,this.column=t};R.prototype.offset=function(e){return new R(this.line,this.column+e)};var D=function(e,t,n){this.start=t,this.end=n,null!==e.sourceFile&&(this.source=e.sourceFile)};function L(e,t){for(var n=1,r=0;;){S.lastIndex=r;var i=S.exec(e);if(!(i&&i.index<t))return new R(n,t-r);++n,r=i.index+i[0].length}}var F={ecmaVersion:7,sourceType:"script",onInsertedSemicolon:null,onTrailingComma:null,allowReserved:null,allowReturnOutsideFunction:!1,allowImportExportEverywhere:!1,allowHashBang:!1,locations:!1,onToken:null,onComment:null,ranges:!1,program:null,sourceFile:null,directSourceFile:null,preserveParens:!1,plugins:{}};function M(e){var t={};for(var n in F)t[n]=e&&I(e,n)?e[n]:F[n];if(t.ecmaVersion>=2015&&(t.ecmaVersion-=2009),null==t.allowReserved&&(t.allowReserved=t.ecmaVersion<5),N(t.onToken)){var r=t.onToken;t.onToken=function(e){return r.push(e)}}return N(t.onComment)&&(t.onComment=function(e,t){return function(n,r,i,o,a,s){var u={type:n?"Block":"Line",value:r,start:i,end:o};e.locations&&(u.loc=new D(this,a,s)),e.ranges&&(u.range=[i,o]),t.push(u)}}(t,t.onComment)),t}var U={};function B(e){return new RegExp("^(?:"+e.replace(/ /g,"|")+")$")}var j=function(e,t,n){this.options=e=M(e),this.sourceFile=e.sourceFile,this.keywords=B(o[e.ecmaVersion>=6?6:5]);var i="";if(!e.allowReserved){for(var a=e.ecmaVersion;!(i=r[a]);a--);"module"==e.sourceType&&(i+=" await")}this.reservedWords=B(i);var s=(i?i+" ":"")+r.strict;this.reservedWordsStrict=B(s),this.reservedWordsStrictBind=B(s+" "+r.strictBind),this.input=String(t),this.containsEsc=!1,this.loadPlugins(e.plugins),n?(this.pos=n,this.lineStart=this.input.lastIndexOf("\n",n-1)+1,this.curLine=this.input.slice(0,this.lineStart).split(w).length):(this.pos=this.lineStart=0,this.curLine=1),this.type=E.eof,this.value=null,this.start=this.end=this.pos,this.startLoc=this.endLoc=this.curPosition(),this.lastTokEndLoc=this.lastTokStartLoc=null,this.lastTokStart=this.lastTokEnd=this.pos,this.context=this.initialContext(),this.exprAllowed=!0,this.inModule="module"===e.sourceType,this.strict=this.inModule||this.strictDirective(this.pos),this.potentialArrowAt=-1,this.inFunction=this.inGenerator=this.inAsync=!1,this.yieldPos=this.awaitPos=0,this.labels=[],0===this.pos&&e.allowHashBang&&"#!"===this.input.slice(0,2)&&this.skipLineComment(2),this.scopeStack=[],this.enterFunctionScope(),this.regexpState=null};j.prototype.isKeyword=function(e){return this.keywords.test(e)},j.prototype.isReservedWord=function(e){return this.reservedWords.test(e)},j.prototype.extend=function(e,t){this[e]=t(this[e])},j.prototype.loadPlugins=function(e){for(var t in e){var n=U[t];if(!n)throw new Error("Plugin '"+t+"' not found");n(this,e[t])}},j.prototype.parse=function(){var e=this.options.program||this.startNode();return this.nextToken(),this.parseTopLevel(e)};var G=j.prototype,V=/^(?:'((?:\\.|[^'])*?)'|"((?:\\.|[^"])*?)"|;)/;function z(){this.shorthandAssign=this.trailingComma=this.parenthesizedAssign=this.parenthesizedBind=this.doubleProto=-1}G.strictDirective=function(e){for(;;){C.lastIndex=e,e+=C.exec(this.input)[0].length;var t=V.exec(this.input.slice(e));if(!t)return!1;if("use strict"==(t[1]||t[2]))return!0;e+=t[0].length}},G.eat=function(e){return this.type===e&&(this.next(),!0)},G.isContextual=function(e){return this.type===E.name&&this.value===e&&!this.containsEsc},G.eatContextual=function(e){return!!this.isContextual(e)&&(this.next(),!0)},G.expectContextual=function(e){this.eatContextual(e)||this.unexpected()},G.canInsertSemicolon=function(){return this.type===E.eof||this.type===E.braceR||w.test(this.input.slice(this.lastTokEnd,this.start))},G.insertSemicolon=function(){if(this.canInsertSemicolon())return this.options.onInsertedSemicolon&&this.options.onInsertedSemicolon(this.lastTokEnd,this.lastTokEndLoc),!0},G.semicolon=function(){this.eat(E.semi)||this.insertSemicolon()||this.unexpected()},G.afterTrailingComma=function(e,t){if(this.type==e)return this.options.onTrailingComma&&this.options.onTrailingComma(this.lastTokStart,this.lastTokStartLoc),t||this.next(),!0},G.expect=function(e){this.eat(e)||this.unexpected()},G.unexpected=function(e){this.raise(null!=e?e:this.start,"Unexpected token")},G.checkPatternErrors=function(e,t){if(e){e.trailingComma>-1&&this.raiseRecoverable(e.trailingComma,"Comma is not permitted after the rest element");var n=t?e.parenthesizedAssign:e.parenthesizedBind;n>-1&&this.raiseRecoverable(n,"Parenthesized pattern")}},G.checkExpressionErrors=function(e,t){if(!e)return!1;var n=e.shorthandAssign,r=e.doubleProto;if(!t)return n>=0||r>=0;n>=0&&this.raise(n,"Shorthand property assignments are valid only in destructuring patterns"),r>=0&&this.raiseRecoverable(r,"Redefinition of __proto__ property")},G.checkYieldAwaitInDefaultParams=function(){this.yieldPos&&(!this.awaitPos||this.yieldPos<this.awaitPos)&&this.raise(this.yieldPos,"Yield expression cannot be a default value"),this.awaitPos&&this.raise(this.awaitPos,"Await expression cannot be a default value")},G.isSimpleAssignTarget=function(e){return"ParenthesizedExpression"===e.type?this.isSimpleAssignTarget(e.expression):"Identifier"===e.type||"MemberExpression"===e.type};var K=j.prototype;K.parseTopLevel=function(e){var t={};for(e.body||(e.body=[]);this.type!==E.eof;){var n=this.parseStatement(!0,!0,t);e.body.push(n)}return this.adaptDirectivePrologue(e.body),this.next(),this.options.ecmaVersion>=6&&(e.sourceType=this.options.sourceType),this.finishNode(e,"Program")};var W={kind:"loop"},H={kind:"switch"};K.isLet=function(){if(this.options.ecmaVersion<6||!this.isContextual("let"))return!1;C.lastIndex=this.pos;var e=C.exec(this.input),t=this.pos+e[0].length,n=this.input.charCodeAt(t);if(91===n||123==n)return!0;if(d(n,!0)){for(var r=t+1;m(this.input.charCodeAt(r),!0);)++r;var i=this.input.slice(t,r);if(!a.test(i))return!0}return!1},K.isAsyncFunction=function(){if(this.options.ecmaVersion<8||!this.isContextual("async"))return!1;C.lastIndex=this.pos;var e=C.exec(this.input),t=this.pos+e[0].length;return!(w.test(this.input.slice(this.pos,t))||"function"!==this.input.slice(t,t+8)||t+8!=this.input.length&&m(this.input.charAt(t+8)))},K.parseStatement=function(e,t,n){var r,i=this.type,o=this.startNode();switch(this.isLet()&&(i=E._var,r="let"),i){case E._break:case E._continue:return this.parseBreakContinueStatement(o,i.keyword);case E._debugger:return this.parseDebuggerStatement(o);case E._do:return this.parseDoStatement(o);case E._for:return this.parseForStatement(o);case E._function:return!e&&this.options.ecmaVersion>=6&&this.unexpected(),this.parseFunctionStatement(o,!1);case E._class:return e||this.unexpected(),this.parseClass(o,!0);case E._if:return this.parseIfStatement(o);case E._return:return this.parseReturnStatement(o);case E._switch:return this.parseSwitchStatement(o);case E._throw:return this.parseThrowStatement(o);case E._try:return this.parseTryStatement(o);case E._const:case E._var:return r=r||this.value,e||"var"==r||this.unexpected(),this.parseVarStatement(o,r);case E._while:return this.parseWhileStatement(o);case E._with:return this.parseWithStatement(o);case E.braceL:return this.parseBlock();case E.semi:return this.parseEmptyStatement(o);case E._export:case E._import:return this.options.allowImportExportEverywhere||(t||this.raise(this.start,"'import' and 'export' may only appear at the top level"),this.inModule||this.raise(this.start,"'import' and 'export' may appear only with 'sourceType: module'")),i===E._import?this.parseImport(o):this.parseExport(o,n);default:if(this.isAsyncFunction())return e||this.unexpected(),this.next(),this.parseFunctionStatement(o,!0);var a=this.value,s=this.parseExpression();return i===E.name&&"Identifier"===s.type&&this.eat(E.colon)?this.parseLabeledStatement(o,a,s):this.parseExpressionStatement(o,s)}},K.parseBreakContinueStatement=function(e,t){var n="break"==t;this.next(),this.eat(E.semi)||this.insertSemicolon()?e.label=null:this.type!==E.name?this.unexpected():(e.label=this.parseIdent(),this.semicolon());for(var r=0;r<this.labels.length;++r){var i=this.labels[r];if(null==e.label||i.name===e.label.name){if(null!=i.kind&&(n||"loop"===i.kind))break;if(e.label&&n)break}}return r===this.labels.length&&this.raise(e.start,"Unsyntactic "+t),this.finishNode(e,n?"BreakStatement":"ContinueStatement")},K.parseDebuggerStatement=function(e){return this.next(),this.semicolon(),this.finishNode(e,"DebuggerStatement")},K.parseDoStatement=function(e){return this.next(),this.labels.push(W),e.body=this.parseStatement(!1),this.labels.pop(),this.expect(E._while),e.test=this.parseParenExpression(),this.options.ecmaVersion>=6?this.eat(E.semi):this.semicolon(),this.finishNode(e,"DoWhileStatement")},K.parseForStatement=function(e){this.next();var t=this.options.ecmaVersion>=9&&this.inAsync&&this.eatContextual("await")?this.lastTokStart:-1;if(this.labels.push(W),this.enterLexicalScope(),this.expect(E.parenL),this.type===E.semi)return t>-1&&this.unexpected(t),this.parseFor(e,null);var n=this.isLet();if(this.type===E._var||this.type===E._const||n){var r=this.startNode(),i=n?"let":this.value;return this.next(),this.parseVar(r,!0,i),this.finishNode(r,"VariableDeclaration"),!(this.type===E._in||this.options.ecmaVersion>=6&&this.isContextual("of"))||1!==r.declarations.length||"var"!==i&&r.declarations[0].init?(t>-1&&this.unexpected(t),this.parseFor(e,r)):(this.options.ecmaVersion>=9&&(this.type===E._in?t>-1&&this.unexpected(t):e.await=t>-1),this.parseForIn(e,r))}var o=new z,a=this.parseExpression(!0,o);return this.type===E._in||this.options.ecmaVersion>=6&&this.isContextual("of")?(this.options.ecmaVersion>=9&&(this.type===E._in?t>-1&&this.unexpected(t):e.await=t>-1),this.toAssignable(a,!1,o),this.checkLVal(a),this.parseForIn(e,a)):(this.checkExpressionErrors(o,!0),t>-1&&this.unexpected(t),this.parseFor(e,a))},K.parseFunctionStatement=function(e,t){return this.next(),this.parseFunction(e,!0,!1,t)},K.parseIfStatement=function(e){return this.next(),e.test=this.parseParenExpression(),e.consequent=this.parseStatement(!this.strict&&this.type==E._function),e.alternate=this.eat(E._else)?this.parseStatement(!this.strict&&this.type==E._function):null,this.finishNode(e,"IfStatement")},K.parseReturnStatement=function(e){return this.inFunction||this.options.allowReturnOutsideFunction||this.raise(this.start,"'return' outside of function"),this.next(),this.eat(E.semi)||this.insertSemicolon()?e.argument=null:(e.argument=this.parseExpression(),this.semicolon()),this.finishNode(e,"ReturnStatement")},K.parseSwitchStatement=function(e){var t;this.next(),e.discriminant=this.parseParenExpression(),e.cases=[],this.expect(E.braceL),this.labels.push(H),this.enterLexicalScope();for(var n=!1;this.type!=E.braceR;)if(this.type===E._case||this.type===E._default){var r=this.type===E._case;t&&this.finishNode(t,"SwitchCase"),e.cases.push(t=this.startNode()),t.consequent=[],this.next(),r?t.test=this.parseExpression():(n&&this.raiseRecoverable(this.lastTokStart,"Multiple default clauses"),n=!0,t.test=null),this.expect(E.colon)}else t||this.unexpected(),t.consequent.push(this.parseStatement(!0));return this.exitLexicalScope(),t&&this.finishNode(t,"SwitchCase"),this.next(),this.labels.pop(),this.finishNode(e,"SwitchStatement")},K.parseThrowStatement=function(e){return this.next(),w.test(this.input.slice(this.lastTokEnd,this.start))&&this.raise(this.lastTokEnd,"Illegal newline after throw"),e.argument=this.parseExpression(),this.semicolon(),this.finishNode(e,"ThrowStatement")};var X=[];K.parseTryStatement=function(e){if(this.next(),e.block=this.parseBlock(),e.handler=null,this.type===E._catch){var t=this.startNode();this.next(),this.expect(E.parenL),t.param=this.parseBindingAtom(),this.enterLexicalScope(),this.checkLVal(t.param,"let"),this.expect(E.parenR),t.body=this.parseBlock(!1),this.exitLexicalScope(),e.handler=this.finishNode(t,"CatchClause")}return e.finalizer=this.eat(E._finally)?this.parseBlock():null,e.handler||e.finalizer||this.raise(e.start,"Missing catch or finally clause"),this.finishNode(e,"TryStatement")},K.parseVarStatement=function(e,t){return this.next(),this.parseVar(e,!1,t),this.semicolon(),this.finishNode(e,"VariableDeclaration")},K.parseWhileStatement=function(e){return this.next(),e.test=this.parseParenExpression(),this.labels.push(W),e.body=this.parseStatement(!1),this.labels.pop(),this.finishNode(e,"WhileStatement")},K.parseWithStatement=function(e){return this.strict&&this.raise(this.start,"'with' in strict mode"),this.next(),e.object=this.parseParenExpression(),e.body=this.parseStatement(!1),this.finishNode(e,"WithStatement")},K.parseEmptyStatement=function(e){return this.next(),this.finishNode(e,"EmptyStatement")},K.parseLabeledStatement=function(e,t,n){for(var r=0,i=this.labels;r<i.length;r+=1){i[r].name===t&&this.raise(n.start,"Label '"+t+"' is already declared")}for(var o=this.type.isLoop?"loop":this.type===E._switch?"switch":null,a=this.labels.length-1;a>=0;a--){var s=this.labels[a];if(s.statementStart!=e.start)break;s.statementStart=this.start,s.kind=o}return this.labels.push({name:t,kind:o,statementStart:this.start}),e.body=this.parseStatement(!0),("ClassDeclaration"==e.body.type||"VariableDeclaration"==e.body.type&&"var"!=e.body.kind||"FunctionDeclaration"==e.body.type&&(this.strict||e.body.generator))&&this.raiseRecoverable(e.body.start,"Invalid labeled declaration"),this.labels.pop(),e.label=n,this.finishNode(e,"LabeledStatement")},K.parseExpressionStatement=function(e,t){return e.expression=t,this.semicolon(),this.finishNode(e,"ExpressionStatement")},K.parseBlock=function(e){void 0===e&&(e=!0);var t=this.startNode();for(t.body=[],this.expect(E.braceL),e&&this.enterLexicalScope();!this.eat(E.braceR);){var n=this.parseStatement(!0);t.body.push(n)}return e&&this.exitLexicalScope(),this.finishNode(t,"BlockStatement")},K.parseFor=function(e,t){return e.init=t,this.expect(E.semi),e.test=this.type===E.semi?null:this.parseExpression(),this.expect(E.semi),e.update=this.type===E.parenR?null:this.parseExpression(),this.expect(E.parenR),this.exitLexicalScope(),e.body=this.parseStatement(!1),this.labels.pop(),this.finishNode(e,"ForStatement")},K.parseForIn=function(e,t){var n=this.type===E._in?"ForInStatement":"ForOfStatement";return this.next(),"ForInStatement"==n&&("AssignmentPattern"===t.type||"VariableDeclaration"===t.type&&null!=t.declarations[0].init&&(this.strict||"Identifier"!==t.declarations[0].id.type))&&this.raise(t.start,"Invalid assignment in for-in loop head"),e.left=t,e.right="ForInStatement"==n?this.parseExpression():this.parseMaybeAssign(),this.expect(E.parenR),this.exitLexicalScope(),e.body=this.parseStatement(!1),this.labels.pop(),this.finishNode(e,n)},K.parseVar=function(e,t,n){for(e.declarations=[],e.kind=n;;){var r=this.startNode();if(this.parseVarId(r,n),this.eat(E.eq)?r.init=this.parseMaybeAssign(t):"const"!==n||this.type===E._in||this.options.ecmaVersion>=6&&this.isContextual("of")?"Identifier"==r.id.type||t&&(this.type===E._in||this.isContextual("of"))?r.init=null:this.raise(this.lastTokEnd,"Complex binding patterns require an initialization value"):this.unexpected(),e.declarations.push(this.finishNode(r,"VariableDeclarator")),!this.eat(E.comma))break}return e},K.parseVarId=function(e,t){e.id=this.parseBindingAtom(t),this.checkLVal(e.id,t,!1)},K.parseFunction=function(e,t,n,r){this.initFunction(e),(this.options.ecmaVersion>=9||this.options.ecmaVersion>=6&&!r)&&(e.generator=this.eat(E.star)),this.options.ecmaVersion>=8&&(e.async=!!r),t&&(e.id="nullableID"===t&&this.type!=E.name?null:this.parseIdent(),e.id&&this.checkLVal(e.id,"var"));var i=this.inGenerator,o=this.inAsync,a=this.yieldPos,s=this.awaitPos,u=this.inFunction;return this.inGenerator=e.generator,this.inAsync=e.async,this.yieldPos=0,this.awaitPos=0,this.inFunction=!0,this.enterFunctionScope(),t||(e.id=this.type==E.name?this.parseIdent():null),this.parseFunctionParams(e),this.parseFunctionBody(e,n),this.inGenerator=i,this.inAsync=o,this.yieldPos=a,this.awaitPos=s,this.inFunction=u,this.finishNode(e,t?"FunctionDeclaration":"FunctionExpression")},K.parseFunctionParams=function(e){this.expect(E.parenL),e.params=this.parseBindingList(E.parenR,!1,this.options.ecmaVersion>=8),this.checkYieldAwaitInDefaultParams()},K.parseClass=function(e,t){this.next(),this.parseClassId(e,t),this.parseClassSuper(e);var n=this.startNode(),r=!1;for(n.body=[],this.expect(E.braceL);!this.eat(E.braceR);){var i=this.parseClassMember(n);i&&"MethodDefinition"===i.type&&"constructor"===i.kind&&(r&&this.raise(i.start,"Duplicate constructor in the same class"),r=!0)}return e.body=this.finishNode(n,"ClassBody"),this.finishNode(e,t?"ClassDeclaration":"ClassExpression")},K.parseClassMember=function(e){var t=this;if(this.eat(E.semi))return null;var n=this.startNode(),r=function(e,r){void 0===r&&(r=!1);var i=t.start,o=t.startLoc;return!!t.eatContextual(e)&&(!(t.type===E.parenL||r&&t.canInsertSemicolon())||(n.key&&t.unexpected(),n.computed=!1,n.key=t.startNodeAt(i,o),n.key.name=e,t.finishNode(n.key,"Identifier"),!1))};n.kind="method",n.static=r("static");var i=this.eat(E.star),o=!1;i||(this.options.ecmaVersion>=8&&r("async",!0)?(o=!0,i=this.options.ecmaVersion>=9&&this.eat(E.star)):r("get")?n.kind="get":r("set")&&(n.kind="set")),n.key||this.parsePropertyName(n);var a=n.key;return n.computed||n.static||!("Identifier"===a.type&&"constructor"===a.name||"Literal"===a.type&&"constructor"===a.value)?n.static&&"Identifier"===a.type&&"prototype"===a.name&&this.raise(a.start,"Classes may not have a static property named prototype"):("method"!==n.kind&&this.raise(a.start,"Constructor can't have get/set modifier"),i&&this.raise(a.start,"Constructor can't be a generator"),o&&this.raise(a.start,"Constructor can't be an async method"),n.kind="constructor"),this.parseClassMethod(e,n,i,o),"get"===n.kind&&0!==n.value.params.length&&this.raiseRecoverable(n.value.start,"getter should have no params"),"set"===n.kind&&1!==n.value.params.length&&this.raiseRecoverable(n.value.start,"setter should have exactly one param"),"set"===n.kind&&"RestElement"===n.value.params[0].type&&this.raiseRecoverable(n.value.params[0].start,"Setter cannot use rest params"),n},K.parseClassMethod=function(e,t,n,r){t.value=this.parseMethod(n,r),e.body.push(this.finishNode(t,"MethodDefinition"))},K.parseClassId=function(e,t){e.id=this.type===E.name?this.parseIdent():!0===t?this.unexpected():null},K.parseClassSuper=function(e){e.superClass=this.eat(E._extends)?this.parseExprSubscripts():null},K.parseExport=function(e,t){if(this.next(),this.eat(E.star))return this.expectContextual("from"),this.type!==E.string&&this.unexpected(),e.source=this.parseExprAtom(),this.semicolon(),this.finishNode(e,"ExportAllDeclaration");if(this.eat(E._default)){var n;if(this.checkExport(t,"default",this.lastTokStart),this.type===E._function||(n=this.isAsyncFunction())){var r=this.startNode();this.next(),n&&this.next(),e.declaration=this.parseFunction(r,"nullableID",!1,n)}else if(this.type===E._class){var i=this.startNode();e.declaration=this.parseClass(i,"nullableID")}else e.declaration=this.parseMaybeAssign(),this.semicolon();return this.finishNode(e,"ExportDefaultDeclaration")}if(this.shouldParseExportStatement())e.declaration=this.parseStatement(!0),"VariableDeclaration"===e.declaration.type?this.checkVariableExport(t,e.declaration.declarations):this.checkExport(t,e.declaration.id.name,e.declaration.id.start),e.specifiers=[],e.source=null;else{if(e.declaration=null,e.specifiers=this.parseExportSpecifiers(t),this.eatContextual("from"))this.type!==E.string&&this.unexpected(),e.source=this.parseExprAtom();else{for(var o=0,a=e.specifiers;o<a.length;o+=1){var s=a[o];this.checkUnreserved(s.local)}e.source=null}this.semicolon()}return this.finishNode(e,"ExportNamedDeclaration")},K.checkExport=function(e,t,n){e&&(I(e,t)&&this.raiseRecoverable(n,"Duplicate export '"+t+"'"),e[t]=!0)},K.checkPatternExport=function(e,t){var n=t.type;if("Identifier"==n)this.checkExport(e,t.name,t.start);else if("ObjectPattern"==n)for(var r=0,i=t.properties;r<i.length;r+=1){var o=i[r];this.checkPatternExport(e,o)}else if("ArrayPattern"==n)for(var a=0,s=t.elements;a<s.length;a+=1){var u=s[a];u&&this.checkPatternExport(e,u)}else"Property"==n?this.checkPatternExport(e,t.value):"AssignmentPattern"==n?this.checkPatternExport(e,t.left):"RestElement"==n?this.checkPatternExport(e,t.argument):"ParenthesizedExpression"==n&&this.checkPatternExport(e,t.expression)},K.checkVariableExport=function(e,t){if(e)for(var n=0,r=t;n<r.length;n+=1){var i=r[n];this.checkPatternExport(e,i.id)}},K.shouldParseExportStatement=function(){return"var"===this.type.keyword||"const"===this.type.keyword||"class"===this.type.keyword||"function"===this.type.keyword||this.isLet()||this.isAsyncFunction()},K.parseExportSpecifiers=function(e){var t=[],n=!0;for(this.expect(E.braceL);!this.eat(E.braceR);){if(n)n=!1;else if(this.expect(E.comma),this.afterTrailingComma(E.braceR))break;var r=this.startNode();r.local=this.parseIdent(!0),r.exported=this.eatContextual("as")?this.parseIdent(!0):r.local,this.checkExport(e,r.exported.name,r.exported.start),t.push(this.finishNode(r,"ExportSpecifier"))}return t},K.parseImport=function(e){return this.next(),this.type===E.string?(e.specifiers=X,e.source=this.parseExprAtom()):(e.specifiers=this.parseImportSpecifiers(),this.expectContextual("from"),e.source=this.type===E.string?this.parseExprAtom():this.unexpected()),this.semicolon(),this.finishNode(e,"ImportDeclaration")},K.parseImportSpecifiers=function(){var e=[],t=!0;if(this.type===E.name){var n=this.startNode();if(n.local=this.parseIdent(),this.checkLVal(n.local,"let"),e.push(this.finishNode(n,"ImportDefaultSpecifier")),!this.eat(E.comma))return e}if(this.type===E.star){var r=this.startNode();return this.next(),this.expectContextual("as"),r.local=this.parseIdent(),this.checkLVal(r.local,"let"),e.push(this.finishNode(r,"ImportNamespaceSpecifier")),e}for(this.expect(E.braceL);!this.eat(E.braceR);){if(t)t=!1;else if(this.expect(E.comma),this.afterTrailingComma(E.braceR))break;var i=this.startNode();i.imported=this.parseIdent(!0),this.eatContextual("as")?i.local=this.parseIdent():(this.checkUnreserved(i.imported),i.local=i.imported),this.checkLVal(i.local,"let"),e.push(this.finishNode(i,"ImportSpecifier"))}return e},K.adaptDirectivePrologue=function(e){for(var t=0;t<e.length&&this.isDirectiveCandidate(e[t]);++t)e[t].directive=e[t].expression.raw.slice(1,-1)},K.isDirectiveCandidate=function(e){return"ExpressionStatement"===e.type&&"Literal"===e.expression.type&&"string"==typeof e.expression.value&&('"'===this.input[e.start]||"'"===this.input[e.start])};var q=j.prototype;q.toAssignable=function(e,t,n){if(this.options.ecmaVersion>=6&&e)switch(e.type){case"Identifier":this.inAsync&&"await"===e.name&&this.raise(e.start,"Can not use 'await' as identifier inside an async function");break;case"ObjectPattern":case"ArrayPattern":case"RestElement":break;case"ObjectExpression":e.type="ObjectPattern",n&&this.checkPatternErrors(n,!0);for(var r=0,i=e.properties;r<i.length;r+=1){var o=i[r];this.toAssignable(o,t),"RestElement"!==o.type||"ArrayPattern"!==o.argument.type&&"ObjectPattern"!==o.argument.type||this.raise(o.argument.start,"Unexpected token")}break;case"Property":"init"!==e.kind&&this.raise(e.key.start,"Object pattern can't contain getter or setter"),this.toAssignable(e.value,t);break;case"ArrayExpression":e.type="ArrayPattern",n&&this.checkPatternErrors(n,!0),this.toAssignableList(e.elements,t);break;case"SpreadElement":e.type="RestElement",this.toAssignable(e.argument,t),"AssignmentPattern"===e.argument.type&&this.raise(e.argument.start,"Rest elements cannot have a default value");break;case"AssignmentExpression":"="!==e.operator&&this.raise(e.left.end,"Only '=' operator can be used for specifying default value."),e.type="AssignmentPattern",delete e.operator,this.toAssignable(e.left,t);case"AssignmentPattern":break;case"ParenthesizedExpression":this.toAssignable(e.expression,t);break;case"MemberExpression":if(!t)break;default:this.raise(e.start,"Assigning to rvalue")}else n&&this.checkPatternErrors(n,!0);return e},q.toAssignableList=function(e,t){for(var n=e.length,r=0;r<n;r++){var i=e[r];i&&this.toAssignable(i,t)}if(n){var o=e[n-1];6===this.options.ecmaVersion&&t&&o&&"RestElement"===o.type&&"Identifier"!==o.argument.type&&this.unexpected(o.argument.start)}return e},q.parseSpread=function(e){var t=this.startNode();return this.next(),t.argument=this.parseMaybeAssign(!1,e),this.finishNode(t,"SpreadElement")},q.parseRestBinding=function(){var e=this.startNode();return this.next(),6===this.options.ecmaVersion&&this.type!==E.name&&this.unexpected(),e.argument=this.parseBindingAtom(),this.finishNode(e,"RestElement")},q.parseBindingAtom=function(){if(this.options.ecmaVersion>=6)switch(this.type){case E.bracketL:var e=this.startNode();return this.next(),e.elements=this.parseBindingList(E.bracketR,!0,!0),this.finishNode(e,"ArrayPattern");case E.braceL:return this.parseObj(!0)}return this.parseIdent()},q.parseBindingList=function(e,t,n){for(var r=[],i=!0;!this.eat(e);)if(i?i=!1:this.expect(E.comma),t&&this.type===E.comma)r.push(null);else{if(n&&this.afterTrailingComma(e))break;if(this.type===E.ellipsis){var o=this.parseRestBinding();this.parseBindingListItem(o),r.push(o),this.type===E.comma&&this.raise(this.start,"Comma is not permitted after the rest element"),this.expect(e);break}var a=this.parseMaybeDefault(this.start,this.startLoc);this.parseBindingListItem(a),r.push(a)}return r},q.parseBindingListItem=function(e){return e},q.parseMaybeDefault=function(e,t,n){if(n=n||this.parseBindingAtom(),this.options.ecmaVersion<6||!this.eat(E.eq))return n;var r=this.startNodeAt(e,t);return r.left=n,r.right=this.parseMaybeAssign(),this.finishNode(r,"AssignmentPattern")},q.checkLVal=function(e,t,n){switch(e.type){case"Identifier":this.strict&&this.reservedWordsStrictBind.test(e.name)&&this.raiseRecoverable(e.start,(t?"Binding ":"Assigning to ")+e.name+" in strict mode"),n&&(I(n,e.name)&&this.raiseRecoverable(e.start,"Argument name clash"),n[e.name]=!0),t&&"none"!==t&&(("var"===t&&!this.canDeclareVarName(e.name)||"var"!==t&&!this.canDeclareLexicalName(e.name))&&this.raiseRecoverable(e.start,"Identifier '"+e.name+"' has already been declared"),"var"===t?this.declareVarName(e.name):this.declareLexicalName(e.name));break;case"MemberExpression":t&&this.raiseRecoverable(e.start,"Binding member expression");break;case"ObjectPattern":for(var r=0,i=e.properties;r<i.length;r+=1){var o=i[r];this.checkLVal(o,t,n)}break;case"Property":this.checkLVal(e.value,t,n);break;case"ArrayPattern":for(var a=0,s=e.elements;a<s.length;a+=1){var u=s[a];u&&this.checkLVal(u,t,n)}break;case"AssignmentPattern":this.checkLVal(e.left,t,n);break;case"RestElement":this.checkLVal(e.argument,t,n);break;case"ParenthesizedExpression":this.checkLVal(e.expression,t,n);break;default:this.raise(e.start,(t?"Binding":"Assigning to")+" rvalue")}};var $=j.prototype;$.checkPropClash=function(e,t,n){if(!(this.options.ecmaVersion>=9&&"SpreadElement"===e.type||this.options.ecmaVersion>=6&&(e.computed||e.method||e.shorthand))){var r,i=e.key;switch(i.type){case"Identifier":r=i.name;break;case"Literal":r=String(i.value);break;default:return}var o=e.kind;if(this.options.ecmaVersion>=6)"__proto__"===r&&"init"===o&&(t.proto&&(n&&n.doubleProto<0?n.doubleProto=i.start:this.raiseRecoverable(i.start,"Redefinition of __proto__ property")),t.proto=!0);else{var a=t[r="$"+r];if(a)("init"===o?this.strict&&a.init||a.get||a.set:a.init||a[o])&&this.raiseRecoverable(i.start,"Redefinition of property");else a=t[r]={init:!1,get:!1,set:!1};a[o]=!0}}},$.parseExpression=function(e,t){var n=this.start,r=this.startLoc,i=this.parseMaybeAssign(e,t);if(this.type===E.comma){var o=this.startNodeAt(n,r);for(o.expressions=[i];this.eat(E.comma);)o.expressions.push(this.parseMaybeAssign(e,t));return this.finishNode(o,"SequenceExpression")}return i},$.parseMaybeAssign=function(e,t,n){if(this.inGenerator&&this.isContextual("yield"))return this.parseYield();var r=!1,i=-1,o=-1;t?(i=t.parenthesizedAssign,o=t.trailingComma,t.parenthesizedAssign=t.trailingComma=-1):(t=new z,r=!0);var a=this.start,s=this.startLoc;this.type!=E.parenL&&this.type!=E.name||(this.potentialArrowAt=this.start);var u=this.parseMaybeConditional(e,t);if(n&&(u=n.call(this,u,a,s)),this.type.isAssign){var l=this.startNodeAt(a,s);return l.operator=this.value,l.left=this.type===E.eq?this.toAssignable(u,!1,t):u,r||z.call(t),t.shorthandAssign=-1,this.checkLVal(u),this.next(),l.right=this.parseMaybeAssign(e),this.finishNode(l,"AssignmentExpression")}return r&&this.checkExpressionErrors(t,!0),i>-1&&(t.parenthesizedAssign=i),o>-1&&(t.trailingComma=o),u},$.parseMaybeConditional=function(e,t){var n=this.start,r=this.startLoc,i=this.parseExprOps(e,t);if(this.checkExpressionErrors(t))return i;if(this.eat(E.question)){var o=this.startNodeAt(n,r);return o.test=i,o.consequent=this.parseMaybeAssign(),this.expect(E.colon),o.alternate=this.parseMaybeAssign(e),this.finishNode(o,"ConditionalExpression")}return i},$.parseExprOps=function(e,t){var n=this.start,r=this.startLoc,i=this.parseMaybeUnary(t,!1);return this.checkExpressionErrors(t)?i:i.start==n&&"ArrowFunctionExpression"===i.type?i:this.parseExprOp(i,n,r,-1,e)},$.parseExprOp=function(e,t,n,r,i){var o=this.type.binop;if(null!=o&&(!i||this.type!==E._in)&&o>r){var a=this.type===E.logicalOR||this.type===E.logicalAND,s=this.value;this.next();var u=this.start,l=this.startLoc,c=this.parseExprOp(this.parseMaybeUnary(null,!1),u,l,o,i),h=this.buildBinary(t,n,e,c,s,a);return this.parseExprOp(h,t,n,r,i)}return e},$.buildBinary=function(e,t,n,r,i,o){var a=this.startNodeAt(e,t);return a.left=n,a.operator=i,a.right=r,this.finishNode(a,o?"LogicalExpression":"BinaryExpression")},$.parseMaybeUnary=function(e,t){var n,r=this.start,i=this.startLoc;if(this.inAsync&&this.isContextual("await"))n=this.parseAwait(),t=!0;else if(this.type.prefix){var o=this.startNode(),a=this.type===E.incDec;o.operator=this.value,o.prefix=!0,this.next(),o.argument=this.parseMaybeUnary(null,!0),this.checkExpressionErrors(e,!0),a?this.checkLVal(o.argument):this.strict&&"delete"===o.operator&&"Identifier"===o.argument.type?this.raiseRecoverable(o.start,"Deleting local variable in strict mode"):t=!0,n=this.finishNode(o,a?"UpdateExpression":"UnaryExpression")}else{if(n=this.parseExprSubscripts(e),this.checkExpressionErrors(e))return n;for(;this.type.postfix&&!this.canInsertSemicolon();){var s=this.startNodeAt(r,i);s.operator=this.value,s.prefix=!1,s.argument=n,this.checkLVal(n),this.next(),n=this.finishNode(s,"UpdateExpression")}}return!t&&this.eat(E.starstar)?this.buildBinary(r,i,n,this.parseMaybeUnary(null,!1),"**",!1):n},$.parseExprSubscripts=function(e){var t=this.start,n=this.startLoc,r=this.parseExprAtom(e),i="ArrowFunctionExpression"===r.type&&")"!==this.input.slice(this.lastTokStart,this.lastTokEnd);if(this.checkExpressionErrors(e)||i)return r;var o=this.parseSubscripts(r,t,n);return e&&"MemberExpression"===o.type&&(e.parenthesizedAssign>=o.start&&(e.parenthesizedAssign=-1),e.parenthesizedBind>=o.start&&(e.parenthesizedBind=-1)),o},$.parseSubscripts=function(e,t,n,r){for(var i=this.options.ecmaVersion>=8&&"Identifier"===e.type&&"async"===e.name&&this.lastTokEnd==e.end&&!this.canInsertSemicolon()&&"async"===this.input.slice(e.start,e.end),o=void 0;;)if((o=this.eat(E.bracketL))||this.eat(E.dot)){var a=this.startNodeAt(t,n);a.object=e,a.property=o?this.parseExpression():this.parseIdent(!0),a.computed=!!o,o&&this.expect(E.bracketR),e=this.finishNode(a,"MemberExpression")}else if(!r&&this.eat(E.parenL)){var s=new z,u=this.yieldPos,l=this.awaitPos;this.yieldPos=0,this.awaitPos=0;var c=this.parseExprList(E.parenR,this.options.ecmaVersion>=8,!1,s);if(i&&!this.canInsertSemicolon()&&this.eat(E.arrow))return this.checkPatternErrors(s,!1),this.checkYieldAwaitInDefaultParams(),this.yieldPos=u,this.awaitPos=l,this.parseArrowExpression(this.startNodeAt(t,n),c,!0);this.checkExpressionErrors(s,!0),this.yieldPos=u||this.yieldPos,this.awaitPos=l||this.awaitPos;var h=this.startNodeAt(t,n);h.callee=e,h.arguments=c,e=this.finishNode(h,"CallExpression")}else{if(this.type!==E.backQuote)return e;var p=this.startNodeAt(t,n);p.tag=e,p.quasi=this.parseTemplate({isTagged:!0}),e=this.finishNode(p,"TaggedTemplateExpression")}},$.parseExprAtom=function(e){var t,n=this.potentialArrowAt==this.start;switch(this.type){case E._super:return this.inFunction||this.raise(this.start,"'super' outside of function or class"),t=this.startNode(),this.next(),this.type!==E.dot&&this.type!==E.bracketL&&this.type!==E.parenL&&this.unexpected(),this.finishNode(t,"Super");case E._this:return t=this.startNode(),this.next(),this.finishNode(t,"ThisExpression");case E.name:var r=this.start,i=this.startLoc,o=this.containsEsc,a=this.parseIdent(this.type!==E.name);if(this.options.ecmaVersion>=8&&!o&&"async"===a.name&&!this.canInsertSemicolon()&&this.eat(E._function))return this.parseFunction(this.startNodeAt(r,i),!1,!1,!0);if(n&&!this.canInsertSemicolon()){if(this.eat(E.arrow))return this.parseArrowExpression(this.startNodeAt(r,i),[a],!1);if(this.options.ecmaVersion>=8&&"async"===a.name&&this.type===E.name&&!o)return a=this.parseIdent(),!this.canInsertSemicolon()&&this.eat(E.arrow)||this.unexpected(),this.parseArrowExpression(this.startNodeAt(r,i),[a],!0)}return a;case E.regexp:var s=this.value;return(t=this.parseLiteral(s.value)).regex={pattern:s.pattern,flags:s.flags},t;case E.num:case E.string:return this.parseLiteral(this.value);case E._null:case E._true:case E._false:return(t=this.startNode()).value=this.type===E._null?null:this.type===E._true,t.raw=this.type.keyword,this.next(),this.finishNode(t,"Literal");case E.parenL:var u=this.start,l=this.parseParenAndDistinguishExpression(n);return e&&(e.parenthesizedAssign<0&&!this.isSimpleAssignTarget(l)&&(e.parenthesizedAssign=u),e.parenthesizedBind<0&&(e.parenthesizedBind=u)),l;case E.bracketL:return t=this.startNode(),this.next(),t.elements=this.parseExprList(E.bracketR,!0,!0,e),this.finishNode(t,"ArrayExpression");case E.braceL:return this.parseObj(!1,e);case E._function:return t=this.startNode(),this.next(),this.parseFunction(t,!1);case E._class:return this.parseClass(this.startNode(),!1);case E._new:return this.parseNew();case E.backQuote:return this.parseTemplate();default:this.unexpected()}},$.parseLiteral=function(e){var t=this.startNode();return t.value=e,t.raw=this.input.slice(this.start,this.end),this.next(),this.finishNode(t,"Literal")},$.parseParenExpression=function(){this.expect(E.parenL);var e=this.parseExpression();return this.expect(E.parenR),e},$.parseParenAndDistinguishExpression=function(e){var t,n=this.start,r=this.startLoc,i=this.options.ecmaVersion>=8;if(this.options.ecmaVersion>=6){this.next();var o,a=this.start,s=this.startLoc,u=[],l=!0,c=!1,h=new z,p=this.yieldPos,f=this.awaitPos;for(this.yieldPos=0,this.awaitPos=0;this.type!==E.parenR;){if(l?l=!1:this.expect(E.comma),i&&this.afterTrailingComma(E.parenR,!0)){c=!0;break}if(this.type===E.ellipsis){o=this.start,u.push(this.parseParenItem(this.parseRestBinding())),this.type===E.comma&&this.raise(this.start,"Comma is not permitted after the rest element");break}u.push(this.parseMaybeAssign(!1,h,this.parseParenItem))}var d=this.start,m=this.startLoc;if(this.expect(E.parenR),e&&!this.canInsertSemicolon()&&this.eat(E.arrow))return this.checkPatternErrors(h,!1),this.checkYieldAwaitInDefaultParams(),this.yieldPos=p,this.awaitPos=f,this.parseParenArrowList(n,r,u);u.length&&!c||this.unexpected(this.lastTokStart),o&&this.unexpected(o),this.checkExpressionErrors(h,!0),this.yieldPos=p||this.yieldPos,this.awaitPos=f||this.awaitPos,u.length>1?((t=this.startNodeAt(a,s)).expressions=u,this.finishNodeAt(t,"SequenceExpression",d,m)):t=u[0]}else t=this.parseParenExpression();if(this.options.preserveParens){var g=this.startNodeAt(n,r);return g.expression=t,this.finishNode(g,"ParenthesizedExpression")}return t},$.parseParenItem=function(e){return e},$.parseParenArrowList=function(e,t,n){return this.parseArrowExpression(this.startNodeAt(e,t),n)};var Y=[];$.parseNew=function(){var e=this.startNode(),t=this.parseIdent(!0);if(this.options.ecmaVersion>=6&&this.eat(E.dot)){e.meta=t;var n=this.containsEsc;return e.property=this.parseIdent(!0),("target"!==e.property.name||n)&&this.raiseRecoverable(e.property.start,"The only valid meta property for new is new.target"),this.inFunction||this.raiseRecoverable(e.start,"new.target can only be used in functions"),this.finishNode(e,"MetaProperty")}var r=this.start,i=this.startLoc;return e.callee=this.parseSubscripts(this.parseExprAtom(),r,i,!0),this.eat(E.parenL)?e.arguments=this.parseExprList(E.parenR,this.options.ecmaVersion>=8,!1):e.arguments=Y,this.finishNode(e,"NewExpression")},$.parseTemplateElement=function(e){var t=e.isTagged,n=this.startNode();return this.type===E.invalidTemplate?(t||this.raiseRecoverable(this.start,"Bad escape sequence in untagged template literal"),n.value={raw:this.value,cooked:null}):n.value={raw:this.input.slice(this.start,this.end).replace(/\r\n?/g,"\n"),cooked:this.value},this.next(),n.tail=this.type===E.backQuote,this.finishNode(n,"TemplateElement")},$.parseTemplate=function(e){void 0===e&&(e={});var t=e.isTagged;void 0===t&&(t=!1);var n=this.startNode();this.next(),n.expressions=[];var r=this.parseTemplateElement({isTagged:t});for(n.quasis=[r];!r.tail;)this.expect(E.dollarBraceL),n.expressions.push(this.parseExpression()),this.expect(E.braceR),n.quasis.push(r=this.parseTemplateElement({isTagged:t}));return this.next(),this.finishNode(n,"TemplateLiteral")},$.isAsyncProp=function(e){return!e.computed&&"Identifier"===e.key.type&&"async"===e.key.name&&(this.type===E.name||this.type===E.num||this.type===E.string||this.type===E.bracketL||this.type.keyword||this.options.ecmaVersion>=9&&this.type===E.star)&&!w.test(this.input.slice(this.lastTokEnd,this.start))},$.parseObj=function(e,t){var n=this.startNode(),r=!0,i={};for(n.properties=[],this.next();!this.eat(E.braceR);){if(r)r=!1;else if(this.expect(E.comma),this.afterTrailingComma(E.braceR))break;var o=this.parseProperty(e,t);e||this.checkPropClash(o,i,t),n.properties.push(o)}return this.finishNode(n,e?"ObjectPattern":"ObjectExpression")},$.parseProperty=function(e,t){var n,r,i,o,a=this.startNode();if(this.options.ecmaVersion>=9&&this.eat(E.ellipsis))return e?(a.argument=this.parseIdent(!1),this.type===E.comma&&this.raise(this.start,"Comma is not permitted after the rest element"),this.finishNode(a,"RestElement")):(this.type===E.parenL&&t&&(t.parenthesizedAssign<0&&(t.parenthesizedAssign=this.start),t.parenthesizedBind<0&&(t.parenthesizedBind=this.start)),a.argument=this.parseMaybeAssign(!1,t),this.type===E.comma&&t&&t.trailingComma<0&&(t.trailingComma=this.start),this.finishNode(a,"SpreadElement"));this.options.ecmaVersion>=6&&(a.method=!1,a.shorthand=!1,(e||t)&&(i=this.start,o=this.startLoc),e||(n=this.eat(E.star)));var s=this.containsEsc;return this.parsePropertyName(a),!e&&!s&&this.options.ecmaVersion>=8&&!n&&this.isAsyncProp(a)?(r=!0,n=this.options.ecmaVersion>=9&&this.eat(E.star),this.parsePropertyName(a,t)):r=!1,this.parsePropertyValue(a,e,n,r,i,o,t,s),this.finishNode(a,"Property")},$.parsePropertyValue=function(e,t,n,r,i,o,a,s){if((n||r)&&this.type===E.colon&&this.unexpected(),this.eat(E.colon))e.value=t?this.parseMaybeDefault(this.start,this.startLoc):this.parseMaybeAssign(!1,a),e.kind="init";else if(this.options.ecmaVersion>=6&&this.type===E.parenL)t&&this.unexpected(),e.kind="init",e.method=!0,e.value=this.parseMethod(n,r);else if(t||s||!(this.options.ecmaVersion>=5)||e.computed||"Identifier"!==e.key.type||"get"!==e.key.name&&"set"!==e.key.name||this.type==E.comma||this.type==E.braceR)this.options.ecmaVersion>=6&&!e.computed&&"Identifier"===e.key.type?(this.checkUnreserved(e.key),e.kind="init",t?e.value=this.parseMaybeDefault(i,o,e.key):this.type===E.eq&&a?(a.shorthandAssign<0&&(a.shorthandAssign=this.start),e.value=this.parseMaybeDefault(i,o,e.key)):e.value=e.key,e.shorthand=!0):this.unexpected();else{(n||r)&&this.unexpected(),e.kind=e.key.name,this.parsePropertyName(e),e.value=this.parseMethod(!1);var u="get"===e.kind?0:1;if(e.value.params.length!==u){var l=e.value.start;"get"===e.kind?this.raiseRecoverable(l,"getter should have no params"):this.raiseRecoverable(l,"setter should have exactly one param")}else"set"===e.kind&&"RestElement"===e.value.params[0].type&&this.raiseRecoverable(e.value.params[0].start,"Setter cannot use rest params")}},$.parsePropertyName=function(e){if(this.options.ecmaVersion>=6){if(this.eat(E.bracketL))return e.computed=!0,e.key=this.parseMaybeAssign(),this.expect(E.bracketR),e.key;e.computed=!1}return e.key=this.type===E.num||this.type===E.string?this.parseExprAtom():this.parseIdent(!0)},$.initFunction=function(e){e.id=null,this.options.ecmaVersion>=6&&(e.generator=!1,e.expression=!1),this.options.ecmaVersion>=8&&(e.async=!1)},$.parseMethod=function(e,t){var n=this.startNode(),r=this.inGenerator,i=this.inAsync,o=this.yieldPos,a=this.awaitPos,s=this.inFunction;return this.initFunction(n),this.options.ecmaVersion>=6&&(n.generator=e),this.options.ecmaVersion>=8&&(n.async=!!t),this.inGenerator=n.generator,this.inAsync=n.async,this.yieldPos=0,this.awaitPos=0,this.inFunction=!0,this.enterFunctionScope(),this.expect(E.parenL),n.params=this.parseBindingList(E.parenR,!1,this.options.ecmaVersion>=8),this.checkYieldAwaitInDefaultParams(),this.parseFunctionBody(n,!1),this.inGenerator=r,this.inAsync=i,this.yieldPos=o,this.awaitPos=a,this.inFunction=s,this.finishNode(n,"FunctionExpression")},$.parseArrowExpression=function(e,t,n){var r=this.inGenerator,i=this.inAsync,o=this.yieldPos,a=this.awaitPos,s=this.inFunction;return this.enterFunctionScope(),this.initFunction(e),this.options.ecmaVersion>=8&&(e.async=!!n),this.inGenerator=!1,this.inAsync=e.async,this.yieldPos=0,this.awaitPos=0,this.inFunction=!0,e.params=this.toAssignableList(t,!0),this.parseFunctionBody(e,!0),this.inGenerator=r,this.inAsync=i,this.yieldPos=o,this.awaitPos=a,this.inFunction=s,this.finishNode(e,"ArrowFunctionExpression")},$.parseFunctionBody=function(e,t){var n=t&&this.type!==E.braceL,r=this.strict,i=!1;if(n)e.body=this.parseMaybeAssign(),e.expression=!0,this.checkParams(e,!1);else{var o=this.options.ecmaVersion>=7&&!this.isSimpleParamList(e.params);r&&!o||(i=this.strictDirective(this.end))&&o&&this.raiseRecoverable(e.start,"Illegal 'use strict' directive in function with non-simple parameter list");var a=this.labels;this.labels=[],i&&(this.strict=!0),this.checkParams(e,!r&&!i&&!t&&this.isSimpleParamList(e.params)),e.body=this.parseBlock(!1),e.expression=!1,this.adaptDirectivePrologue(e.body.body),this.labels=a}this.exitFunctionScope(),this.strict&&e.id&&this.checkLVal(e.id,"none"),this.strict=r},$.isSimpleParamList=function(e){for(var t=0,n=e;t<n.length;t+=1){if("Identifier"!==n[t].type)return!1}return!0},$.checkParams=function(e,t){for(var n={},r=0,i=e.params;r<i.length;r+=1){var o=i[r];this.checkLVal(o,"var",t?null:n)}},$.parseExprList=function(e,t,n,r){for(var i=[],o=!0;!this.eat(e);){if(o)o=!1;else if(this.expect(E.comma),t&&this.afterTrailingComma(e))break;var a=void 0;n&&this.type===E.comma?a=null:this.type===E.ellipsis?(a=this.parseSpread(r),r&&this.type===E.comma&&r.trailingComma<0&&(r.trailingComma=this.start)):a=this.parseMaybeAssign(!1,r),i.push(a)}return i},$.checkUnreserved=function(e){var t=e.start,n=e.end,r=e.name;(this.inGenerator&&"yield"===r&&this.raiseRecoverable(t,"Can not use 'yield' as identifier inside a generator"),this.inAsync&&"await"===r&&this.raiseRecoverable(t,"Can not use 'await' as identifier inside an async function"),this.isKeyword(r)&&this.raise(t,"Unexpected keyword '"+r+"'"),this.options.ecmaVersion<6&&-1!=this.input.slice(t,n).indexOf("\\"))||(this.strict?this.reservedWordsStrict:this.reservedWords).test(r)&&(this.inAsync||"await"!==r||this.raiseRecoverable(t,"Can not use keyword 'await' outside an async function"),this.raiseRecoverable(t,"The keyword '"+r+"' is reserved"))},$.parseIdent=function(e,t){var n=this.startNode();return e&&"never"==this.options.allowReserved&&(e=!1),this.type===E.name?n.name=this.value:this.type.keyword?(n.name=this.type.keyword,"class"!==n.name&&"function"!==n.name||this.lastTokEnd===this.lastTokStart+1&&46===this.input.charCodeAt(this.lastTokStart)||this.context.pop()):this.unexpected(),this.next(),this.finishNode(n,"Identifier"),e||this.checkUnreserved(n),n},$.parseYield=function(){this.yieldPos||(this.yieldPos=this.start);var e=this.startNode();return this.next(),this.type==E.semi||this.canInsertSemicolon()||this.type!=E.star&&!this.type.startsExpr?(e.delegate=!1,e.argument=null):(e.delegate=this.eat(E.star),e.argument=this.parseMaybeAssign()),this.finishNode(e,"YieldExpression")},$.parseAwait=function(){this.awaitPos||(this.awaitPos=this.start);var e=this.startNode();return this.next(),e.argument=this.parseMaybeUnary(null,!0),this.finishNode(e,"AwaitExpression")};var Z=j.prototype;Z.raise=function(e,t){var n=L(this.input,e);t+=" ("+n.line+":"+n.column+")";var r=new SyntaxError(t);throw r.pos=e,r.loc=n,r.raisedAt=this.pos,r},Z.raiseRecoverable=Z.raise,Z.curPosition=function(){if(this.options.locations)return new R(this.curLine,this.pos-this.lineStart)};var Q=j.prototype,J=Object.assign||function(e){for(var t=[],n=arguments.length-1;n-- >0;)t[n]=arguments[n+1];for(var r=0,i=t;r<i.length;r+=1){var o=i[r];for(var a in o)I(o,a)&&(e[a]=o[a])}return e};Q.enterFunctionScope=function(){this.scopeStack.push({var:{},lexical:{},childVar:{},parentLexical:{}})},Q.exitFunctionScope=function(){this.scopeStack.pop()},Q.enterLexicalScope=function(){var e=this.scopeStack[this.scopeStack.length-1],t={var:{},lexical:{},childVar:{},parentLexical:{}};this.scopeStack.push(t),J(t.parentLexical,e.lexical,e.parentLexical)},Q.exitLexicalScope=function(){var e=this.scopeStack.pop(),t=this.scopeStack[this.scopeStack.length-1];J(t.childVar,e.var,e.childVar)},Q.canDeclareVarName=function(e){var t=this.scopeStack[this.scopeStack.length-1];return!I(t.lexical,e)&&!I(t.parentLexical,e)},Q.canDeclareLexicalName=function(e){var t=this.scopeStack[this.scopeStack.length-1];return!I(t.lexical,e)&&!I(t.var,e)&&!I(t.childVar,e)},Q.declareVarName=function(e){this.scopeStack[this.scopeStack.length-1].var[e]=!0},Q.declareLexicalName=function(e){this.scopeStack[this.scopeStack.length-1].lexical[e]=!0};var ee=function(e,t,n){this.type="",this.start=t,this.end=0,e.options.locations&&(this.loc=new D(e,n)),e.options.directSourceFile&&(this.sourceFile=e.options.directSourceFile),e.options.ranges&&(this.range=[t,0])},te=j.prototype;function ne(e,t,n,r){return e.type=t,e.end=n,this.options.locations&&(e.loc.end=r),this.options.ranges&&(e.range[1]=n),e}te.startNode=function(){return new ee(this,this.start,this.startLoc)},te.startNodeAt=function(e,t){return new ee(this,e,t)},te.finishNode=function(e,t){return ne.call(this,e,t,this.lastTokEnd,this.lastTokEndLoc)},te.finishNodeAt=function(e,t,n,r){return ne.call(this,e,t,n,r)};var re=function(e,t,n,r,i){this.token=e,this.isExpr=!!t,this.preserveSpace=!!n,this.override=r,this.generator=!!i},ie={b_stat:new re("{",!1),b_expr:new re("{",!0),b_tmpl:new re("${",!1),p_stat:new re("(",!1),p_expr:new re("(",!0),q_tmpl:new re("`",!0,!0,function(e){return e.tryReadTemplateToken()}),f_stat:new re("function",!1),f_expr:new re("function",!0),f_expr_gen:new re("function",!0,!1,null,!0),f_gen:new re("function",!1,!1,null,!0)},oe=j.prototype;oe.initialContext=function(){return[ie.b_stat]},oe.braceIsBlock=function(e){var t=this.curContext();return t===ie.f_expr||t===ie.f_stat||(e!==E.colon||t!==ie.b_stat&&t!==ie.b_expr?e===E._return||e==E.name&&this.exprAllowed?w.test(this.input.slice(this.lastTokEnd,this.start)):e===E._else||e===E.semi||e===E.eof||e===E.parenR||e==E.arrow||(e==E.braceL?t===ie.b_stat:e!=E._var&&e!=E.name&&!this.exprAllowed):!t.isExpr)},oe.inGeneratorContext=function(){for(var e=this.context.length-1;e>=1;e--){var t=this.context[e];if("function"===t.token)return t.generator}return!1},oe.updateContext=function(e){var t,n=this.type;n.keyword&&e==E.dot?this.exprAllowed=!1:(t=n.updateContext)?t.call(this,e):this.exprAllowed=n.beforeExpr},E.parenR.updateContext=E.braceR.updateContext=function(){if(1!=this.context.length){var e=this.context.pop();e===ie.b_stat&&"function"===this.curContext().token&&(e=this.context.pop()),this.exprAllowed=!e.isExpr}else this.exprAllowed=!0},E.braceL.updateContext=function(e){this.context.push(this.braceIsBlock(e)?ie.b_stat:ie.b_expr),this.exprAllowed=!0},E.dollarBraceL.updateContext=function(){this.context.push(ie.b_tmpl),this.exprAllowed=!0},E.parenL.updateContext=function(e){var t=e===E._if||e===E._for||e===E._with||e===E._while;this.context.push(t?ie.p_stat:ie.p_expr),this.exprAllowed=!0},E.incDec.updateContext=function(){},E._function.updateContext=E._class.updateContext=function(e){e.beforeExpr&&e!==E.semi&&e!==E._else&&(e!==E.colon&&e!==E.braceL||this.curContext()!==ie.b_stat)?this.context.push(ie.f_expr):this.context.push(ie.f_stat),this.exprAllowed=!1},E.backQuote.updateContext=function(){this.curContext()===ie.q_tmpl?this.context.pop():this.context.push(ie.q_tmpl),this.exprAllowed=!1},E.star.updateContext=function(e){if(e==E._function){var t=this.context.length-1;this.context[t]===ie.f_expr?this.context[t]=ie.f_expr_gen:this.context[t]=ie.f_gen}this.exprAllowed=!0},E.name.updateContext=function(e){var t=!1;this.options.ecmaVersion>=6&&("of"==this.value&&!this.exprAllowed||"yield"==this.value&&this.inGeneratorContext())&&(t=!0),this.exprAllowed=t};var ae={$LONE:["ASCII","ASCII_Hex_Digit","AHex","Alphabetic","Alpha","Any","Assigned","Bidi_Control","Bidi_C","Bidi_Mirrored","Bidi_M","Case_Ignorable","CI","Cased","Changes_When_Casefolded","CWCF","Changes_When_Casemapped","CWCM","Changes_When_Lowercased","CWL","Changes_When_NFKC_Casefolded","CWKCF","Changes_When_Titlecased","CWT","Changes_When_Uppercased","CWU","Dash","Default_Ignorable_Code_Point","DI","Deprecated","Dep","Diacritic","Dia","Emoji","Emoji_Component","Emoji_Modifier","Emoji_Modifier_Base","Emoji_Presentation","Extender","Ext","Grapheme_Base","Gr_Base","Grapheme_Extend","Gr_Ext","Hex_Digit","Hex","IDS_Binary_Operator","IDSB","IDS_Trinary_Operator","IDST","ID_Continue","IDC","ID_Start","IDS","Ideographic","Ideo","Join_Control","Join_C","Logical_Order_Exception","LOE","Lowercase","Lower","Math","Noncharacter_Code_Point","NChar","Pattern_Syntax","Pat_Syn","Pattern_White_Space","Pat_WS","Quotation_Mark","QMark","Radical","Regional_Indicator","RI","Sentence_Terminal","STerm","Soft_Dotted","SD","Terminal_Punctuation","Term","Unified_Ideograph","UIdeo","Uppercase","Upper","Variation_Selector","VS","White_Space","space","XID_Continue","XIDC","XID_Start","XIDS"],General_Category:["Cased_Letter","LC","Close_Punctuation","Pe","Connector_Punctuation","Pc","Control","Cc","cntrl","Currency_Symbol","Sc","Dash_Punctuation","Pd","Decimal_Number","Nd","digit","Enclosing_Mark","Me","Final_Punctuation","Pf","Format","Cf","Initial_Punctuation","Pi","Letter","L","Letter_Number","Nl","Line_Separator","Zl","Lowercase_Letter","Ll","Mark","M","Combining_Mark","Math_Symbol","Sm","Modifier_Letter","Lm","Modifier_Symbol","Sk","Nonspacing_Mark","Mn","Number","N","Open_Punctuation","Ps","Other","C","Other_Letter","Lo","Other_Number","No","Other_Punctuation","Po","Other_Symbol","So","Paragraph_Separator","Zp","Private_Use","Co","Punctuation","P","punct","Separator","Z","Space_Separator","Zs","Spacing_Mark","Mc","Surrogate","Cs","Symbol","S","Titlecase_Letter","Lt","Unassigned","Cn","Uppercase_Letter","Lu"],Script:["Adlam","Adlm","Ahom","Anatolian_Hieroglyphs","Hluw","Arabic","Arab","Armenian","Armn","Avestan","Avst","Balinese","Bali","Bamum","Bamu","Bassa_Vah","Bass","Batak","Batk","Bengali","Beng","Bhaiksuki","Bhks","Bopomofo","Bopo","Brahmi","Brah","Braille","Brai","Buginese","Bugi","Buhid","Buhd","Canadian_Aboriginal","Cans","Carian","Cari","Caucasian_Albanian","Aghb","Chakma","Cakm","Cham","Cherokee","Cher","Common","Zyyy","Coptic","Copt","Qaac","Cuneiform","Xsux","Cypriot","Cprt","Cyrillic","Cyrl","Deseret","Dsrt","Devanagari","Deva","Duployan","Dupl","Egyptian_Hieroglyphs","Egyp","Elbasan","Elba","Ethiopic","Ethi","Georgian","Geor","Glagolitic","Glag","Gothic","Goth","Grantha","Gran","Greek","Grek","Gujarati","Gujr","Gurmukhi","Guru","Han","Hani","Hangul","Hang","Hanunoo","Hano","Hatran","Hatr","Hebrew","Hebr","Hiragana","Hira","Imperial_Aramaic","Armi","Inherited","Zinh","Qaai","Inscriptional_Pahlavi","Phli","Inscriptional_Parthian","Prti","Javanese","Java","Kaithi","Kthi","Kannada","Knda","Katakana","Kana","Kayah_Li","Kali","Kharoshthi","Khar","Khmer","Khmr","Khojki","Khoj","Khudawadi","Sind","Lao","Laoo","Latin","Latn","Lepcha","Lepc","Limbu","Limb","Linear_A","Lina","Linear_B","Linb","Lisu","Lycian","Lyci","Lydian","Lydi","Mahajani","Mahj","Malayalam","Mlym","Mandaic","Mand","Manichaean","Mani","Marchen","Marc","Masaram_Gondi","Gonm","Meetei_Mayek","Mtei","Mende_Kikakui","Mend","Meroitic_Cursive","Merc","Meroitic_Hieroglyphs","Mero","Miao","Plrd","Modi","Mongolian","Mong","Mro","Mroo","Multani","Mult","Myanmar","Mymr","Nabataean","Nbat","New_Tai_Lue","Talu","Newa","Nko","Nkoo","Nushu","Nshu","Ogham","Ogam","Ol_Chiki","Olck","Old_Hungarian","Hung","Old_Italic","Ital","Old_North_Arabian","Narb","Old_Permic","Perm","Old_Persian","Xpeo","Old_South_Arabian","Sarb","Old_Turkic","Orkh","Oriya","Orya","Osage","Osge","Osmanya","Osma","Pahawh_Hmong","Hmng","Palmyrene","Palm","Pau_Cin_Hau","Pauc","Phags_Pa","Phag","Phoenician","Phnx","Psalter_Pahlavi","Phlp","Rejang","Rjng","Runic","Runr","Samaritan","Samr","Saurashtra","Saur","Sharada","Shrd","Shavian","Shaw","Siddham","Sidd","SignWriting","Sgnw","Sinhala","Sinh","Sora_Sompeng","Sora","Soyombo","Soyo","Sundanese","Sund","Syloti_Nagri","Sylo","Syriac","Syrc","Tagalog","Tglg","Tagbanwa","Tagb","Tai_Le","Tale","Tai_Tham","Lana","Tai_Viet","Tavt","Takri","Takr","Tamil","Taml","Tangut","Tang","Telugu","Telu","Thaana","Thaa","Thai","Tibetan","Tibt","Tifinagh","Tfng","Tirhuta","Tirh","Ugaritic","Ugar","Vai","Vaii","Warang_Citi","Wara","Yi","Yiii","Zanabazar_Square","Zanb"]};Array.prototype.push.apply(ae.$LONE,ae.General_Category),ae.gc=ae.General_Category,ae.sc=ae.Script_Extensions=ae.scx=ae.Script;var se=j.prototype,ue=function(e){this.parser=e,this.validFlags="gim"+(e.options.ecmaVersion>=6?"uy":"")+(e.options.ecmaVersion>=9?"s":""),this.source="",this.flags="",this.start=0,this.switchU=!1,this.switchN=!1,this.pos=0,this.lastIntValue=0,this.lastStringValue="",this.lastAssertionIsQuantifiable=!1,this.numCapturingParens=0,this.maxBackReference=0,this.groupNames=[],this.backReferenceNames=[]};function le(e){return e<=65535?String.fromCharCode(e):(e-=65536,String.fromCharCode(55296+(e>>10),56320+(1023&e)))}function ce(e){return 36===e||e>=40&&e<=43||46===e||63===e||e>=91&&e<=94||e>=123&&e<=125}function he(e){return e>=65&&e<=90||e>=97&&e<=122}function pe(e){return he(e)||95===e}function fe(e){return pe(e)||de(e)}function de(e){return e>=48&&e<=57}function me(e){return e>=48&&e<=57||e>=65&&e<=70||e>=97&&e<=102}function ge(e){return e>=65&&e<=70?e-65+10:e>=97&&e<=102?e-97+10:e-48}function ve(e){return e>=48&&e<=55}ue.prototype.reset=function(e,t,n){var r=-1!==n.indexOf("u");this.start=0|e,this.source=t+"",this.flags=n,this.switchU=r&&this.parser.options.ecmaVersion>=6,this.switchN=r&&this.parser.options.ecmaVersion>=9},ue.prototype.raise=function(e){this.parser.raiseRecoverable(this.start,"Invalid regular expression: /"+this.source+"/: "+e)},ue.prototype.at=function(e){var t=this.source,n=t.length;if(e>=n)return-1;var r=t.charCodeAt(e);return!this.switchU||r<=55295||r>=57344||e+1>=n?r:(r<<10)+t.charCodeAt(e+1)-56613888},ue.prototype.nextIndex=function(e){var t=this.source,n=t.length;if(e>=n)return n;var r=t.charCodeAt(e);return!this.switchU||r<=55295||r>=57344||e+1>=n?e+1:e+2},ue.prototype.current=function(){return this.at(this.pos)},ue.prototype.lookahead=function(){return this.at(this.nextIndex(this.pos))},ue.prototype.advance=function(){this.pos=this.nextIndex(this.pos)},ue.prototype.eat=function(e){return this.current()===e&&(this.advance(),!0)},se.validateRegExpFlags=function(e){for(var t=e.validFlags,n=e.flags,r=0;r<n.length;r++){var i=n.charAt(r);-1==t.indexOf(i)&&this.raise(e.start,"Invalid regular expression flag"),n.indexOf(i,r+1)>-1&&this.raise(e.start,"Duplicate regular expression flag")}},se.validateRegExpPattern=function(e){this.regexp_pattern(e),!e.switchN&&this.options.ecmaVersion>=9&&e.groupNames.length>0&&(e.switchN=!0,this.regexp_pattern(e))},se.regexp_pattern=function(e){e.pos=0,e.lastIntValue=0,e.lastStringValue="",e.lastAssertionIsQuantifiable=!1,e.numCapturingParens=0,e.maxBackReference=0,e.groupNames.length=0,e.backReferenceNames.length=0,this.regexp_disjunction(e),e.pos!==e.source.length&&(e.eat(41)&&e.raise("Unmatched ')'"),(e.eat(93)||e.eat(125))&&e.raise("Lone quantifier brackets")),e.maxBackReference>e.numCapturingParens&&e.raise("Invalid escape");for(var t=0,n=e.backReferenceNames;t<n.length;t+=1){var r=n[t];-1===e.groupNames.indexOf(r)&&e.raise("Invalid named capture referenced")}},se.regexp_disjunction=function(e){for(this.regexp_alternative(e);e.eat(124);)this.regexp_alternative(e);this.regexp_eatQuantifier(e,!0)&&e.raise("Nothing to repeat"),e.eat(123)&&e.raise("Lone quantifier brackets")},se.regexp_alternative=function(e){for(;e.pos<e.source.length&&this.regexp_eatTerm(e););},se.regexp_eatTerm=function(e){return this.regexp_eatAssertion(e)?(e.lastAssertionIsQuantifiable&&this.regexp_eatQuantifier(e)&&e.switchU&&e.raise("Invalid quantifier"),!0):!(e.switchU?!this.regexp_eatAtom(e):!this.regexp_eatExtendedAtom(e))&&(this.regexp_eatQuantifier(e),!0)},se.regexp_eatAssertion=function(e){var t=e.pos;if(e.lastAssertionIsQuantifiable=!1,e.eat(94)||e.eat(36))return!0;if(e.eat(92)){if(e.eat(66)||e.eat(98))return!0;e.pos=t}if(e.eat(40)&&e.eat(63)){var n=!1;if(this.options.ecmaVersion>=9&&(n=e.eat(60)),e.eat(61)||e.eat(33))return this.regexp_disjunction(e),e.eat(41)||e.raise("Unterminated group"),e.lastAssertionIsQuantifiable=!n,!0}return e.pos=t,!1},se.regexp_eatQuantifier=function(e,t){return void 0===t&&(t=!1),!!this.regexp_eatQuantifierPrefix(e,t)&&(e.eat(63),!0)},se.regexp_eatQuantifierPrefix=function(e,t){return e.eat(42)||e.eat(43)||e.eat(63)||this.regexp_eatBracedQuantifier(e,t)},se.regexp_eatBracedQuantifier=function(e,t){var n=e.pos;if(e.eat(123)){var r=0,i=-1;if(this.regexp_eatDecimalDigits(e)&&(r=e.lastIntValue,e.eat(44)&&this.regexp_eatDecimalDigits(e)&&(i=e.lastIntValue),e.eat(125)))return-1!==i&&i<r&&!t&&e.raise("numbers out of order in {} quantifier"),!0;e.switchU&&!t&&e.raise("Incomplete quantifier"),e.pos=n}return!1},se.regexp_eatAtom=function(e){return this.regexp_eatPatternCharacters(e)||e.eat(46)||this.regexp_eatReverseSolidusAtomEscape(e)||this.regexp_eatCharacterClass(e)||this.regexp_eatUncapturingGroup(e)||this.regexp_eatCapturingGroup(e)},se.regexp_eatReverseSolidusAtomEscape=function(e){var t=e.pos;if(e.eat(92)){if(this.regexp_eatAtomEscape(e))return!0;e.pos=t}return!1},se.regexp_eatUncapturingGroup=function(e){var t=e.pos;if(e.eat(40)){if(e.eat(63)&&e.eat(58)){if(this.regexp_disjunction(e),e.eat(41))return!0;e.raise("Unterminated group")}e.pos=t}return!1},se.regexp_eatCapturingGroup=function(e){if(e.eat(40)){if(this.options.ecmaVersion>=9?this.regexp_groupSpecifier(e):63===e.current()&&e.raise("Invalid group"),this.regexp_disjunction(e),e.eat(41))return e.numCapturingParens+=1,!0;e.raise("Unterminated group")}return!1},se.regexp_eatExtendedAtom=function(e){return e.eat(46)||this.regexp_eatReverseSolidusAtomEscape(e)||this.regexp_eatCharacterClass(e)||this.regexp_eatUncapturingGroup(e)||this.regexp_eatCapturingGroup(e)||this.regexp_eatInvalidBracedQuantifier(e)||this.regexp_eatExtendedPatternCharacter(e)},se.regexp_eatInvalidBracedQuantifier=function(e){return this.regexp_eatBracedQuantifier(e,!0)&&e.raise("Nothing to repeat"),!1},se.regexp_eatSyntaxCharacter=function(e){var t=e.current();return!!ce(t)&&(e.lastIntValue=t,e.advance(),!0)},se.regexp_eatPatternCharacters=function(e){for(var t=e.pos,n=0;-1!==(n=e.current())&&!ce(n);)e.advance();return e.pos!==t},se.regexp_eatExtendedPatternCharacter=function(e){var t=e.current();return!(-1===t||36===t||t>=40&&t<=43||46===t||63===t||91===t||94===t||124===t)&&(e.advance(),!0)},se.regexp_groupSpecifier=function(e){if(e.eat(63)){if(this.regexp_eatGroupName(e))return-1!==e.groupNames.indexOf(e.lastStringValue)&&e.raise("Duplicate capture group name"),void e.groupNames.push(e.lastStringValue);e.raise("Invalid group")}},se.regexp_eatGroupName=function(e){if(e.lastStringValue="",e.eat(60)){if(this.regexp_eatRegExpIdentifierName(e)&&e.eat(62))return!0;e.raise("Invalid capture group name")}return!1},se.regexp_eatRegExpIdentifierName=function(e){if(e.lastStringValue="",this.regexp_eatRegExpIdentifierStart(e)){for(e.lastStringValue+=le(e.lastIntValue);this.regexp_eatRegExpIdentifierPart(e);)e.lastStringValue+=le(e.lastIntValue);return!0}return!1},se.regexp_eatRegExpIdentifierStart=function(e){var t=e.pos,n=e.current();return e.advance(),92===n&&this.regexp_eatRegExpUnicodeEscapeSequence(e)&&(n=e.lastIntValue),function(e){return d(e,!0)||36===e||95===e}(n)?(e.lastIntValue=n,!0):(e.pos=t,!1)},se.regexp_eatRegExpIdentifierPart=function(e){var t=e.pos,n=e.current();return e.advance(),92===n&&this.regexp_eatRegExpUnicodeEscapeSequence(e)&&(n=e.lastIntValue),function(e){return m(e,!0)||36===e||95===e||8204===e||8205===e}(n)?(e.lastIntValue=n,!0):(e.pos=t,!1)},se.regexp_eatAtomEscape=function(e){return!!(this.regexp_eatBackReference(e)||this.regexp_eatCharacterClassEscape(e)||this.regexp_eatCharacterEscape(e)||e.switchN&&this.regexp_eatKGroupName(e))||(e.switchU&&(99===e.current()&&e.raise("Invalid unicode escape"),e.raise("Invalid escape")),!1)},se.regexp_eatBackReference=function(e){var t=e.pos;if(this.regexp_eatDecimalEscape(e)){var n=e.lastIntValue;if(e.switchU)return n>e.maxBackReference&&(e.maxBackReference=n),!0;if(n<=e.numCapturingParens)return!0;e.pos=t}return!1},se.regexp_eatKGroupName=function(e){if(e.eat(107)){if(this.regexp_eatGroupName(e))return e.backReferenceNames.push(e.lastStringValue),!0;e.raise("Invalid named reference")}return!1},se.regexp_eatCharacterEscape=function(e){return this.regexp_eatControlEscape(e)||this.regexp_eatCControlLetter(e)||this.regexp_eatZero(e)||this.regexp_eatHexEscapeSequence(e)||this.regexp_eatRegExpUnicodeEscapeSequence(e)||!e.switchU&&this.regexp_eatLegacyOctalEscapeSequence(e)||this.regexp_eatIdentityEscape(e)},se.regexp_eatCControlLetter=function(e){var t=e.pos;if(e.eat(99)){if(this.regexp_eatControlLetter(e))return!0;e.pos=t}return!1},se.regexp_eatZero=function(e){return 48===e.current()&&!de(e.lookahead())&&(e.lastIntValue=0,e.advance(),!0)},se.regexp_eatControlEscape=function(e){var t=e.current();return 116===t?(e.lastIntValue=9,e.advance(),!0):110===t?(e.lastIntValue=10,e.advance(),!0):118===t?(e.lastIntValue=11,e.advance(),!0):102===t?(e.lastIntValue=12,e.advance(),!0):114===t&&(e.lastIntValue=13,e.advance(),!0)},se.regexp_eatControlLetter=function(e){var t=e.current();return!!he(t)&&(e.lastIntValue=t%32,e.advance(),!0)},se.regexp_eatRegExpUnicodeEscapeSequence=function(e){var t,n=e.pos;if(e.eat(117)){if(this.regexp_eatFixedHexDigits(e,4)){var r=e.lastIntValue;if(e.switchU&&r>=55296&&r<=56319){var i=e.pos;if(e.eat(92)&&e.eat(117)&&this.regexp_eatFixedHexDigits(e,4)){var o=e.lastIntValue;if(o>=56320&&o<=57343)return e.lastIntValue=1024*(r-55296)+(o-56320)+65536,!0}e.pos=i,e.lastIntValue=r}return!0}if(e.switchU&&e.eat(123)&&this.regexp_eatHexDigits(e)&&e.eat(125)&&((t=e.lastIntValue)>=0&&t<=1114111))return!0;e.switchU&&e.raise("Invalid unicode escape"),e.pos=n}return!1},se.regexp_eatIdentityEscape=function(e){if(e.switchU)return!!this.regexp_eatSyntaxCharacter(e)||!!e.eat(47)&&(e.lastIntValue=47,!0);var t=e.current();return!(99===t||e.switchN&&107===t)&&(e.lastIntValue=t,e.advance(),!0)},se.regexp_eatDecimalEscape=function(e){e.lastIntValue=0;var t=e.current();if(t>=49&&t<=57){do{e.lastIntValue=10*e.lastIntValue+(t-48),e.advance()}while((t=e.current())>=48&&t<=57);return!0}return!1},se.regexp_eatCharacterClassEscape=function(e){var t=e.current();if(function(e){return 100===e||68===e||115===e||83===e||119===e||87===e}(t))return e.lastIntValue=-1,e.advance(),!0;if(e.switchU&&this.options.ecmaVersion>=9&&(80===t||112===t)){if(e.lastIntValue=-1,e.advance(),e.eat(123)&&this.regexp_eatUnicodePropertyValueExpression(e)&&e.eat(125))return!0;e.raise("Invalid property name")}return!1},se.regexp_eatUnicodePropertyValueExpression=function(e){var t=e.pos;if(this.regexp_eatUnicodePropertyName(e)&&e.eat(61)){var n=e.lastStringValue;if(this.regexp_eatUnicodePropertyValue(e)){var r=e.lastStringValue;return this.regexp_validateUnicodePropertyNameAndValue(e,n,r),!0}}if(e.pos=t,this.regexp_eatLoneUnicodePropertyNameOrValue(e)){var i=e.lastStringValue;return this.regexp_validateUnicodePropertyNameOrValue(e,i),!0}return!1},se.regexp_validateUnicodePropertyNameAndValue=function(e,t,n){ae.hasOwnProperty(t)&&-1!==ae[t].indexOf(n)||e.raise("Invalid property name")},se.regexp_validateUnicodePropertyNameOrValue=function(e,t){-1===ae.$LONE.indexOf(t)&&e.raise("Invalid property name")},se.regexp_eatUnicodePropertyName=function(e){var t=0;for(e.lastStringValue="";pe(t=e.current());)e.lastStringValue+=le(t),e.advance();return""!==e.lastStringValue},se.regexp_eatUnicodePropertyValue=function(e){var t=0;for(e.lastStringValue="";fe(t=e.current());)e.lastStringValue+=le(t),e.advance();return""!==e.lastStringValue},se.regexp_eatLoneUnicodePropertyNameOrValue=function(e){return this.regexp_eatUnicodePropertyValue(e)},se.regexp_eatCharacterClass=function(e){if(e.eat(91)){if(e.eat(94),this.regexp_classRanges(e),e.eat(93))return!0;e.raise("Unterminated character class")}return!1},se.regexp_classRanges=function(e){for(;this.regexp_eatClassAtom(e);){var t=e.lastIntValue;if(e.eat(45)&&this.regexp_eatClassAtom(e)){var n=e.lastIntValue;!e.switchU||-1!==t&&-1!==n||e.raise("Invalid character class"),-1!==t&&-1!==n&&t>n&&e.raise("Range out of order in character class")}}},se.regexp_eatClassAtom=function(e){var t=e.pos;if(e.eat(92)){if(this.regexp_eatClassEscape(e))return!0;if(e.switchU){var n=e.current();(99===n||ve(n))&&e.raise("Invalid class escape"),e.raise("Invalid escape")}e.pos=t}var r=e.current();return 93!==r&&(e.lastIntValue=r,e.advance(),!0)},se.regexp_eatClassEscape=function(e){var t=e.pos;if(e.eat(98))return e.lastIntValue=8,!0;if(e.switchU&&e.eat(45))return e.lastIntValue=45,!0;if(!e.switchU&&e.eat(99)){if(this.regexp_eatClassControlLetter(e))return!0;e.pos=t}return this.regexp_eatCharacterClassEscape(e)||this.regexp_eatCharacterEscape(e)},se.regexp_eatClassControlLetter=function(e){var t=e.current();return!(!de(t)&&95!==t)&&(e.lastIntValue=t%32,e.advance(),!0)},se.regexp_eatHexEscapeSequence=function(e){var t=e.pos;if(e.eat(120)){if(this.regexp_eatFixedHexDigits(e,2))return!0;e.switchU&&e.raise("Invalid escape"),e.pos=t}return!1},se.regexp_eatDecimalDigits=function(e){var t=e.pos,n=0;for(e.lastIntValue=0;de(n=e.current());)e.lastIntValue=10*e.lastIntValue+(n-48),e.advance();return e.pos!==t},se.regexp_eatHexDigits=function(e){var t=e.pos,n=0;for(e.lastIntValue=0;me(n=e.current());)e.lastIntValue=16*e.lastIntValue+ge(n),e.advance();return e.pos!==t},se.regexp_eatLegacyOctalEscapeSequence=function(e){if(this.regexp_eatOctalDigit(e)){var t=e.lastIntValue;if(this.regexp_eatOctalDigit(e)){var n=e.lastIntValue;t<=3&&this.regexp_eatOctalDigit(e)?e.lastIntValue=64*t+8*n+e.lastIntValue:e.lastIntValue=8*t+n}else e.lastIntValue=t;return!0}return!1},se.regexp_eatOctalDigit=function(e){var t=e.current();return ve(t)?(e.lastIntValue=t-48,e.advance(),!0):(e.lastIntValue=0,!1)},se.regexp_eatFixedHexDigits=function(e,t){var n=e.pos;e.lastIntValue=0;for(var r=0;r<t;++r){var i=e.current();if(!me(i))return e.pos=n,!1;e.lastIntValue=16*e.lastIntValue+ge(i),e.advance()}return!0};var ye=function(e){this.type=e.type,this.value=e.value,this.start=e.start,this.end=e.end,e.options.locations&&(this.loc=new D(e,e.startLoc,e.endLoc)),e.options.ranges&&(this.range=[e.start,e.end])},be=j.prototype;function xe(e){return e<=65535?String.fromCharCode(e):(e-=65536,String.fromCharCode(55296+(e>>10),56320+(1023&e)))}be.next=function(){this.options.onToken&&this.options.onToken(new ye(this)),this.lastTokEnd=this.end,this.lastTokStart=this.start,this.lastTokEndLoc=this.endLoc,this.lastTokStartLoc=this.startLoc,this.nextToken()},be.getToken=function(){return this.next(),new ye(this)},"undefined"!=typeof Symbol&&(be[Symbol.iterator]=function(){var e=this;return{next:function(){var t=e.getToken();return{done:t.type===E.eof,value:t}}}}),be.curContext=function(){return this.context[this.context.length-1]},be.nextToken=function(){var e=this.curContext();return e&&e.preserveSpace||this.skipSpace(),this.start=this.pos,this.options.locations&&(this.startLoc=this.curPosition()),this.pos>=this.input.length?this.finishToken(E.eof):e.override?e.override(this):void this.readToken(this.fullCharCodeAtPos())},be.readToken=function(e){return d(e,this.options.ecmaVersion>=6)||92===e?this.readWord():this.getTokenFromCode(e)},be.fullCharCodeAtPos=function(){var e=this.input.charCodeAt(this.pos);return e<=55295||e>=57344?e:(e<<10)+this.input.charCodeAt(this.pos+1)-56613888},be.skipBlockComment=function(){var e,t=this.options.onComment&&this.curPosition(),n=this.pos,r=this.input.indexOf("*/",this.pos+=2);if(-1===r&&this.raise(this.pos-2,"Unterminated comment"),this.pos=r+2,this.options.locations)for(S.lastIndex=n;(e=S.exec(this.input))&&e.index<this.pos;)++this.curLine,this.lineStart=e.index+e[0].length;this.options.onComment&&this.options.onComment(!0,this.input.slice(n+2,r),n,this.pos,t,this.curPosition())},be.skipLineComment=function(e){for(var t=this.pos,n=this.options.onComment&&this.curPosition(),r=this.input.charCodeAt(this.pos+=e);this.pos<this.input.length&&!T(r);)r=this.input.charCodeAt(++this.pos);this.options.onComment&&this.options.onComment(!1,this.input.slice(t+e,this.pos),t,this.pos,n,this.curPosition())},be.skipSpace=function(){e:for(;this.pos<this.input.length;){var e=this.input.charCodeAt(this.pos);switch(e){case 32:case 160:++this.pos;break;case 13:10===this.input.charCodeAt(this.pos+1)&&++this.pos;case 10:case 8232:case 8233:++this.pos,this.options.locations&&(++this.curLine,this.lineStart=this.pos);break;case 47:switch(this.input.charCodeAt(this.pos+1)){case 42:this.skipBlockComment();break;case 47:this.skipLineComment(2);break;default:break e}break;default:if(!(e>8&&e<14||e>=5760&&k.test(String.fromCharCode(e))))break e;++this.pos}}},be.finishToken=function(e,t){this.end=this.pos,this.options.locations&&(this.endLoc=this.curPosition());var n=this.type;this.type=e,this.value=t,this.updateContext(n)},be.readToken_dot=function(){var e=this.input.charCodeAt(this.pos+1);if(e>=48&&e<=57)return this.readNumber(!0);var t=this.input.charCodeAt(this.pos+2);return this.options.ecmaVersion>=6&&46===e&&46===t?(this.pos+=3,this.finishToken(E.ellipsis)):(++this.pos,this.finishToken(E.dot))},be.readToken_slash=function(){var e=this.input.charCodeAt(this.pos+1);return this.exprAllowed?(++this.pos,this.readRegexp()):61===e?this.finishOp(E.assign,2):this.finishOp(E.slash,1)},be.readToken_mult_modulo_exp=function(e){var t=this.input.charCodeAt(this.pos+1),n=1,r=42===e?E.star:E.modulo;return this.options.ecmaVersion>=7&&42==e&&42===t&&(++n,r=E.starstar,t=this.input.charCodeAt(this.pos+2)),61===t?this.finishOp(E.assign,n+1):this.finishOp(r,n)},be.readToken_pipe_amp=function(e){var t=this.input.charCodeAt(this.pos+1);return t===e?this.finishOp(124===e?E.logicalOR:E.logicalAND,2):61===t?this.finishOp(E.assign,2):this.finishOp(124===e?E.bitwiseOR:E.bitwiseAND,1)},be.readToken_caret=function(){return 61===this.input.charCodeAt(this.pos+1)?this.finishOp(E.assign,2):this.finishOp(E.bitwiseXOR,1)},be.readToken_plus_min=function(e){var t=this.input.charCodeAt(this.pos+1);return t===e?45!=t||this.inModule||62!=this.input.charCodeAt(this.pos+2)||0!==this.lastTokEnd&&!w.test(this.input.slice(this.lastTokEnd,this.pos))?this.finishOp(E.incDec,2):(this.skipLineComment(3),this.skipSpace(),this.nextToken()):61===t?this.finishOp(E.assign,2):this.finishOp(E.plusMin,1)},be.readToken_lt_gt=function(e){var t=this.input.charCodeAt(this.pos+1),n=1;return t===e?(n=62===e&&62===this.input.charCodeAt(this.pos+2)?3:2,61===this.input.charCodeAt(this.pos+n)?this.finishOp(E.assign,n+1):this.finishOp(E.bitShift,n)):33!=t||60!=e||this.inModule||45!=this.input.charCodeAt(this.pos+2)||45!=this.input.charCodeAt(this.pos+3)?(61===t&&(n=2),this.finishOp(E.relational,n)):(this.skipLineComment(4),this.skipSpace(),this.nextToken())},be.readToken_eq_excl=function(e){var t=this.input.charCodeAt(this.pos+1);return 61===t?this.finishOp(E.equality,61===this.input.charCodeAt(this.pos+2)?3:2):61===e&&62===t&&this.options.ecmaVersion>=6?(this.pos+=2,this.finishToken(E.arrow)):this.finishOp(61===e?E.eq:E.prefix,1)},be.getTokenFromCode=function(e){switch(e){case 46:return this.readToken_dot();case 40:return++this.pos,this.finishToken(E.parenL);case 41:return++this.pos,this.finishToken(E.parenR);case 59:return++this.pos,this.finishToken(E.semi);case 44:return++this.pos,this.finishToken(E.comma);case 91:return++this.pos,this.finishToken(E.bracketL);case 93:return++this.pos,this.finishToken(E.bracketR);case 123:return++this.pos,this.finishToken(E.braceL);case 125:return++this.pos,this.finishToken(E.braceR);case 58:return++this.pos,this.finishToken(E.colon);case 63:return++this.pos,this.finishToken(E.question);case 96:if(this.options.ecmaVersion<6)break;return++this.pos,this.finishToken(E.backQuote);case 48:var t=this.input.charCodeAt(this.pos+1);if(120===t||88===t)return this.readRadixNumber(16);if(this.options.ecmaVersion>=6){if(111===t||79===t)return this.readRadixNumber(8);if(98===t||66===t)return this.readRadixNumber(2)}case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return this.readNumber(!1);case 34:case 39:return this.readString(e);case 47:return this.readToken_slash();case 37:case 42:return this.readToken_mult_modulo_exp(e);case 124:case 38:return this.readToken_pipe_amp(e);case 94:return this.readToken_caret();case 43:case 45:return this.readToken_plus_min(e);case 60:case 62:return this.readToken_lt_gt(e);case 61:case 33:return this.readToken_eq_excl(e);case 126:return this.finishOp(E.prefix,1)}this.raise(this.pos,"Unexpected character '"+xe(e)+"'")},be.finishOp=function(e,t){var n=this.input.slice(this.pos,this.pos+t);return this.pos+=t,this.finishToken(e,n)},be.readRegexp=function(){for(var e,t,n=this.pos;;){this.pos>=this.input.length&&this.raise(n,"Unterminated regular expression");var r=this.input.charAt(this.pos);if(w.test(r)&&this.raise(n,"Unterminated regular expression"),e)e=!1;else{if("["===r)t=!0;else if("]"===r&&t)t=!1;else if("/"===r&&!t)break;e="\\"===r}++this.pos}var i=this.input.slice(n,this.pos);++this.pos;var o=this.pos,a=this.readWord1();this.containsEsc&&this.unexpected(o);var s=this.regexpState||(this.regexpState=new ue(this));s.reset(n,i,a),this.validateRegExpFlags(s),this.validateRegExpPattern(s);var u=null;try{u=new RegExp(i,a)}catch(e){}return this.finishToken(E.regexp,{pattern:i,flags:a,value:u})},be.readInt=function(e,t){for(var n=this.pos,r=0,i=0,o=null==t?1/0:t;i<o;++i){var a=this.input.charCodeAt(this.pos),s=void 0;if((s=a>=97?a-97+10:a>=65?a-65+10:a>=48&&a<=57?a-48:1/0)>=e)break;++this.pos,r=r*e+s}return this.pos===n||null!=t&&this.pos-n!==t?null:r},be.readRadixNumber=function(e){this.pos+=2;var t=this.readInt(e);return null==t&&this.raise(this.start+2,"Expected number in radix "+e),d(this.fullCharCodeAtPos())&&this.raise(this.pos,"Identifier directly after number"),this.finishToken(E.num,t)},be.readNumber=function(e){var t=this.pos;e||null!==this.readInt(10)||this.raise(t,"Invalid number");var n=this.pos-t>=2&&48===this.input.charCodeAt(t);n&&this.strict&&this.raise(t,"Invalid number"),n&&/[89]/.test(this.input.slice(t,this.pos))&&(n=!1);var r=this.input.charCodeAt(this.pos);46!==r||n||(++this.pos,this.readInt(10),r=this.input.charCodeAt(this.pos)),69!==r&&101!==r||n||(43!==(r=this.input.charCodeAt(++this.pos))&&45!==r||++this.pos,null===this.readInt(10)&&this.raise(t,"Invalid number")),d(this.fullCharCodeAtPos())&&this.raise(this.pos,"Identifier directly after number");var i=this.input.slice(t,this.pos),o=n?parseInt(i,8):parseFloat(i);return this.finishToken(E.num,o)},be.readCodePoint=function(){var e;if(123===this.input.charCodeAt(this.pos)){this.options.ecmaVersion<6&&this.unexpected();var t=++this.pos;e=this.readHexChar(this.input.indexOf("}",this.pos)-this.pos),++this.pos,e>1114111&&this.invalidStringToken(t,"Code point out of bounds")}else e=this.readHexChar(4);return e},be.readString=function(e){for(var t="",n=++this.pos;;){this.pos>=this.input.length&&this.raise(this.start,"Unterminated string constant");var r=this.input.charCodeAt(this.pos);if(r===e)break;92===r?(t+=this.input.slice(n,this.pos),t+=this.readEscapedChar(!1),n=this.pos):(T(r)&&this.raise(this.start,"Unterminated string constant"),++this.pos)}return t+=this.input.slice(n,this.pos++),this.finishToken(E.string,t)};var _e={};be.tryReadTemplateToken=function(){this.inTemplateElement=!0;try{this.readTmplToken()}catch(e){if(e!==_e)throw e;this.readInvalidTemplateToken()}this.inTemplateElement=!1},be.invalidStringToken=function(e,t){if(this.inTemplateElement&&this.options.ecmaVersion>=9)throw _e;this.raise(e,t)},be.readTmplToken=function(){for(var e="",t=this.pos;;){this.pos>=this.input.length&&this.raise(this.start,"Unterminated template");var n=this.input.charCodeAt(this.pos);if(96===n||36===n&&123===this.input.charCodeAt(this.pos+1))return this.pos!==this.start||this.type!==E.template&&this.type!==E.invalidTemplate?(e+=this.input.slice(t,this.pos),this.finishToken(E.template,e)):36===n?(this.pos+=2,this.finishToken(E.dollarBraceL)):(++this.pos,this.finishToken(E.backQuote));if(92===n)e+=this.input.slice(t,this.pos),e+=this.readEscapedChar(!0),t=this.pos;else if(T(n)){switch(e+=this.input.slice(t,this.pos),++this.pos,n){case 13:10===this.input.charCodeAt(this.pos)&&++this.pos;case 10:e+="\n";break;default:e+=String.fromCharCode(n)}this.options.locations&&(++this.curLine,this.lineStart=this.pos),t=this.pos}else++this.pos}},be.readInvalidTemplateToken=function(){for(;this.pos<this.input.length;this.pos++)switch(this.input[this.pos]){case"\\":++this.pos;break;case"$":if("{"!==this.input[this.pos+1])break;case"`":return this.finishToken(E.invalidTemplate,this.input.slice(this.start,this.pos))}this.raise(this.start,"Unterminated template")},be.readEscapedChar=function(e){var t=this.input.charCodeAt(++this.pos);switch(++this.pos,t){case 110:return"\n";case 114:return"\r";case 120:return String.fromCharCode(this.readHexChar(2));case 117:return xe(this.readCodePoint());case 116:return"\t";case 98:return"\b";case 118:return"\v";case 102:return"\f";case 13:10===this.input.charCodeAt(this.pos)&&++this.pos;case 10:return this.options.locations&&(this.lineStart=this.pos,++this.curLine),"";default:if(t>=48&&t<=55){var n=this.input.substr(this.pos-1,3).match(/^[0-7]+/)[0],r=parseInt(n,8);return r>255&&(n=n.slice(0,-1),r=parseInt(n,8)),this.pos+=n.length-1,t=this.input.charCodeAt(this.pos),"0"===n&&56!=t&&57!=t||!this.strict&&!e||this.invalidStringToken(this.pos-1-n.length,e?"Octal literal in template string":"Octal literal in strict mode"),String.fromCharCode(r)}return String.fromCharCode(t)}},be.readHexChar=function(e){var t=this.pos,n=this.readInt(16,e);return null===n&&this.invalidStringToken(t,"Bad character escape sequence"),n},be.readWord1=function(){this.containsEsc=!1;for(var e="",t=!0,n=this.pos,r=this.options.ecmaVersion>=6;this.pos<this.input.length;){var i=this.fullCharCodeAtPos();if(m(i,r))this.pos+=i<=65535?1:2;else{if(92!==i)break;this.containsEsc=!0,e+=this.input.slice(n,this.pos);var o=this.pos;117!=this.input.charCodeAt(++this.pos)&&this.invalidStringToken(this.pos,"Expecting Unicode escape sequence \\uXXXX"),++this.pos;var a=this.readCodePoint();(t?d:m)(a,r)||this.invalidStringToken(o,"Invalid Unicode escape"),e+=xe(a),n=this.pos}t=!1}return e+this.input.slice(n,this.pos)},be.readWord=function(){var e=this.readWord1(),t=E.name;return this.keywords.test(e)&&(this.containsEsc&&this.raiseRecoverable(this.start,"Escape sequence in keyword "+e),t=x[e]),this.finishToken(t,e)};var Ee,we,Se,Te="5.5.3";function ke(e,t){return new j(t,e).parse()}function Ce(e,t,n){var r=new j(n,e,t);return r.nextToken(),r.parseExpression()}function Oe(e,t){return new j(t,e)}function Ae(e,t,n){Ee=e,we=t,Se=n}},function(e,t,n){"use strict";var r=n(1),i=n(13);function o(e){return/^function /.test(e)&&(e=e.substring(9)),e.replace(/[_]typeof/g,"typeof")}function a(e){return e.replace(/[_]typeof/g,"typeof")}e.exports=function(e,t){return"() => {\n    "+i.toString()+";\n    const utils = {\n      allPropertiesOf: "+a(r.allPropertiesOf.toString())+",\n      clone: "+a(r.clone.toString())+",\n      splitArray: "+a(r.splitArray.toString())+",\n      getArgumentType: "+a(r.getArgumentType.toString())+",\n      getDimensions: "+a(r.getDimensions.toString())+",\n      dimToTexSize: "+a(r.dimToTexSize.toString())+",\n      flattenTo: "+a(r.flattenTo.toString())+",\n      flatten2dArrayTo: "+a(r.flatten2dArrayTo.toString())+",\n      flatten3dArrayTo: "+a(r.flatten3dArrayTo.toString())+",\n      systemEndianness: '"+a(r.systemEndianness())+"',\n      initWebGl: "+a(r.initWebGl.toString())+",\n      isArray: "+a(r.isArray.toString())+"\n    };\n    const Utils = utils;\n    const canvases = [];\n    const maxTexSizes = {};\n    class "+(t||"Kernel")+" {\n      constructor() {\n        this.maxTexSize = null;\n        this.argumentsLength = 0;\n        this._canvas = null;\n        this._webGl = null;\n        this.built = false;\n        this.program = null;\n        this.paramNames = "+JSON.stringify(e.paramNames)+";\n        this.paramTypes = "+JSON.stringify(e.paramTypes)+";\n        this.texSize = "+JSON.stringify(e.texSize)+";\n        this.output = "+JSON.stringify(e.output)+";\n        this.compiledFragShaderString = `"+e.compiledFragShaderString+"`;\n\t\t    this.compiledVertShaderString = `"+e.compiledVertShaderString+"`;\n\t\t    this.programUniformLocationCache = {};\n\t\t    this.textureCache = {};\n\t\t    this.subKernelOutputTextures = null;\n\t\t    this.subKernelOutputVariableNames = null;\n\t\t    this.uniform1fCache = {};\n\t\t    this.uniform1iCache = {};\n\t\t    this.uniform2fCache = {};\n\t\t    this.uniform2fvCache = {};\n\t\t    this.uniform3fvCache = {};\n      }\n      "+o(e._getFragShaderString.toString())+"\n      "+o(e._getVertShaderString.toString())+"\n      validateOptions() {}\n      setupParams() {}\n      setCanvas(canvas) { this._canvas = canvas; return this; }\n      setWebGl(webGl) { this._webGl = webGl; return this; }\n      "+o(e.getUniformLocation.toString())+"\n      "+o(e.setupParams.toString())+"\n      "+o(e.build.toString())+"\n\t\t  "+o(e.run.toString())+"\n\t\t  "+o(e._addArgument.toString())+"\n\t\t  "+o(e.getArgumentTexture.toString())+"\n\t\t  "+o(e.getTextureCache.toString())+"\n\t\t  "+o(e.getOutputTexture.toString())+"\n\t\t  "+o(e.renderOutput.toString())+"\n\t\t  "+o(e.updateMaxTexSize.toString())+"\n\t\t  "+o(e._setupOutputTexture.toString())+"\n\t\t  "+o(e.detachTextureCache.toString())+"\n\t\t  "+o(e.setUniform1f.toString())+"\n\t\t  "+o(e.setUniform1i.toString())+"\n\t\t  "+o(e.setUniform2f.toString())+"\n\t\t  "+o(e.setUniform2fv.toString())+"\n\t\t  "+o(e.setUniform3fv.toString())+" \n    };\n    return kernelRunShortcut(new Kernel());\n  };"}},function(e,t,n){"use strict";e.exports="precision highp float;\nprecision highp int;\nprecision highp sampler2D;\n\nattribute highp vec2 aPos;\nattribute highp vec2 aTexCoord;\n\nvarying highp vec2 vTexCoord;\nuniform vec2 ratio;\n\nvoid main(void) {\n  gl_Position = vec4((aPos + vec2(1)) * ratio + vec2(-1), 0, 1);\n  vTexCoord = aTexCoord;\n}"},function(e,t,n){"use strict";e.exports="__HEADER__;\nprecision highp float;\nprecision highp int;\nprecision highp sampler2D;\n\nconst float LOOP_MAX = __LOOP_MAX__;\n#define EPSILON 0.0000001;\n\n__CONSTANTS__;\n\nvarying highp vec2 vTexCoord;\n\nvec4 round(vec4 x) {\n  return floor(x + 0.5);\n}\n\nhighp float round(highp float x) {\n  return floor(x + 0.5);\n}\n\nvec2 integerMod(vec2 x, float y) {\n  vec2 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec3 integerMod(vec3 x, float y) {\n  vec3 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec4 integerMod(vec4 x, vec4 y) {\n  vec4 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nhighp float integerMod(highp float x, highp float y) {\n  highp float res = floor(mod(x, y));\n  return res * (res > floor(y) - 1.0 ? 0.0 : 1.0);\n}\n\nhighp int integerMod(highp int x, highp int y) {\n  return int(integerMod(float(x), float(y)));\n}\n\n// Here be dragons!\n// DO NOT OPTIMIZE THIS CODE\n// YOU WILL BREAK SOMETHING ON SOMEBODY'S MACHINE\n// LEAVE IT AS IT IS, LEST YOU WASTE YOUR OWN TIME\nconst vec2 MAGIC_VEC = vec2(1.0, -256.0);\nconst vec4 SCALE_FACTOR = vec4(1.0, 256.0, 65536.0, 0.0);\nconst vec4 SCALE_FACTOR_INV = vec4(1.0, 0.00390625, 0.0000152587890625, 0.0); // 1, 1/256, 1/65536\nhighp float decode32(highp vec4 rgba) {\n  __DECODE32_ENDIANNESS__;\n  rgba *= 255.0;\n  vec2 gte128;\n  gte128.x = rgba.b >= 128.0 ? 1.0 : 0.0;\n  gte128.y = rgba.a >= 128.0 ? 1.0 : 0.0;\n  float exponent = 2.0 * rgba.a - 127.0 + dot(gte128, MAGIC_VEC);\n  float res = exp2(round(exponent));\n  rgba.b = rgba.b - 128.0 * gte128.x;\n  res = dot(rgba, SCALE_FACTOR) * exp2(round(exponent-23.0)) + res;\n  res *= gte128.y * -2.0 + 1.0;\n  return res;\n}\n\nhighp vec4 encode32(highp float f) {\n  highp float F = abs(f);\n  highp float sign = f < 0.0 ? 1.0 : 0.0;\n  highp float exponent = floor(log2(F));\n  highp float mantissa = (exp2(-exponent) * F);\n  // exponent += floor(log2(mantissa));\n  vec4 rgba = vec4(F * exp2(23.0-exponent)) * SCALE_FACTOR_INV;\n  rgba.rg = integerMod(rgba.rg, 256.0);\n  rgba.b = integerMod(rgba.b, 128.0);\n  rgba.a = exponent*0.5 + 63.5;\n  rgba.ba += vec2(integerMod(exponent+127.0, 2.0), sign) * 128.0;\n  rgba = floor(rgba);\n  rgba *= 0.003921569; // 1/255\n  __ENCODE32_ENDIANNESS__;\n  return rgba;\n}\n// Dragons end here\n\nhighp float index;\nhighp vec3 threadId;\n\nhighp vec3 indexTo3D(highp float idx, highp vec3 texDim) {\n  highp float z = floor(idx / (texDim.x * texDim.y));\n  idx -= z * texDim.x * texDim.y;\n  highp float y = floor(idx / texDim.x);\n  highp float x = integerMod(idx, texDim.x);\n  return vec3(x, y, z);\n}\n\nhighp float get(highp sampler2D tex, highp vec2 texSize, highp vec3 texDim, highp float z, highp float y, highp float x) {\n  highp vec3 xyz = vec3(x, y, z);\n  xyz = floor(xyz + 0.5);\n  __GET_WRAPAROUND__;\n  highp float index = round(xyz.x + texDim.x * (xyz.y + texDim.y * xyz.z));\n  __GET_TEXTURE_CHANNEL__;\n  highp float w = round(texSize.x);\n  vec2 st = vec2(integerMod(index, w), float(int(index) / int(w))) + 0.5;\n  __GET_TEXTURE_INDEX__;\n  highp vec4 texel = texture2D(tex, st / texSize);\n  __GET_RESULT__;\n}\n\nhighp float get(highp sampler2D tex, highp vec2 texSize, highp vec3 texDim, highp float y, highp float x) {\n  return get(tex, texSize, texDim, 0.0, y, x);\n}\n\nhighp float get(highp sampler2D tex, highp vec2 texSize, highp vec3 texDim, highp float x) {\n  return get(tex, texSize, texDim, 0.0, 0.0, x);\n}\n\nhighp vec4 actualColor;\nvoid color(float r, float g, float b, float a) {\n  actualColor = vec4(r,g,b,a);\n}\n\nvoid color(float r, float g, float b) {\n  color(r,g,b,1.0);\n}\n\n__MAIN_PARAMS__;\n__MAIN_CONSTANTS__;\n__KERNEL__;\n\nvoid main(void) {\n  index = floor(vTexCoord.s * float(uTexSize.x)) + floor(vTexCoord.t * float(uTexSize.y)) * uTexSize.x;\n  __MAIN_RESULT__;\n}"},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=n(1),o=n(14),a=n(23),s=n(20),u=n(38),l=n(37),c=n(36),h=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));e=e||{},n._canvas=e.canvas||null,n._webGl=e.webGl||null;var r=e.mode,c=void 0;if(i.isWebGlSupported())c=r||"gpu";else{if(r&&"cpu"!==r)throw new Error('A requested mode of "'+r+'" and is not supported');console.warn("Warning: gpu not supported, falling back to cpu support"),c="cpu"}n.kernels=[];var h={canvas:n._canvas,webGl:n._webGl};switch(c){case"cpu":n._runner=new s(h);break;case"gpu":var p=n.getGPURunner();n._runner=new p(h);break;case"webgl2":n._runner=new a(h);break;case"webgl":n._runner=new o(h);break;case"webgl2-validator":n._runner=new a(h),n._runner.Kernel=l;break;case"webgl-validator":n._runner=new o(h),n._runner.Kernel=u;break;default:throw new Error('"'+r+'" mode is not defined')}return n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,c),r(t,[{key:"createKernel",value:function(e,t){if(void 0===e)throw"Missing fn parameter";if(!i.isFunction(e)&&"string"!=typeof e)throw"fn parameter not a function";var n=this._runner.buildKernel(e,t||{});return this._canvas||(this._canvas=n.getCanvas()),this._runner.canvas||(this._runner.canvas=n.getCanvas()),this.kernels.push(n),n}},{key:"createKernelMap",value:function(){var e=void 0,t=void 0;"function"==typeof arguments[arguments.length-2]?(e=arguments[arguments.length-2],t=arguments[arguments.length-1]):e=arguments[arguments.length-1],i.isWebGlDrawBuffersSupported()||(this._runner=new s(t));var n=this.createKernel(e,t);if(Array.isArray(arguments[0]))for(var r=arguments[0],o=0;o<r.length;o++)n.addSubKernel(r[o]);else{var a=arguments[0];for(var u in a)a.hasOwnProperty(u)&&n.addSubKernelProperty(u,a[u])}return n}},{key:"combineKernels",value:function(){var e=arguments[arguments.length-2],t=arguments[arguments.length-1];if("cpu"===this.getMode())return t;for(var n=arguments[0].getCanvas(),r=arguments[0].getWebGl(),o=0;o<arguments.length-1;o++)arguments[o].setCanvas(n).setWebGl(r).setOutputToTexture(!0);return function(){t.apply(null,arguments);var n=e.texSize,r=e.getWebGl(),o=e.threadDim,a=void 0;if(e.floatOutput)a=new Float32Array(n[0]*n[1]*4),r.readPixels(0,0,n[0],n[1],r.RGBA,r.FLOAT,a);else{var s=new Uint8Array(n[0]*n[1]*4);r.readPixels(0,0,n[0],n[1],r.RGBA,r.UNSIGNED_BYTE,s),a=new Float32Array(s.buffer)}return a=a.subarray(0,o[0]*o[1]*o[2]),1===e.output.length?a:2===e.output.length?i.splitArray(a,e.output[0]):3===e.output.length?i.splitArray(a,e.output[0]*e.output[1]).map(function(t){return i.splitArray(t,e.output[0])}):void 0}}},{key:"getGPURunner",value:function(){return"undefined"!=typeof WebGL2RenderingContext?a:"undefined"!=typeof WebGLRenderingContext?o:void 0}},{key:"addFunction",value:function(e,t,n){return this._runner.functionBuilder.addFunction(null,e,t,n),this}},{key:"addNativeFunction",value:function(e,t){return this._runner.functionBuilder.addNativeFunction(e,t),this}},{key:"getMode",value:function(){return this._runner.getMode()}},{key:"isWebGlSupported",value:function(){return i.isWebGlSupported()}},{key:"getCanvas",value:function(){return this._canvas}},{key:"getWebGl",value:function(){return this._webGl}}]),t}();Object.assign(h,c),e.exports=h},function(e,t,n){"use strict";n.r(t);var r=n(9),i=n.n(r);t.default=function(e,t,n){return(new i.a).createKernel(function(e,t,n,r,i){const o=e[this.thread.x+this.thread.y*t];let a=0;a=0===i?1/(r-n)*(o-n):1===i?Math.sqrt(1/(r-n)*(o-n)):2===i?Math.pow(1/(r-n)*(o-n),.333):3===i?Math.log(1/(r-n)*(o-n)):4===i?Math.log(Math.log(1/(r-n)*(o-n))):5===i?Math.sqrt(Math.log(1/(r-n)*(o-n))):o,this.color(a,a,a,1)},{canvas:n}).setOutput([e,t]).setGraphical(!0)}},function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var i=n(2),o=n(47),a=n(30),s=function(){function e(e){this.id=null,this.imageData=null,this.metaData=null,this.header=null,this.stats={min:0,max:0,sum:0,sum2:0,range:0,stdDev:0,histo:new Array(600).fill(0),histomax:0},this.renderer=null,this.min=0,this.max=500,this.scaleMode=0,this.id=e.id,this.imageData=e.imageData,this.metaData=e.metaData,this.header=e.header;for(var t=0,n=this.imageData;t<n.length;t++){(o=n[t])>this.stats.max&&(this.stats.max=o),o<this.stats.min&&(this.stats.min=o),this.stats.sum+=o,this.stats.sum2+=o*o}this.stats.range=Math.max(1,this.stats.max-this.stats.min),this.stats.stdDev=Math.sqrt(this.imageData.length*this.stats.sum2-this.stats.sum*this.stats.sum)/this.imageData.length;for(var r=0,i=this.imageData;r<i.length;r++){var o=i[r],a=Math.floor((this.stats.histo.length-1)*(o-this.stats.min)/this.stats.range);++this.stats.histo[a]>this.stats.histomax&&(this.stats.histomax=this.stats.histo[a])}}return e.prototype.initRenderer=function(e){e.getContext("webgl2",{preserveDrawingBuffer:!0}),this.renderer=o.default(this.metaData.width,this.metaData.height,e),this.render()},e.prototype.render=function(){this.renderer(this.imageData,this.metaData.width,this.min,this.max,this.scaleMode)},e.prototype.updateScaleMode=function(e){this.scaleMode=a.default.indexOf(e),this.render()},r([i.observable],e.prototype,"renderer",void 0),r([i.observable],e.prototype,"min",void 0),r([i.observable],e.prototype,"max",void 0),r([i.observable],e.prototype,"scaleMode",void 0),r([i.action],e.prototype,"initRenderer",null),r([i.action],e.prototype,"render",null),r([i.action],e.prototype,"updateScaleMode",null),e}();t.default=s},function(e,t){(function(){var e,t,n,r,i,o,a,s,u,l,c,h,p,f,d={}.hasOwnProperty,m=function(e,t){for(var n in t)d.call(t,n)&&(e[n]=t[n]);function r(){this.constructor=e}return r.prototype=t.prototype,e.prototype=new r,e.__super__=t.prototype,e},g=[].slice;null==this.astro&&(this.astro={}),e=function(){function e(){}return e.include=function(e){var t,n;for(t in e)n=e[t],this.prototype[t]=n;return this},e.extend=function(e){var t,n;for(t in e)n=e[t],this[t]=n;return this},e.prototype.proxy=function(e){var t=this;return function(){return e.apply(t,arguments)}},e.prototype.invoke=function(e,t,n){var r;if(r=null!=(null!=t?t.context:void 0)?t.context:this,null!=e)return e.call(r,n,t)},e}(),h=function(t){function n(e,t,n){var r,i=this;this.arg=e,this.callback=t,this.opts=n,this.hdus=[],this.blockCount=0,this.begin=0,this.end=this.BLOCKLENGTH,this.offset=0,this.headerStorage=new Uint8Array,"string"==typeof this.arg?(this.readNextBlock=this._readBlockFromBuffer,(r=new XMLHttpRequest).open("GET",this.arg),r.responseType="arraybuffer",r.onload=function(){if(200===r.status)return i.arg=r.response,i.length=i.arg.byteLength,i.readFromBuffer();i.invoke(i.callback,i.opts)},r.send()):(this.length=this.arg.size,this.readNextBlock=this._readBlockFromFile,this.readFromFile())}return m(n,e),n.prototype.LINEWIDTH=80,n.prototype.BLOCKLENGTH=2880,File.prototype.slice=File.prototype.slice||File.prototype.webkitSlice,Blob.prototype.slice=Blob.prototype.slice||Blob.prototype.webkitSlice,n.prototype.readFromBuffer=function(){var e;return e=this.arg.slice(this.begin+this.offset,this.end+this.offset),this.readBlock(e)},n.prototype.readFromFile=function(){var e,t=this;return this.reader=new FileReader,this.reader.onloadend=function(e){return t.readBlock(e.target.result)},e=this.arg.slice(this.begin+this.offset,this.end+this.offset),this.reader.readAsArrayBuffer(e)},n.prototype.readBlock=function(e){var t,n,r,i,o,u,l,c,h,p,f,d,m;for(t=new Uint8Array(e),h=new Uint8Array(this.headerStorage),this.headerStorage=new Uint8Array(this.end),this.headerStorage.set(h,0),this.headerStorage.set(t,this.begin),u=this.BLOCKLENGTH/this.LINEWIDTH;u--;)if(32!==t[o=u*this.LINEWIDTH]){if(69===t[o]&&78===t[o+1]&&68===t[o+2]&&32===t[o+3]){for(l="",f=0,d=(m=this.headerStorage).length;f<d;f++)p=m[f],l+=String.fromCharCode(p);return i=new s(l),this.start=this.end+this.offset,n=i.getDataLength(),c=this.arg.slice(this.start,this.start+n),i.hasDataUnit()&&(r=this.createDataUnit(i,c)),this.hdus.push(new a(i,r)),this.offset+=this.end+n+this.excessBytes(n),this.offset===this.length?(this.headerStorage=null,void this.invoke(this.callback,this.opts,this)):(this.blockCount=0,this.begin=this.blockCount*this.BLOCKLENGTH,this.end=this.begin+this.BLOCKLENGTH,this.headerStorage=new Uint8Array,e=this.arg.slice(this.begin+this.offset,this.end+this.offset),void this.readNextBlock(e))}break}this.blockCount+=1,this.begin=this.blockCount*this.BLOCKLENGTH,this.end=this.begin+this.BLOCKLENGTH,e=this.arg.slice(this.begin+this.offset,this.end+this.offset),this.readNextBlock(e)},n.prototype._readBlockFromBuffer=function(e){return this.readBlock(e)},n.prototype._readBlockFromFile=function(e){return this.reader.readAsArrayBuffer(e)},n.prototype.createDataUnit=function(e,t){var n;return n=e.getDataType(),new astro.FITS[n](e,t)},n.prototype.excessBytes=function(e){return(this.BLOCKLENGTH-e%this.BLOCKLENGTH)%this.BLOCKLENGTH},n.prototype.isEOF=function(){return this.offset===this.length},n}(),(o=function(t){function n(e,t,n){var r,i=this;this.arg=e,r=new h(this.arg,function(e){return i.hdus=r.hdus,i.invoke(t,n,i)})}return m(n,e),n.prototype.getHDU=function(e){var t,n,r,i;if(null!=e&&null!=this.hdus[e])return this.hdus[e];for(n=0,r=(i=this.hdus).length;n<r;n++)if((t=i[n]).hasData())return t},n.prototype.getHeader=function(e){return this.getHDU(e).header},n.prototype.getDataUnit=function(e){return this.getHDU(e).data},n}()).version="0.6.5",this.astro.FITS=o,r=function(t){function n(e,t){t instanceof ArrayBuffer?this.buffer=t:this.blob=t}return m(n,e),n.swapEndian={B:function(e){return e},I:function(e){return e<<8|e>>8},J:function(e){return(255&e)<<24|(65280&e)<<8|e>>8&65280|e>>24&255}},n.swapEndian[8]=n.swapEndian.B,n.swapEndian[16]=n.swapEndian.I,n.swapEndian[32]=n.swapEndian.J,n}(),this.astro.FITS.DataUnit=r,u={verifyOrder:function(e,t){if(t!==this.cardIndex)return console.warn(e+" should appear at index "+this.cardIndex+" in the FITS header")},verifyBetween:function(e,t,n,r){if(!(t>=n&&t<=r))throw"The "+e+" value of "+t+" is not between "+n+" and "+r},verifyBoolean:function(e){return"T"===e},VerifyFns:{SIMPLE:function(){var e;return 1<=arguments.length?g.call(arguments,0):[],e=arguments[0],this.primary=!0,this.verifyOrder("SIMPLE",0),this.verifyBoolean(e)},XTENSION:function(){return 1<=arguments.length?g.call(arguments,0):[],this.extension=!0,this.extensionType=arguments[0],this.verifyOrder("XTENSION",0),this.extensionType},BITPIX:function(){var e;if(1<=arguments.length?g.call(arguments,0):[],"BITPIX",e=parseInt(arguments[0]),this.verifyOrder("BITPIX",1),8!==e&&16!==e&&32!==e&&-32!==e&&-64!==e)throw"BITPIX value "+e+" is not permitted";return e},NAXIS:function(){var e,t;if(1<=arguments.length?g.call(arguments,0):[],"NAXIS",e=parseInt(arguments[0]),!arguments[1]&&(this.verifyOrder("NAXIS",2),this.verifyBetween("NAXIS",e,0,999),this.isExtension()&&("TABLE"===(t=this.extensionType)||"BINTABLE"===t)&&(2,2!==e)))throw"NAXIS must be 2 for TABLE and BINTABLE extensions";return e},PCOUNT:function(){var e,t,n;if(1<=arguments.length?g.call(arguments,0):[],"PCOUNT",t=parseInt(arguments[0]),e=3+this.get("NAXIS"),this.verifyOrder("PCOUNT",e),this.isExtension()&&("IMAGE"===(n=this.extensionType)||"TABLE"===n)&&(0,0!==t))throw"PCOUNT must be 0 for the "+this.extensionType+" extensions";return t},GCOUNT:function(){var e,t,n;if(1<=arguments.length?g.call(arguments,0):[],"GCOUNT",t=parseInt(arguments[0]),e=3+this.get("NAXIS")+1,this.verifyOrder("GCOUNT",e),this.isExtension()&&("IMAGE"===(n=this.extensionType)||"TABLE"===n||"BINTABLE"===n)&&(1,1!==t))throw"GCOUNT must be 1 for the "+this.extensionType+" extensions";return t},EXTEND:function(){var e;if(1<=arguments.length?g.call(arguments,0):[],e=arguments[0],!this.isPrimary())throw"EXTEND must only appear in the primary header";return this.verifyBoolean(e)},BSCALE:function(){return 1<=arguments.length?g.call(arguments,0):[],parseFloat(arguments[0])},BZERO:function(){return 1<=arguments.length?g.call(arguments,0):[],parseFloat(arguments[0])},BLANK:function(){var e;return 1<=arguments.length?g.call(arguments,0):[],e=arguments[0],this.get("BITPIX")>0||console.warn("BLANK is not to be used for BITPIX = "+this.get("BITPIX")),parseInt(e)},DATAMIN:function(){return 1<=arguments.length?g.call(arguments,0):[],parseFloat(arguments[0])},DATAMAX:function(){return 1<=arguments.length?g.call(arguments,0):[],parseFloat(arguments[0])},EXTVER:function(){return 1<=arguments.length?g.call(arguments,0):[],parseInt(arguments[0])},EXTLEVEL:function(){return 1<=arguments.length?g.call(arguments,0):[],parseInt(arguments[0])},TFIELDS:function(){var e;return 1<=arguments.length?g.call(arguments,0):[],e=parseInt(arguments[0]),this.verifyBetween("TFIELDS",e,0,999),e},TBCOL:function(){var e,t;return 1<=arguments.length?g.call(arguments,0):[],t=arguments[0],e=arguments[2],this.verifyBetween("TBCOL",e,0,this.get("TFIELDS")),t},ZIMAGE:function(){return 1<=arguments.length?g.call(arguments,0):[],this.verifyBoolean(arguments[0])},ZCMPTYPE:function(){var e;if(1<=arguments.length?g.call(arguments,0):[],"GZIP_1"!==(e=arguments[0])&&"RICE_1"!==e&&"PLIO_1"!==e&&"HCOMPRESS_1"!==e)throw"ZCMPTYPE value "+e+" is not permitted";if("RICE_1"!==e)throw"Compress type "+e+" is not yet implement";return e},ZBITPIX:function(){var e;if(1<=arguments.length?g.call(arguments,0):[],8!==(e=parseInt(arguments[0]))&&16!==e&&32!==e&&64!==e&&-32!==e&&-64!==e)throw"ZBITPIX value "+e+" is not permitted";return e},ZNAXIS:function(){var e;return 1<=arguments.length?g.call(arguments,0):[],e=e=parseInt(arguments[0]),arguments[1]||this.verifyBetween("ZNAXIS",e,0,999),e},ZTILE:function(){return 1<=arguments.length?g.call(arguments,0):[],parseInt(arguments[0])},ZSIMPLE:function(){return 1<=arguments.length?g.call(arguments,0):[],"T"===arguments[0]},ZPCOUNT:function(){return 1<=arguments.length?g.call(arguments,0):[],parseInt(arguments[0])},ZGCOUNT:function(){return 1<=arguments.length?g.call(arguments,0):[],parseInt(arguments[0])},ZDITHER0:function(){return 1<=arguments.length?g.call(arguments,0):[],parseInt(arguments[0])}}},this.astro.FITS.HeaderVerify=u,s=function(t){function n(e){var t,n,r;for(n in this.primary=!1,this.extension=!1,this.verifyCard={},r=this.VerifyFns)t=r[n],this.verifyCard[n]=this.proxy(t);this.cards={},this.cards.COMMENT=[],this.cards.HISTORY=[],this.cardIndex=0,this.block=e,this.readBlock(e)}return m(n,e),n.include(u),n.prototype.arrayPattern=/(\D+)(\d+)/,n.prototype.maxLines=600,n.prototype.get=function(e){return this.contains(e)?this.cards[e].value:null},n.prototype.set=function(e,t,n){return n=n||"",this.cards[e]={index:this.cardIndex,value:t,comment:n},this.cardIndex+=1},n.prototype.contains=function(e){return this.cards.hasOwnProperty(e)},n.prototype.readLine=function(e){var t,n,r,i,o;if(!(""===(r=e.slice(0,8).trim()))){if(n=e.slice(8,10),i=e.slice(10),"= "===n)return i=(o=i.split(" /"))[0],t=o[1],"'"===(i=i.trim())[0]?i=i.slice(1,-1).trim():"T"!==i&&"F"!==i&&(i=parseFloat(i)),i=this.validate(r,i),this.set(r,i,t);"COMMENT"!==r&&"HISTORY"!==r||this.cards[r].push(i.trim())}},n.prototype.validate=function(e,t){var n,r,i,o;return r=null,n=e,(i=this.arrayPattern.test(e))&&(n=(o=this.arrayPattern.exec(e).slice(1))[0],r=o[1]),n in this.verifyCard&&(t=this.verifyCard[n](t,i,r)),t},n.prototype.readBlock=function(e){var t,n,r,i,o,a;for(80,a=[],t=i=0,o=(r=(r=e.length/80)<this.maxLines?r:this.maxLines)-1;0<=o?i<=o:i>=o;t=0<=o?++i:--i)n=e.slice(80*t,80*(t+1)),a.push(this.readLine(n));return a},n.prototype.hasDataUnit=function(){return 0!==this.get("NAXIS")},n.prototype.getDataLength=function(){var e,t,n,r,i;if(!this.hasDataUnit())return 0;for(n=[],e=r=1,i=this.get("NAXIS");1<=i?r<=i:r>=i;e=1<=i?++r:--r)n.push(this.get("NAXIS"+e));return t=n.reduce(function(e,t){return e*t})*Math.abs(this.get("BITPIX"))/8,t+=this.get("PCOUNT")},n.prototype.getDataType=function(){switch(this.extensionType){case"BINTABLE":return this.contains("ZIMAGE")?"CompressedImage":"BinaryTable";case"TABLE":return"Table";default:return this.hasDataUnit()?"Image":null}},n.prototype.isPrimary=function(){return this.primary},n.prototype.isExtension=function(){return this.extension},n}(),this.astro.FITS.Header=s,c={getExtent:function(e){var t,n,r,i;for(t=e.length;t--;)if(i=e[t],!isNaN(i)){r=n=i;break}if(-1===t)return[NaN,NaN];for(;t--;)i=e[t],isNaN(i)||(i<r&&(r=i),i>n&&(n=i));return[r,n]},getPixel:function(e,t,n){return e[n*this.width+t]}},this.astro.FITS.ImageUtils=c,l=function(e){function t(e,n){var r,i,o,a,s,u,l;for(t.__super__.constructor.apply(this,arguments),a=e.get("NAXIS"),this.bitpix=e.get("BITPIX"),this.naxis=[],o=s=1;1<=a?s<=a:s>=a;o=1<=a?++s:--s)this.naxis.push(e.get("NAXIS"+o));for(this.width=e.get("NAXIS1"),this.height=e.get("NAXIS2")||1,this.depth=e.get("NAXIS3")||1,this.bzero=e.get("BZERO")||0,this.bscale=e.get("BSCALE")||1,this.bytes=Math.abs(this.bitpix)/8,this.length=this.naxis.reduce(function(e,t){return e*t})*Math.abs(this.bitpix)/8,this.frame=0,this.frameOffsets=[],this.frameLength=this.bytes*this.width*this.height,this.nBuffers=null!=this.buffer?1:2,o=u=0,l=this.depth-1;0<=l?u<=l:u>=l;o=0<=l?++u:--u)i={begin:r=o*this.frameLength},null!=this.buffer&&(i.buffers=[this.buffer.slice(r,r+this.frameLength)]),this.frameOffsets.push(i)}return m(t,r),t.include(c),t.prototype.allocationSize=16777216,t.prototype._getFrame=function(e,t,n,r){var i,o,a,s,u,l,c;if(o=Math.abs(t)/8,s=a=e.byteLength/o,Math.abs(t),t>0){switch(t){case 8:l=new Uint8Array(e),l=new Uint16Array(l),u=function(e){return e};break;case 16:l=new Int16Array(e),u=function(e){return(255&e)<<8|e>>8&255};break;case 32:l=new Int32Array(e),u=function(e){return(255&e)<<24|(65280&e)<<8|e>>8&65280|e>>24&255}}for(i=parseInt(n)!==n||parseInt(r)!==r?new Float32Array(l.length):l;s--;)l[s]=u(l[s]),i[s]=n+r*l[s]}else{for(i=new Uint32Array(e),u=function(e){return(255&e)<<24|(65280&e)<<8|e>>8&65280|e>>24&255};a--;)c=i[a],i[a]=u(c);for(i=new Float32Array(e);s--;)i[s]=n+r*i[s]}return i},t.prototype._getFrameAsync=function(e,t,n){var r,i,o,a,s,u,l,c,h,p,f,d,m,g=this;a="onmessage = "+(a=function(e){var t,n,r,i,o,a,s;return i=(a=e.data).buffer,n=a.bitpix,o=a.bzero,r=a.bscale,s=a.url,importScripts(s),t=_getFrame(i,n,o,r),postMessage(t)}.toString().replace("return postMessage","postMessage")),s=(s=this._getFrame.toString()).replace("function","function _getFrame"),l="application/javascript",o=new Blob([a],{type:l}),i=new Blob([s],{type:l}),r=window.URL||window.webkitURL,d=r.createObjectURL(o),f=r.createObjectURL(i),m=new Worker(d),c={buffer:e[0],bitpix:this.bitpix,bzero:this.bzero,bscale:this.bscale,url:f},u=0,h=null,p=0,m.onmessage=function(i){var o;return o=i.data,null==h&&(h=new o.constructor(g.width*g.height)),h.set(o,p),p+=o.length,(u+=1)===g.nBuffers?(g.invoke(t,n,h),r.revokeObjectURL(d),r.revokeObjectURL(f),m.terminate()):(c.buffer=e[u],m.postMessage(c,[e[u]]))},m.postMessage(c,[e[0]])},t.prototype.getFrame=function(e,t,n){var r,i,o,a,s,u,l,c,h,p,f,d=this;if(this.frame=e||this.frame,(null!=(a=(u=this.frameOffsets[this.frame]).buffers)?a.length:void 0)===this.nBuffers)return this._getFrameAsync(a,t,n);for(this.frameOffsets[this.frame].buffers=[],r=u.begin,i=this.blob.slice(r,r+this.frameLength),o=[],s=Math.floor(this.height/this.nBuffers)*this.bytes*this.width,l=p=0,f=this.nBuffers-1;0<=f?p<=f:p>=f;l=0<=f?++p:--p)h=l*s,l===this.nBuffers-1?o.push(i.slice(h)):o.push(i.slice(h,h+s));return a=[],(c=new FileReader).frame=this.frame,l=0,c.onloadend=function(r){var i;return e=r.target.frame,i=r.target.result,d.frameOffsets[e].buffers.push(i),(l+=1)===d.nBuffers?d.getFrame(e,t,n):c.readAsArrayBuffer(o[l])},c.readAsArrayBuffer(o[0])},t.prototype.getFrames=function(e,t,n,r){var i,o=this;return i=function(r,a){if(o.invoke(n,a,r),e+=1,t-=1)return o.getFrame(e,i,a)},this.getFrame(e,i,r)},t.prototype.isDataCube=function(){return this.naxis.length>2},t}(),this.astro.FITS.Image=l,f=function(e){function t(e,n){t.__super__.constructor.apply(this,arguments),this.rowByteSize=e.get("NAXIS1"),this.rows=e.get("NAXIS2"),this.cols=e.get("TFIELDS"),this.length=this.rowByteSize*this.rows,this.heapLength=e.get("PCOUNT"),this.columns=this.getColumns(e),null!=this.buffer?(this.rowsInMemory=this._rowsInMemoryBuffer,this.heap=this.buffer.slice(this.length,this.length+this.heapLength)):(this.rowsInMemory=this._rowsInMemoryBlob,this.firstRowInBuffer=this.lastRowInBuffer=0,this.nRowsInBuffer=Math.floor(this.maxMemory/this.rowByteSize)),this.accessors=[],this.descriptors=[],this.elementByteLengths=[],this.setAccessors(e)}return m(t,r),t.prototype.maxMemory=1048576,t.prototype._rowsInMemoryBuffer=function(){return!0},t.prototype._rowsInMemoryBlob=function(e,t){return!(e<this.firstRowInBuffer)&&!(t>this.lastRowInBuffer)},t.prototype.getColumns=function(e){var t,n,r,i,o;for(t=[],n=i=1,o=this.cols;1<=o?i<=o:i>=o;n=1<=o?++i:--i){if(r="TTYPE"+n,!e.contains(r))return null;t.push(e.get(r))}return t},t.prototype.getColumn=function(e,t,n){var r,i,o,a,s,u,l,c,h,p,f=this;return null!=this.blob?(c=this.columns.indexOf(e),a=this.descriptors[c],r=this.accessors[c],this.elementByteLengths[c],s=0===(s=this.elementByteLengths.slice(0,c)).length?0:s.reduce(function(e,t){return e+t}),o=null!=this.typedArray[a]?new this.typedArray[a](this.rows):[],p=~~(this.maxMemory/this.rowByteSize),p=Math.min(p,this.rows),u=this.rows/p,h=Math.floor(u)===u?u:Math.floor(u)+1,l=0,c=0,i=function(e,n){var a,u,d,m;for(a=e.byteLength/f.rowByteSize,m=new DataView(e),u=s;a--;)o[l]=r(m,u)[0],l+=1,u+=f.rowByteSize;if(c+=1,h-=1)return d=c*p,f.getTableBuffer(d,p,i,n);f.invoke(t,n,o)},this.getTableBuffer(0,p,i,n)):(i=function(n,r){return o=n.map(function(t){return t[e]}),f.invoke(t,r,o)},this.getRows(0,this.rows,i,n))},t.prototype.getTableBuffer=function(e,t,n,r){var i,o,a,s,u=this;return t=Math.min(this.rows-e,t),a=(i=e*this.rowByteSize)+t*this.rowByteSize,o=this.blob.slice(i,a),(s=new FileReader).row=e,s.number=t,s.onloadend=function(e){return u.invoke(n,r,e.target.result)},s.readAsArrayBuffer(o)},t.prototype.getRows=function(e,t,n,r){var i,o,a,s,u,l,c=this;return this.rowsInMemory(e,e+t)?(null!=this.blob?a=this.buffer:(s=(i=e*this.rowByteSize)+t*this.rowByteSize,a=this.buffer.slice(i,s)),l=this._getRows(a,t),this.invoke(n,r,l),l):(s=(i=e*this.rowByteSize)+Math.max(this.nRowsInBuffer*this.rowByteSize,t*this.rowByteSize),o=this.blob.slice(i,s),(u=new FileReader).row=e,u.number=t,u.onloadend=function(i){var o;return o=i.target,c.buffer=o.result,c.firstRowInBuffer=c.lastRowInBuffer=o.row,c.lastRowInBuffer+=o.number,c.getRows(e,t,n,r)},u.readAsArrayBuffer(o))},t}(),this.astro.FITS.Tabular=f,p=function(e){function t(){return t.__super__.constructor.apply(this,arguments)}return m(t,f),t.prototype.dataAccessors={A:function(e){return e.trim()},I:function(e){return parseInt(e)},F:function(e){return parseFloat(e)},E:function(e){return parseFloat(e)},D:function(e){return parseFloat(e)}},t.prototype.setAccessors=function(e){var t,n,r,i,o,a,s,u=this;for(i=/([AIFED])(\d+)\.*(\d+)*/,s=[],r=o=1,a=this.cols;1<=a?o<=a:o>=a;r=1<=a?++o:--o)n=e.get("TFORM"+r),e.get("TTYPE"+r),t=i.exec(n)[1],s.push(function(e){var t;return t=function(t){return u.dataAccessors[e](t)},u.accessors.push(t)}(t));return s},t.prototype._getRows=function(e){var t,n,r,i,o,a,s,u,l,c,h,p,f,d,m,g,v,y,b;for(u=e.byteLength/this.rowByteSize,n=new Uint8Array(e),c=[],o=f=0,y=u-1;0<=y?f<=y:f>=y;o=0<=y?++f:--f){for(i=(r=o*this.rowByteSize)+this.rowByteSize,s="",d=0,g=(h=n.subarray(r,i)).length;d<g;d++)p=h[d],s+=String.fromCharCode(p);for(s=s.trim().split(/\s+/),l={},a=m=0,v=(b=this.accessors).length;m<v;a=++m)t=b[a],p=s[a],l[this.columns[a]]=t(p);c.push(l)}return c},t}(),this.astro.FITS.Table=p,t=function(e){function t(){return t.__super__.constructor.apply(this,arguments)}return m(t,f),t.prototype.typedArray={B:Uint8Array,I:Uint16Array,J:Uint32Array,E:Float32Array,D:Float64Array,1:Uint8Array,2:Uint16Array,4:Uint32Array},t.offsets={L:1,B:1,I:2,J:4,K:8,A:1,E:4,D:8,C:8,M:16},t.prototype.dataAccessors={L:function(e,t){return[84===e.getInt8(t),t+=1]},B:function(e,t){return[e.getUint8(t),t+=1]},I:function(e,t){return[e.getInt16(t),t+=2]},J:function(e,t){return[e.getInt32(t),t+=4]},K:function(e,t){var n,r;return n=Math.abs(e.getInt32(t)),t+=4,[((r=n%10)?-1:1)*((n-=r)<<32|Math.abs(e.getInt32(t))),t+=4]},A:function(e,t){var n;return n=e.getUint8(t),[n=String.fromCharCode(n),t+=1]},E:function(e,t){return[e.getFloat32(t),t+=4]},D:function(e,t){return[e.getFloat64(t),t+=8]},C:function(e,t){var n;return n=e.getFloat32(t),t+=4,[[n,e.getFloat32(t)],t+=4]},M:function(e,t){var n;return n=e.getFloat64(t),t+=8,[[n,e.getFloat64(t)],t+=8]}},t.prototype.toBits=function(e){var t,n;for(t=[],n=128;n>=1;)t.push(e&n?1:0),n/=2;return t},t.prototype.getFromHeap=function(e,t,n){var r,i,o,a,s;for(s=e.getInt32(t),t+=4,i=e.getInt32(t),t+=4,o=this.heap.slice(i,i+s),a=(r=new this.typedArray[n](o)).length;a--;)r[a]=this.constructor.swapEndian[n](r[a]);return[r,t]},t.prototype.setAccessors=function(e){var t,n,r,o,a,s,u,l,c,h,p,f=this;for(u=/(\d*)([P|Q]*)([L|X|B|I|J|K|A|E|D|C|M]{1})/,p=[],o=c=1,h=this.cols;1<=h?c<=h:c>=h;o=1<=h?++c:--c)r=e.get("TFORM"+o),l=e.get("TTYPE"+o),s=u.exec(r),t=parseInt(s[1])||1,a=s[2],n=s[3],p.push(function(e,t){var n,r;if(f.descriptors.push(e),f.elementByteLengths.push(f.constructor.offsets[e]*t),a)switch(l){case"COMPRESSED_DATA":n=function(t,n){var r,o,a;return r=(a=f.getFromHeap(t,n,e))[0],n=a[1],o=new f.typedArray[f.algorithmParameters.BYTEPIX](f.ztile[0]),i.Rice(r,f.algorithmParameters.BLOCKSIZE,f.algorithmParameters.BYTEPIX,o,f.ztile[0],i.RiceSetup),[o,n]};break;case"GZIP_COMPRESSED_DATA":n=function(e,t){var n;for(n=new Float32Array(f.width),o=n.length;o--;)n[o]=NaN;return[n,t]};break;default:n=function(t,n){return f.getFromHeap(t,n,e)}}else 1===t?n=function(t,n){var r;return[(r=f.dataAccessors[e](t,n))[0],n=r[1]]}:"X"===e?(r=Math.log(t)/Math.log(2),n=function(e,n){var i,o,a,s,u,l,c;for(a=e.buffer.slice(n,n+r),o=[],l=0,c=(u=new Uint8Array(a)).length;l<c;l++)s=u[l],i=f.toBits(s),o=o.concat(i);return n+=r,[o.slice(0,+(t-1)+1||9e9),n]}):n="A"===e?function(e,n){var r,i,o,a,s,u;for(i=e.buffer.slice(n,n+t),o="",s=0,u=(r=new Uint8Array(i)).length;s<u;s++)a=r[s],o+=String.fromCharCode(a);return[o=o.trim(),n+=t]}:function(n,r){var i,a,s;for(o=t,i=[];o--;)a=(s=f.dataAccessors[e](n,r))[0],r=s[1],i.push(a);return[i,r]};return f.accessors.push(n)}(n,t));return p},t.prototype._getRows=function(e,t){var n,r,i,o,a,s,u,l,c,h;for(s=new DataView(e),r=0,o=[];t--;){for(i={},n=u=0,l=(c=this.accessors).length;u<l;n=++u)a=(h=(0,c[n])(s,r))[0],r=h[1],i[this.columns[n]]=a;o.push(i)}return o},t}(),this.astro.FITS.BinaryTable=t,i={RiceSetup:{1:function(e){return 1,3,6,[3,6,e[0],1]},2:function(e){var t;return 2,4,14,t=0,t|=e[0]<<8,[4,14,t|=e[1],2]},4:function(e){var t;return 4,5,25,t=0,t|=e[0]<<24,t|=e[1]<<16,t|=e[2]<<8,[5,25,t|=e[3],4]}},Rice:function(e,t,n,r,i,o){var a,s,u,l,c,h,p,f,d,m,g,v,y,b,x,_;for(s=1<<c,c=(x=o[n](e))[0],h=x[1],m=x[2],b=x[3],v=new Uint8Array(256),y=8,d=(_=[128,255])[0],p=_[1];p>=0;){for(;p>=d;)v[p]=y,p-=1;d/=2,y-=1}for(v[0]=0,a=e[b++],g=8,p=0;p<i;){for(g-=c;g<0;)a=a<<8|e[b++],g+=8;if(l=(a>>g)-1,a&=(1<<g)-1,(f=p+t)>i&&(f=i),l<0)for(;p<f;)r[p]=m,p+=1;else if(l===h)for(;p<f;){for(u=a<<(d=s-g),d-=8;d>=0;)u|=(a=e[b++])<<d,d-=8;g>0?(u|=(a=e[b++])>>-d,a&=(1<<g)-1):a=0,0==(1&u)?u>>=1:u=~(u>>1),r[p]=u+m,m=r[p],p++}else for(;p<f;){for(;0===a;)g+=8,a=e[b++];for(a^=1<<(g-=(y=g-v[a])+1),g-=l;g<0;)a=a<<8|e[b++],g+=8;u=y<<l|a>>g,a&=(1<<g)-1,0==(1&u)?u>>=1:u=~(u>>1),r[p]=u+m,m=r[p],p++}}return r}},this.astro.FITS.Decompress=i,n=function(e){function n(e,t){var r,i,o,a,s,u;for(n.__super__.constructor.apply(this,arguments),this.zcmptype=e.get("ZCMPTYPE"),this.zbitpix=e.get("ZBITPIX"),this.znaxis=e.get("ZNAXIS"),this.zblank=e.get("ZBLANK"),this.blank=e.get("BLANK"),this.zdither=e.get("ZDITHER0")||0,this.ztile=[],r=s=1,u=this.znaxis;1<=u?s<=u:s>=u;r=1<=u?++s:--s)a=e.contains("ZTILE"+r)?e.get("ZTILE"+r):1===r?e.get("ZNAXIS1"):1,this.ztile.push(a);for(this.width=e.get("ZNAXIS1"),this.height=e.get("ZNAXIS2")||1,this.algorithmParameters={},"RICE_1"===this.zcmptype&&(this.algorithmParameters.BLOCKSIZE=32,this.algorithmParameters.BYTEPIX=4),r=1;i="ZNAME"+r,e.contains(i);)o="ZVAL"+r,this.algorithmParameters[e.get(i)]=e.get(o),r+=1;this.zmaskcmp=e.get("ZMASKCMP"),this.zquantiz=e.get("ZQUANTIZ")||"LINEAR_SCALING",this.bzero=e.get("BZERO")||0,this.bscale=e.get("BSCALE")||1}return m(n,t),n.include(c),n.extend(i),n.randomGenerator=function(){var e,t,n,r,i,o;for(16807,t=2147483647,r=1,n=new Float32Array(1e4),e=o=0;o<=9999;e=++o)r=(i=16807*r)-t*parseInt(i/t),n[e]=r/t;return n},n.randomSequence=n.randomGenerator(),n.prototype._getRows=function(e,t){var n,r,i,o,a,s,u,l,c,h,p,f,d,m,g,v,y,b,x,_;for(d=new DataView(e),s=0,n=new Float32Array(this.width*this.height);t--;){for(c={},o=g=0,y=(x=this.accessors).length;g<y;o=++g)f=(_=(0,x[o])(d,s))[0],s=_[1],c[this.columns[o]]=f;for(r=c.COMPRESSED_DATA||c.UNCOMPRESSED_DATA||c.GZIP_COMPRESSED_DATA,c.ZBLANK||this.zblank,h=c.ZSCALE||this.bscale,m=c.ZZERO||this.bzero,p=((a=this.height-t)+this.zdither-1-1)%1e4,l=parseInt(500*this.constructor.randomSequence[p]),o=v=0,b=r.length;v<b;o=++v)f=r[o],i=(a-1)*this.width+o,-2147483647===f?n[i]=NaN:-2147483646===f?n[i]=0:(u=this.constructor.randomSequence[l],n[i]=(f-u+.5)*h+m),1e4===(l+=1)&&(p=(p+1)%1e4,l=parseInt(500*this.randomSequence[p]))}return n},n.prototype.getFrame=function(e,t,n){var r,i,o=this;return this.heap?(this.frame=e||this.frame,this.getRows(0,this.rows,t,n)):(r=this.blob.slice(this.length,this.length+this.heapLength),(i=new FileReader).onloadend=function(r){return o.heap=r.target.result,o.getFrame(e,t,n)},i.readAsArrayBuffer(r))},n}(),this.astro.FITS.CompressedImage=n,a=function(){function e(e,t){this.header=e,this.data=t}return e.prototype.hasData=function(){return null!=this.data},e}(),this.astro.FITS.HDU=a}).call(this)},function(e,t,n){"use strict";n.r(t);const r=n(49);window.astro=r.astro,t.default=r.astro.FITS},function(e,t,n){"use strict";var r=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e};Object.defineProperty(t,"__esModule",{value:!0});var i=n(50),o=function(e){return{metaData:e.getDataUnit(),header:e.getHeader()}},a=function(e){return new Promise(function(t,n){e.metaData.getFrame(0,function(n){return t(r({},e,{imageData:n}))})})};t.default=function(e){return new Promise(function(t,n){return new i.default(e,t)}).then(o).then(a)}},function(e,t,n){"use strict";var r=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},i=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a},o=this&&this.__generator||function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=r[2&o[0]?"return":o[0]?"throw":"next"])&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[0,i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=(i=a.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var a=n(2),s=n(51),u=n(48),l=function(){function e(){this.images=[],this.selectedImage=null,this.addImage=a.flow(function(e){var t,n;return o(this,function(i){switch(i.label){case 0:return[4,s.default(e)];case 1:return t=i.sent(),n=new u.default(r({},t,{id:this.imageIdCounter})),this.images.push(n),this.selectedImage=n,this.imageIdCounter++,[2]}})}),this.imageIdCounter=0}return i([a.observable],e.prototype,"images",void 0),i([a.observable],e.prototype,"selectedImage",void 0),i([a.observable],e.prototype,"imageIdCounter",void 0),e}();t.default=new l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){return function(){this.name="AstroView"}}();t.default=new r},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),a=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.zoom=null,t}return i(t,e),t.prototype.componentDidMount=function(){this.props.canvas&&this.updateZoomCanvas()},t.prototype.shouldComponentUpdate=function(){return this.props.canvas&&this.updateZoomCanvas(),!1},t.prototype.render=function(){var e=this;return o.createElement("canvas",{width:this.props.width,height:this.props.height,ref:function(t){e.zoom=t}})},t.prototype.updateZoomCanvas=function(){var e=this.props,t=e.x,n=e.y,r=e.canvas,i=e.width,o=e.height,a=e.canvasWidth,s=this.zoom.getContext("2d"),u=r.width/a;s.drawImage(r,(t||0)*u-i/4,(n||0)*u-o/4,i,o,0,0,2*i,2*o),s.strokeStyle="#E11010",s.lineWidth=2,s.beginPath(),s.moveTo(i/2,o/2-10),s.lineTo(i/2,o/2-20),s.moveTo(i/2,o/2+10),s.lineTo(i/2,o/2+20),s.moveTo(i/2+10,o/2),s.lineTo(i/2+20,o/2),s.moveTo(i/2-10,o/2),s.lineTo(i/2-20,o/2),s.stroke()},t}(o.Component);t.default=a},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var a=n(5),s=n(0),u=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.canvas=null,t}return i(t,e),t.prototype.componentDidMount=function(){var e=this.canvas.getContext("2d"),t=this.canvas.width,n=this.canvas.height,r=this.props.stats,i=r.histo,o=r.histomax,a=Math.log(o);if(e.imageSmoothingEnabled=!1,e.webkitImageSmoothingEnabled=!1,e.mozImageSmoothingEnabled=!1,e.msImageSmoothingEnabled=!1,e.oImageSmoothingEnabled=!1,e.setTransform(1,0,0,1,0,0),e.translate(.5,.5),e.fillStyle="#CCC",e.fillRect(0,0,t,n),e.fillStyle="#000000",e.beginPath(),t>i.length){e.moveTo(0,n-1);for(var s=0;s<i.length;s++){var u=Math.floor(t*s/i.length),l=i[s]>1?Math.floor(n*(1-Math.log(i[s])/a)):n-1;e.lineTo(u,l)}e.lineTo(t,n-1),e.lineTo(0,n-1),e.fill()}else{for(u=0;u<t;u++){l=i[s=Math.floor(u*i.length/t)]>1?Math.floor(n*(1-Math.log(i[s])/a)):n-1;e.lineTo(u,l)}e.lineTo(t,n-1),e.lineTo(0,n-1),e.fill()}},t.prototype.render=function(){var e=this;return s.createElement("canvas",{width:"400",height:"150",ref:function(t){e.canvas=t}})},t=o([a.observer],t)}(s.Component);t.default=u},function(e,t,n){"use strict";
/*!
 * isobject <https://github.com/jonschlinkert/isobject>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */e.exports=function(e){return null!=e&&"object"==typeof e&&!1===Array.isArray(e)}},function(e,t,n){"use strict";
/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */var r=n(56);function i(e){return!0===r(e)&&"[object Object]"===Object.prototype.toString.call(e)}e.exports=function(e){var t,n;return!1!==i(e)&&("function"==typeof(t=e.constructor)&&(!1!==i(n=t.prototype)&&!1!==n.hasOwnProperty("isPrototypeOf")))}},function(e,t,n){"use strict";
/*!
 * is-extendable <https://github.com/jonschlinkert/is-extendable>
 *
 * Copyright (c) 2015-2017, Jon Schlinkert.
 * Released under the MIT License.
 */var r=n(57);e.exports=function(e){return r(e)||"function"==typeof e||Array.isArray(e)}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";var r=n(15),i=n(16),o=n(59);e.exports=function(){function e(e,t,n,r,a,s){s!==o&&i(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=r,n.PropTypes=n,n}},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},a=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var s=n(5),u=n(0),l=n(34),c=n(30),h=n(55),p=n(54),f=function(e){function t(t){var n=e.call(this,t)||this;return n.canvas=null,n.zoom=null,n.cursor=null,n.state={x:0,y:0,canvas:null},n}return i(t,e),t.prototype.componentDidMount=function(){this.props.image.initRenderer(this.canvas),this.setState({canvas:this.canvas})},t.prototype.render=function(){var e=this;return u.createElement("div",null,c.default.map(function(t){return u.createElement("button",{onClick:function(){return e.props.image.updateScaleMode(t)},key:"edit-scale-"+t},t)}),u.createElement("br",null),u.createElement(l.default,{onPositionChanged:function(t){var n=t.position;e.setState(o({},n))},style:{display:"inline-block"}},u.createElement("canvas",{style:{width:800,height:800,background:"#000"},ref:function(t){e.canvas=t}})),u.createElement(h.default,{stats:this.props.image.stats}),u.createElement(p.default,{width:200,height:150,x:this.state.x,y:this.state.y,canvasWidth:800,canvas:this.state.canvas}))},t=a([s.observer],t)}(u.Component);t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(5),i=n(0);t.default=r.inject("imageStore")(function(e){return i.createElement("input",{type:"file",accept:".fits,.fit,.FIT,.FITS",onChange:function(t){e.imageStore.addImage(t.target.files[0]),t.target.value=""}})})},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var a=n(5),s=n(0),u=n(62),l=n(61),c=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.render=function(){return s.createElement("div",null,s.createElement("h1",null,this.props.appStore.name),null===this.props.imageStore.selectedImage&&s.createElement(u.default,null),this.props.imageStore.images.length>0&&s.createElement(l.default,{image:this.props.imageStore.selectedImage}))},t=o([a.inject("appStore","imageStore"),a.observer],t)}(s.Component);t.default=c},function(e,t,n){"use strict";e.exports=function(e){var t=(e?e.ownerDocument||e:document).defaultView||window;return!(!e||!("function"==typeof t.Node?e instanceof t.Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}},function(e,t,n){"use strict";var r=n(64);e.exports=function(e){return r(e)&&3==e.nodeType}},function(e,t,n){"use strict";var r=n(65);e.exports=function e(t,n){return!(!t||!n)&&(t===n||!r(t)&&(r(n)?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty;function i(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}e.exports=function(e,t){if(i(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),o=Object.keys(t);if(n.length!==o.length)return!1;for(var a=0;a<n.length;a++)if(!r.call(t,n[a])||!i(e[n[a]],t[n[a]]))return!1;return!0}},function(e,t,n){"use strict";e.exports=function(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}},function(e,t,n){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),i={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};e.exports=i},function(e,t,n){"use strict";
/** @license React v16.3.2
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(16),i=n(0),o=n(69),a=n(6),s=n(15),u=n(68),l=n(67),c=n(66),h=n(31);function p(e){for(var t=arguments.length-1,n="http://reactjs.org/docs/error-decoder.html?invariant="+e,i=0;i<t;i++)n+="&args[]="+encodeURIComponent(arguments[i+1]);r(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}i||p("227");var f={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,invokeGuardedCallback:function(e,t,n,r,i,o,a,s,u){(function(e,t,n,r,i,o,a,s,u){this._hasCaughtError=!1,this._caughtError=null;var l=Array.prototype.slice.call(arguments,3);try{t.apply(n,l)}catch(e){this._caughtError=e,this._hasCaughtError=!0}}).apply(f,arguments)},invokeGuardedCallbackAndCatchFirstError:function(e,t,n,r,i,o,a,s,u){if(f.invokeGuardedCallback.apply(this,arguments),f.hasCaughtError()){var l=f.clearCaughtError();f._hasRethrowError||(f._hasRethrowError=!0,f._rethrowError=l)}},rethrowCaughtError:function(){return function(){if(f._hasRethrowError){var e=f._rethrowError;throw f._rethrowError=null,f._hasRethrowError=!1,e}}.apply(f,arguments)},hasCaughtError:function(){return f._hasCaughtError},clearCaughtError:function(){if(f._hasCaughtError){var e=f._caughtError;return f._caughtError=null,f._hasCaughtError=!1,e}p("198")}};var d=null,m={};function g(){if(d)for(var e in m){var t=m[e],n=d.indexOf(e);if(-1<n||p("96",e),!y[n])for(var r in t.extractEvents||p("97",e),y[n]=t,n=t.eventTypes){var i=void 0,o=n[r],a=t,s=r;b.hasOwnProperty(s)&&p("99",s),b[s]=o;var u=o.phasedRegistrationNames;if(u){for(i in u)u.hasOwnProperty(i)&&v(u[i],a,s);i=!0}else o.registrationName?(v(o.registrationName,a,s),i=!0):i=!1;i||p("98",r,e)}}}function v(e,t,n){x[e]&&p("100",e),x[e]=t,_[e]=t.eventTypes[n].dependencies}var y=[],b={},x={},_={};function E(e){d&&p("101"),d=Array.prototype.slice.call(e),g()}function w(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];m.hasOwnProperty(t)&&m[t]===r||(m[t]&&p("102",t),m[t]=r,n=!0)}n&&g()}var S=Object.freeze({plugins:y,eventNameDispatchConfigs:b,registrationNameModules:x,registrationNameDependencies:_,possibleRegistrationNames:null,injectEventPluginOrder:E,injectEventPluginsByName:w}),T=null,k=null,C=null;function O(e,t,n,r){t=e.type||"unknown-event",e.currentTarget=C(r),f.invokeGuardedCallbackAndCatchFirstError(t,n,void 0,e),e.currentTarget=null}function A(e,t){return null==t&&p("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function P(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var I=null;function N(e,t){if(e){var n=e._dispatchListeners,r=e._dispatchInstances;if(Array.isArray(n))for(var i=0;i<n.length&&!e.isPropagationStopped();i++)O(e,t,n[i],r[i]);else n&&O(e,t,n,r);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function R(e){return N(e,!0)}function D(e){return N(e,!1)}var L={injectEventPluginOrder:E,injectEventPluginsByName:w};function F(e,t){var n=e.stateNode;if(!n)return null;var r=T(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&p("231",t,typeof n),n)}function M(e,t){null!==e&&(I=A(I,e)),e=I,I=null,e&&(P(e,t?R:D),I&&p("95"),f.rethrowCaughtError())}function U(e,t,n,r){for(var i=null,o=0;o<y.length;o++){var a=y[o];a&&(a=a.extractEvents(e,t,n,r))&&(i=A(i,a))}M(i,!1)}var B=Object.freeze({injection:L,getListener:F,runEventsInBatch:M,runExtractedEventsInBatch:U}),j=Math.random().toString(36).slice(2),G="__reactInternalInstance$"+j,V="__reactEventHandlers$"+j;function z(e){if(e[G])return e[G];for(;!e[G];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[G]).tag||6===e.tag?e:null}function K(e){if(5===e.tag||6===e.tag)return e.stateNode;p("33")}function W(e){return e[V]||null}var H=Object.freeze({precacheFiberNode:function(e,t){t[G]=e},getClosestInstanceFromNode:z,getInstanceFromNode:function(e){return!(e=e[G])||5!==e.tag&&6!==e.tag?null:e},getNodeFromInstance:K,getFiberCurrentPropsFromNode:W,updateFiberProps:function(e,t){e[V]=t}});function X(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function q(e,t,n){for(var r=[];e;)r.push(e),e=X(e);for(e=r.length;0<e--;)t(r[e],"captured",n);for(e=0;e<r.length;e++)t(r[e],"bubbled",n)}function $(e,t,n){(t=F(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=A(n._dispatchListeners,t),n._dispatchInstances=A(n._dispatchInstances,e))}function Y(e){e&&e.dispatchConfig.phasedRegistrationNames&&q(e._targetInst,$,e)}function Z(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var t=e._targetInst;q(t=t?X(t):null,$,e)}}function Q(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=F(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=A(n._dispatchListeners,t),n._dispatchInstances=A(n._dispatchInstances,e))}function J(e){e&&e.dispatchConfig.registrationName&&Q(e._targetInst,null,e)}function ee(e){P(e,Y)}function te(e,t,n,r){if(n&&r)e:{for(var i=n,o=r,a=0,s=i;s;s=X(s))a++;s=0;for(var u=o;u;u=X(u))s++;for(;0<a-s;)i=X(i),a--;for(;0<s-a;)o=X(o),s--;for(;a--;){if(i===o||i===o.alternate)break e;i=X(i),o=X(o)}i=null}else i=null;for(o=i,i=[];n&&n!==o&&(null===(a=n.alternate)||a!==o);)i.push(n),n=X(n);for(n=[];r&&r!==o&&(null===(a=r.alternate)||a!==o);)n.push(r),r=X(r);for(r=0;r<i.length;r++)Q(i[r],"bubbled",e);for(e=n.length;0<e--;)Q(n[e],"captured",t)}var ne=Object.freeze({accumulateTwoPhaseDispatches:ee,accumulateTwoPhaseDispatchesSkipTarget:function(e){P(e,Z)},accumulateEnterLeaveDispatches:te,accumulateDirectDispatches:function(e){P(e,J)}}),re=null;function ie(){return!re&&o.canUseDOM&&(re="textContent"in document.documentElement?"textContent":"innerText"),re}var oe={_root:null,_startText:null,_fallbackText:null};function ae(){if(oe._fallbackText)return oe._fallbackText;var e,t,n=oe._startText,r=n.length,i=se(),o=i.length;for(e=0;e<r&&n[e]===i[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===i[o-t];t++);return oe._fallbackText=i.slice(e,1<t?1-t:void 0),oe._fallbackText}function se(){return"value"in oe._root?oe._root.value:oe._root[ie()]}var ue="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),le={type:null,target:null,currentTarget:s.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function ce(e,t,n,r){for(var i in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(i)&&((t=e[i])?this[i]=t(n):"target"===i?this.target=r:this[i]=n[i]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?s.thatReturnsTrue:s.thatReturnsFalse,this.isPropagationStopped=s.thatReturnsFalse,this}function he(e,t,n,r){if(this.eventPool.length){var i=this.eventPool.pop();return this.call(i,e,t,n,r),i}return new this(e,t,n,r)}function pe(e){e instanceof this||p("223"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function fe(e){e.eventPool=[],e.getPooled=he,e.release=pe}a(ce.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=s.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=s.thatReturnsTrue)},persist:function(){this.isPersistent=s.thatReturnsTrue},isPersistent:s.thatReturnsFalse,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;for(t=0;t<ue.length;t++)this[ue[t]]=null}}),ce.Interface=le,ce.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var i=new t;return a(i,n.prototype),n.prototype=i,n.prototype.constructor=n,n.Interface=a({},r.Interface,e),n.extend=r.extend,fe(n),n},fe(ce);var de=ce.extend({data:null}),me=ce.extend({data:null}),ge=[9,13,27,32],ve=o.canUseDOM&&"CompositionEvent"in window,ye=null;o.canUseDOM&&"documentMode"in document&&(ye=document.documentMode);var be=o.canUseDOM&&"TextEvent"in window&&!ye,xe=o.canUseDOM&&(!ve||ye&&8<ye&&11>=ye),_e=String.fromCharCode(32),Ee={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["topCompositionEnd","topKeyPress","topTextInput","topPaste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"topBlur topCompositionEnd topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"topBlur topCompositionStart topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"topBlur topCompositionUpdate topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")}},we=!1;function Se(e,t){switch(e){case"topKeyUp":return-1!==ge.indexOf(t.keyCode);case"topKeyDown":return 229!==t.keyCode;case"topKeyPress":case"topMouseDown":case"topBlur":return!0;default:return!1}}function Te(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var ke=!1;var Ce={eventTypes:Ee,extractEvents:function(e,t,n,r){var i=void 0,o=void 0;if(ve)e:{switch(e){case"topCompositionStart":i=Ee.compositionStart;break e;case"topCompositionEnd":i=Ee.compositionEnd;break e;case"topCompositionUpdate":i=Ee.compositionUpdate;break e}i=void 0}else ke?Se(e,n)&&(i=Ee.compositionEnd):"topKeyDown"===e&&229===n.keyCode&&(i=Ee.compositionStart);return i?(xe&&(ke||i!==Ee.compositionStart?i===Ee.compositionEnd&&ke&&(o=ae()):(oe._root=r,oe._startText=se(),ke=!0)),i=de.getPooled(i,t,n,r),o?i.data=o:null!==(o=Te(n))&&(i.data=o),ee(i),o=i):o=null,(e=be?function(e,t){switch(e){case"topCompositionEnd":return Te(t);case"topKeyPress":return 32!==t.which?null:(we=!0,_e);case"topTextInput":return(e=t.data)===_e&&we?null:e;default:return null}}(e,n):function(e,t){if(ke)return"topCompositionEnd"===e||!ve&&Se(e,t)?(e=ae(),oe._root=null,oe._startText=null,oe._fallbackText=null,ke=!1,e):null;switch(e){case"topPaste":return null;case"topKeyPress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"topCompositionEnd":return xe?null:t.data;default:return null}}(e,n))?((t=me.getPooled(Ee.beforeInput,t,n,r)).data=e,ee(t)):t=null,null===o?t:null===t?o:[o,t]}},Oe=null,Ae={injectFiberControlledHostComponent:function(e){Oe=e}},Pe=null,Ie=null;function Ne(e){if(e=k(e)){Oe&&"function"==typeof Oe.restoreControlledState||p("194");var t=T(e.stateNode);Oe.restoreControlledState(e.stateNode,e.type,t)}}function Re(e){Pe?Ie?Ie.push(e):Ie=[e]:Pe=e}function De(){return null!==Pe||null!==Ie}function Le(){if(Pe){var e=Pe,t=Ie;if(Ie=Pe=null,Ne(e),t)for(e=0;e<t.length;e++)Ne(t[e])}}var Fe=Object.freeze({injection:Ae,enqueueStateRestore:Re,needsStateRestore:De,restoreStateIfNeeded:Le});function Me(e,t){return e(t)}function Ue(e,t,n){return e(t,n)}function Be(){}var je=!1;function Ge(e,t){if(je)return e(t);je=!0;try{return Me(e,t)}finally{je=!1,De()&&(Be(),Le())}}var Ve={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function ze(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Ve[e.type]:"textarea"===t}function Ke(e){return(e=e.target||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function We(e,t){return!(!o.canUseDOM||t&&!("addEventListener"in document))&&((t=(e="on"+e)in document)||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t)}function He(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Xe(e){e._valueTracker||(e._valueTracker=function(e){var t=He(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&"function"==typeof n.get&&"function"==typeof n.set)return Object.defineProperty(e,t,{configurable:!0,get:function(){return n.get.call(this)},set:function(e){r=""+e,n.set.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}(e))}function qe(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=He(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var $e=i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,Ye="function"==typeof Symbol&&Symbol.for,Ze=Ye?Symbol.for("react.element"):60103,Qe=Ye?Symbol.for("react.call"):60104,Je=Ye?Symbol.for("react.return"):60105,et=Ye?Symbol.for("react.portal"):60106,tt=Ye?Symbol.for("react.fragment"):60107,nt=Ye?Symbol.for("react.strict_mode"):60108,rt=Ye?Symbol.for("react.provider"):60109,it=Ye?Symbol.for("react.context"):60110,ot=Ye?Symbol.for("react.async_mode"):60111,at=Ye?Symbol.for("react.forward_ref"):60112,st="function"==typeof Symbol&&Symbol.iterator;function ut(e){return null==e?null:"function"==typeof(e=st&&e[st]||e["@@iterator"])?e:null}function lt(e){if("function"==typeof(e=e.type))return e.displayName||e.name;if("string"==typeof e)return e;switch(e){case tt:return"ReactFragment";case et:return"ReactPortal";case Qe:return"ReactCall";case Je:return"ReactReturn"}if("object"==typeof e&&null!==e)switch(e.$$typeof){case at:return""!==(e=e.render.displayName||e.render.name||"")?"ForwardRef("+e+")":"ForwardRef"}return null}function ct(e){var t="";do{e:switch(e.tag){case 0:case 1:case 2:case 5:var n=e._debugOwner,r=e._debugSource,i=lt(e),o=null;n&&(o=lt(n)),i="\n    in "+(i||"Unknown")+((n=r)?" (at "+n.fileName.replace(/^.*[\\\/]/,"")+":"+n.lineNumber+")":o?" (created by "+o+")":"");break e;default:i=""}t+=i,e=e.return}while(e);return t}var ht=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,pt={},ft={};function dt(e,t,n,r,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t}var mt={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){mt[e]=new dt(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];mt[t]=new dt(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){mt[e]=new dt(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","preserveAlpha"].forEach(function(e){mt[e]=new dt(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){mt[e]=new dt(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){mt[e]=new dt(e,3,!0,e.toLowerCase(),null)}),["capture","download"].forEach(function(e){mt[e]=new dt(e,4,!1,e.toLowerCase(),null)}),["cols","rows","size","span"].forEach(function(e){mt[e]=new dt(e,6,!1,e.toLowerCase(),null)}),["rowSpan","start"].forEach(function(e){mt[e]=new dt(e,5,!1,e.toLowerCase(),null)});var gt=/[\-:]([a-z])/g;function vt(e){return e[1].toUpperCase()}function yt(e,t,n,r){var i=mt.hasOwnProperty(t)?mt[t]:null;(null!==i?0===i.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,i,r)&&(n=null),r||null===i?function(e){return!!ft.hasOwnProperty(e)||!pt.hasOwnProperty(e)&&(ht.test(e)?ft[e]=!0:(pt[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=null===n?3!==i.type&&"":n:(t=i.attributeName,r=i.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function bt(e,t){var n=t.checked;return a({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function xt(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=Tt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function _t(e,t){null!=(t=t.checked)&&yt(e,"checked",t,!1)}function Et(e,t){_t(e,t);var n=Tt(t.value);null!=n&&("number"===t.type?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n)),t.hasOwnProperty("value")?St(e,t.type,n):t.hasOwnProperty("defaultValue")&&St(e,t.type,Tt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function wt(e,t){(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue"))&&(""===e.value&&(e.value=""+e._wrapperState.initialValue),e.defaultValue=""+e._wrapperState.initialValue),""!==(t=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!e.defaultChecked,""!==t&&(e.name=t)}function St(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Tt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(gt,vt);mt[t]=new dt(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(gt,vt);mt[t]=new dt(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(gt,vt);mt[t]=new dt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),mt.tabIndex=new dt("tabIndex",1,!1,"tabindex",null);var kt={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"topBlur topChange topClick topFocus topInput topKeyDown topKeyUp topSelectionChange".split(" ")}};function Ct(e,t,n){return(e=ce.getPooled(kt.change,e,t,n)).type="change",Re(n),ee(e),e}var Ot=null,At=null;function Pt(e){M(e,!1)}function It(e){if(qe(K(e)))return e}function Nt(e,t){if("topChange"===e)return t}var Rt=!1;function Dt(){Ot&&(Ot.detachEvent("onpropertychange",Lt),At=Ot=null)}function Lt(e){"value"===e.propertyName&&It(At)&&Ge(Pt,e=Ct(At,e,Ke(e)))}function Ft(e,t,n){"topFocus"===e?(Dt(),At=n,(Ot=t).attachEvent("onpropertychange",Lt)):"topBlur"===e&&Dt()}function Mt(e){if("topSelectionChange"===e||"topKeyUp"===e||"topKeyDown"===e)return It(At)}function Ut(e,t){if("topClick"===e)return It(t)}function Bt(e,t){if("topInput"===e||"topChange"===e)return It(t)}o.canUseDOM&&(Rt=We("input")&&(!document.documentMode||9<document.documentMode));var jt={eventTypes:kt,_isInputEventSupported:Rt,extractEvents:function(e,t,n,r){var i=t?K(t):window,o=void 0,a=void 0,s=i.nodeName&&i.nodeName.toLowerCase();if("select"===s||"input"===s&&"file"===i.type?o=Nt:ze(i)?Rt?o=Bt:(o=Mt,a=Ft):(s=i.nodeName)&&"input"===s.toLowerCase()&&("checkbox"===i.type||"radio"===i.type)&&(o=Ut),o&&(o=o(e,t)))return Ct(o,n,r);a&&a(e,i,t),"topBlur"===e&&null!=t&&(e=t._wrapperState||i._wrapperState)&&e.controlled&&"number"===i.type&&St(i,"number",i.value)}},Gt=ce.extend({view:null,detail:null}),Vt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function zt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Vt[e])&&!!t[e]}function Kt(){return zt}var Wt=Gt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Kt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)}}),Ht={mouseEnter:{registrationName:"onMouseEnter",dependencies:["topMouseOut","topMouseOver"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["topMouseOut","topMouseOver"]}},Xt={eventTypes:Ht,extractEvents:function(e,t,n,r){if("topMouseOver"===e&&(n.relatedTarget||n.fromElement)||"topMouseOut"!==e&&"topMouseOver"!==e)return null;var i=r.window===r?r:(i=r.ownerDocument)?i.defaultView||i.parentWindow:window;if("topMouseOut"===e?(e=t,t=(t=n.relatedTarget||n.toElement)?z(t):null):e=null,e===t)return null;var o=null==e?i:K(e);i=null==t?i:K(t);var a=Wt.getPooled(Ht.mouseLeave,e,n,r);return a.type="mouseleave",a.target=o,a.relatedTarget=i,(n=Wt.getPooled(Ht.mouseEnter,t,n,r)).type="mouseenter",n.target=i,n.relatedTarget=o,te(a,n,e,t),[a,n]}};function qt(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function $t(e){return!!(e=e._reactInternalFiber)&&2===qt(e)}function Yt(e){2!==qt(e)&&p("188")}function Zt(e){var t=e.alternate;if(!t)return 3===(t=qt(e))&&p("188"),1===t?null:e;for(var n=e,r=t;;){var i=n.return,o=i?i.alternate:null;if(!i||!o)break;if(i.child===o.child){for(var a=i.child;a;){if(a===n)return Yt(i),e;if(a===r)return Yt(i),t;a=a.sibling}p("188")}if(n.return!==r.return)n=i,r=o;else{a=!1;for(var s=i.child;s;){if(s===n){a=!0,n=i,r=o;break}if(s===r){a=!0,r=i,n=o;break}s=s.sibling}if(!a){for(s=o.child;s;){if(s===n){a=!0,n=o,r=i;break}if(s===r){a=!0,r=o,n=i;break}s=s.sibling}a||p("189")}}n.alternate!==r&&p("190")}return 3!==n.tag&&p("188"),n.stateNode.current===n?e:t}function Qt(e){if(!(e=Zt(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var Jt=ce.extend({animationName:null,elapsedTime:null,pseudoElement:null}),en=ce.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),tn=Gt.extend({relatedTarget:null});function nn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var rn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},on={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},an=Gt.extend({key:function(e){if(e.key){var t=rn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=nn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?on[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Kt,charCode:function(e){return"keypress"===e.type?nn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?nn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),sn=Wt.extend({dataTransfer:null}),un=Gt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Kt}),ln=ce.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),cn=Wt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),hn={},pn={};function fn(e,t){var n=e[0].toUpperCase()+e.slice(1),r="on"+n;t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n="top"+n],isInteractive:t},hn[e]=t,pn[n]=t}"blur cancel click close contextMenu copy cut doubleClick dragEnd dragStart drop focus input invalid keyDown keyPress keyUp mouseDown mouseUp paste pause play rateChange reset seeked submit touchCancel touchEnd touchStart volumeChange".split(" ").forEach(function(e){fn(e,!0)}),"abort animationEnd animationIteration animationStart canPlay canPlayThrough drag dragEnter dragExit dragLeave dragOver durationChange emptied encrypted ended error load loadedData loadedMetadata loadStart mouseMove mouseOut mouseOver playing progress scroll seeking stalled suspend timeUpdate toggle touchMove transitionEnd waiting wheel".split(" ").forEach(function(e){fn(e,!1)});var dn={eventTypes:hn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=pn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var i=pn[e];if(!i)return null;switch(e){case"topKeyPress":if(0===nn(n))return null;case"topKeyDown":case"topKeyUp":e=an;break;case"topBlur":case"topFocus":e=tn;break;case"topClick":if(2===n.button)return null;case"topDoubleClick":case"topMouseDown":case"topMouseMove":case"topMouseUp":case"topMouseOut":case"topMouseOver":case"topContextMenu":e=Wt;break;case"topDrag":case"topDragEnd":case"topDragEnter":case"topDragExit":case"topDragLeave":case"topDragOver":case"topDragStart":case"topDrop":e=sn;break;case"topTouchCancel":case"topTouchEnd":case"topTouchMove":case"topTouchStart":e=un;break;case"topAnimationEnd":case"topAnimationIteration":case"topAnimationStart":e=Jt;break;case"topTransitionEnd":e=ln;break;case"topScroll":e=Gt;break;case"topWheel":e=cn;break;case"topCopy":case"topCut":case"topPaste":e=en;break;default:e=ce}return ee(t=e.getPooled(i,t,n,r)),t}},mn=dn.isInteractiveTopLevelEventType,gn=[];function vn(e){var t=e.targetInst;do{if(!t){e.ancestors.push(t);break}var n;for(n=t;n.return;)n=n.return;if(!(n=3!==n.tag?null:n.stateNode.containerInfo))break;e.ancestors.push(t),t=z(n)}while(t);for(n=0;n<e.ancestors.length;n++)t=e.ancestors[n],U(e.topLevelType,t,e.nativeEvent,Ke(e.nativeEvent))}var yn=!0;function bn(e){yn=!!e}function xn(e,t,n){if(!n)return null;e=(mn(e)?En:wn).bind(null,e),n.addEventListener(t,e,!1)}function _n(e,t,n){if(!n)return null;e=(mn(e)?En:wn).bind(null,e),n.addEventListener(t,e,!0)}function En(e,t){Ue(wn,e,t)}function wn(e,t){if(yn){var n=Ke(t);if(null!==(n=z(n))&&"number"==typeof n.tag&&2!==qt(n)&&(n=null),gn.length){var r=gn.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{Ge(vn,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>gn.length&&gn.push(e)}}}var Sn=Object.freeze({get _enabled(){return yn},setEnabled:bn,isEnabled:function(){return yn},trapBubbledEvent:xn,trapCapturedEvent:_n,dispatchEvent:wn});function Tn(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n["ms"+e]="MS"+t,n["O"+e]="o"+t.toLowerCase(),n}var kn={animationend:Tn("Animation","AnimationEnd"),animationiteration:Tn("Animation","AnimationIteration"),animationstart:Tn("Animation","AnimationStart"),transitionend:Tn("Transition","TransitionEnd")},Cn={},On={};function An(e){if(Cn[e])return Cn[e];if(!kn[e])return e;var t,n=kn[e];for(t in n)if(n.hasOwnProperty(t)&&t in On)return Cn[e]=n[t];return e}o.canUseDOM&&(On=document.createElement("div").style,"AnimationEvent"in window||(delete kn.animationend.animation,delete kn.animationiteration.animation,delete kn.animationstart.animation),"TransitionEvent"in window||delete kn.transitionend.transition);var Pn={topAnimationEnd:An("animationend"),topAnimationIteration:An("animationiteration"),topAnimationStart:An("animationstart"),topBlur:"blur",topCancel:"cancel",topChange:"change",topClick:"click",topClose:"close",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoad:"load",topLoadStart:"loadstart",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topScroll:"scroll",topSelectionChange:"selectionchange",topTextInput:"textInput",topToggle:"toggle",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topTransitionEnd:An("transitionend"),topWheel:"wheel"},In={topAbort:"abort",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topSeeked:"seeked",topSeeking:"seeking",topStalled:"stalled",topSuspend:"suspend",topTimeUpdate:"timeupdate",topVolumeChange:"volumechange",topWaiting:"waiting"},Nn={},Rn=0,Dn="_reactListenersID"+(""+Math.random()).slice(2);function Ln(e){return Object.prototype.hasOwnProperty.call(e,Dn)||(e[Dn]=Rn++,Nn[e[Dn]]={}),Nn[e[Dn]]}function Fn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Mn(e,t){var n,r=Fn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Fn(r)}}function Un(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&"text"===e.type||"textarea"===t||"true"===e.contentEditable)}var Bn=o.canUseDOM&&"documentMode"in document&&11>=document.documentMode,jn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"topBlur topContextMenu topFocus topKeyDown topKeyUp topMouseDown topMouseUp topSelectionChange".split(" ")}},Gn=null,Vn=null,zn=null,Kn=!1;function Wn(e,t){if(Kn||null==Gn||Gn!==u())return null;var n=Gn;return"selectionStart"in n&&Un(n)?n={start:n.selectionStart,end:n.selectionEnd}:window.getSelection?n={anchorNode:(n=window.getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset}:n=void 0,zn&&l(zn,n)?null:(zn=n,(e=ce.getPooled(jn.select,Vn,e,t)).type="select",e.target=Gn,ee(e),e)}var Hn={eventTypes:jn,extractEvents:function(e,t,n,r){var i,o=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(i=!o)){e:{o=Ln(o),i=_.onSelect;for(var a=0;a<i.length;a++){var s=i[a];if(!o.hasOwnProperty(s)||!o[s]){o=!1;break e}}o=!0}i=!o}if(i)return null;switch(o=t?K(t):window,e){case"topFocus":(ze(o)||"true"===o.contentEditable)&&(Gn=o,Vn=t,zn=null);break;case"topBlur":zn=Vn=Gn=null;break;case"topMouseDown":Kn=!0;break;case"topContextMenu":case"topMouseUp":return Kn=!1,Wn(n,r);case"topSelectionChange":if(Bn)break;case"topKeyDown":case"topKeyUp":return Wn(n,r)}return null}};function Xn(e,t,n,r){this.tag=e,this.key=n,this.stateNode=this.type=null,this.sibling=this.child=this.return=null,this.index=0,this.ref=null,this.pendingProps=t,this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.expirationTime=0,this.alternate=null}function qn(e,t,n){var r=e.alternate;return null===r?((r=new Xn(e.tag,t,e.key,e.mode)).type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.effectTag=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.expirationTime=n,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function $n(e,t,n){var r=e.type,i=e.key;e=e.props;var o=void 0;if("function"==typeof r)o=r.prototype&&r.prototype.isReactComponent?2:0;else if("string"==typeof r)o=5;else switch(r){case tt:return Yn(e.children,t,n,i);case ot:o=11,t|=3;break;case nt:o=11,t|=2;break;case Qe:o=7;break;case Je:o=9;break;default:if("object"==typeof r&&null!==r)switch(r.$$typeof){case rt:o=13;break;case it:o=12;break;case at:o=14;break;default:if("number"==typeof r.tag)return(t=r).pendingProps=e,t.expirationTime=n,t;p("130",null==r?r:typeof r,"")}else p("130",null==r?r:typeof r,"")}return(t=new Xn(o,e,i,t)).type=r,t.expirationTime=n,t}function Yn(e,t,n,r){return(e=new Xn(10,e,r,t)).expirationTime=n,e}function Zn(e,t,n){return(e=new Xn(6,e,null,t)).expirationTime=n,e}function Qn(e,t,n){return(t=new Xn(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}L.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),T=H.getFiberCurrentPropsFromNode,k=H.getInstanceFromNode,C=H.getNodeFromInstance,L.injectEventPluginsByName({SimpleEventPlugin:dn,EnterLeaveEventPlugin:Xt,ChangeEventPlugin:jt,SelectEventPlugin:Hn,BeforeInputEventPlugin:Ce});var Jn=null,er=null;function tr(e){return function(t){try{return e(t)}catch(e){}}}function nr(e){"function"==typeof Jn&&Jn(e)}function rr(e){"function"==typeof er&&er(e)}function ir(e){return{baseState:e,expirationTime:0,first:null,last:null,callbackList:null,hasForceUpdate:!1,isInitialized:!1,capturedValues:null}}function or(e,t){null===e.last?e.first=e.last=t:(e.last.next=t,e.last=t),(0===e.expirationTime||e.expirationTime>t.expirationTime)&&(e.expirationTime=t.expirationTime)}new Set;var ar=void 0,sr=void 0;function ur(e){ar=sr=null;var t=e.alternate,n=e.updateQueue;null===n&&(n=e.updateQueue=ir(null)),null!==t?null===(e=t.updateQueue)&&(e=t.updateQueue=ir(null)):e=null,ar=n,sr=e!==n?e:null}function lr(e,t){ur(e),e=ar;var n=sr;null===n?or(e,t):null===e.last||null===n.last?(or(e,t),or(n,t)):(or(e,t),n.last=t)}function cr(e,t,n,r){return"function"==typeof(e=e.partialState)?e.call(t,n,r):e}function hr(e,t,n,r,i,o){null!==e&&e.updateQueue===n&&(n=t.updateQueue={baseState:n.baseState,expirationTime:n.expirationTime,first:n.first,last:n.last,isInitialized:n.isInitialized,capturedValues:n.capturedValues,callbackList:null,hasForceUpdate:!1}),n.expirationTime=0,n.isInitialized?e=n.baseState:(e=n.baseState=t.memoizedState,n.isInitialized=!0);for(var s=!0,u=n.first,l=!1;null!==u;){var c=u.expirationTime;if(c>o){var h=n.expirationTime;(0===h||h>c)&&(n.expirationTime=c),l||(l=!0,n.baseState=e)}else l||(n.first=u.next,null===n.first&&(n.last=null)),u.isReplace?(e=cr(u,r,e,i),s=!0):(c=cr(u,r,e,i))&&(e=s?a({},e,c):a(e,c),s=!1),u.isForced&&(n.hasForceUpdate=!0),null!==u.callback&&(null===(c=n.callbackList)&&(c=n.callbackList=[]),c.push(u)),null!==u.capturedValue&&(null===(c=n.capturedValues)?n.capturedValues=[u.capturedValue]:c.push(u.capturedValue));u=u.next}return null!==n.callbackList?t.effectTag|=32:null!==n.first||n.hasForceUpdate||null!==n.capturedValues||(t.updateQueue=null),l||(n.baseState=e),e}function pr(e,t){var n=e.callbackList;if(null!==n)for(e.callbackList=null,e=0;e<n.length;e++){var r=n[e],i=r.callback;r.callback=null,"function"!=typeof i&&p("191",i),i.call(t)}}var fr=Array.isArray;function dr(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){n=n._owner;var r=void 0;n&&(2!==n.tag&&p("110"),r=n.stateNode),r||p("147",e);var i=""+e;return null!==t&&null!==t.ref&&t.ref._stringRef===i?t.ref:((t=function(e){var t=r.refs===h?r.refs={}:r.refs;null===e?delete t[i]:t[i]=e})._stringRef=i,t)}"string"!=typeof e&&p("148"),n._owner||p("254",e)}return e}function mr(e,t){"textarea"!==e.type&&p("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function gr(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t,n){return(e=qn(e,t,n)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function a(t){return e&&null===t.alternate&&(t.effectTag=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=Zn(n,e.mode,r)).return=e,t):((t=i(t,n,r)).return=e,t)}function u(e,t,n,r){return null!==t&&t.type===n.type?((r=i(t,n.props,r)).ref=dr(e,t,n),r.return=e,r):((r=$n(n,e.mode,r)).ref=dr(e,t,n),r.return=e,r)}function l(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Qn(n,e.mode,r)).return=e,t):((t=i(t,n.children||[],r)).return=e,t)}function c(e,t,n,r,o){return null===t||10!==t.tag?((t=Yn(n,e.mode,r,o)).return=e,t):((t=i(t,n,r)).return=e,t)}function h(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Zn(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case Ze:return(n=$n(t,e.mode,n)).ref=dr(e,null,t),n.return=e,n;case et:return(t=Qn(t,e.mode,n)).return=e,t}if(fr(t)||ut(t))return(t=Yn(t,e.mode,n,null)).return=e,t;mr(e,t)}return null}function f(e,t,n,r){var i=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==i?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Ze:return n.key===i?n.type===tt?c(e,t,n.props.children,r,i):u(e,t,n,r):null;case et:return n.key===i?l(e,t,n,r):null}if(fr(n)||ut(n))return null!==i?null:c(e,t,n,r,null);mr(e,n)}return null}function d(e,t,n,r,i){if("string"==typeof r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Ze:return e=e.get(null===r.key?n:r.key)||null,r.type===tt?c(t,e,r.props.children,i,r.key):u(t,e,r,i);case et:return l(t,e=e.get(null===r.key?n:r.key)||null,r,i)}if(fr(r)||ut(r))return c(t,e=e.get(n)||null,r,i,null);mr(t,r)}return null}function m(i,a,s,u){for(var l=null,c=null,p=a,m=a=0,g=null;null!==p&&m<s.length;m++){p.index>m?(g=p,p=null):g=p.sibling;var v=f(i,p,s[m],u);if(null===v){null===p&&(p=g);break}e&&p&&null===v.alternate&&t(i,p),a=o(v,a,m),null===c?l=v:c.sibling=v,c=v,p=g}if(m===s.length)return n(i,p),l;if(null===p){for(;m<s.length;m++)(p=h(i,s[m],u))&&(a=o(p,a,m),null===c?l=p:c.sibling=p,c=p);return l}for(p=r(i,p);m<s.length;m++)(g=d(p,i,m,s[m],u))&&(e&&null!==g.alternate&&p.delete(null===g.key?m:g.key),a=o(g,a,m),null===c?l=g:c.sibling=g,c=g);return e&&p.forEach(function(e){return t(i,e)}),l}function g(i,a,s,u){var l=ut(s);"function"!=typeof l&&p("150"),null==(s=l.call(s))&&p("151");for(var c=l=null,m=a,g=a=0,v=null,y=s.next();null!==m&&!y.done;g++,y=s.next()){m.index>g?(v=m,m=null):v=m.sibling;var b=f(i,m,y.value,u);if(null===b){m||(m=v);break}e&&m&&null===b.alternate&&t(i,m),a=o(b,a,g),null===c?l=b:c.sibling=b,c=b,m=v}if(y.done)return n(i,m),l;if(null===m){for(;!y.done;g++,y=s.next())null!==(y=h(i,y.value,u))&&(a=o(y,a,g),null===c?l=y:c.sibling=y,c=y);return l}for(m=r(i,m);!y.done;g++,y=s.next())null!==(y=d(m,i,g,y.value,u))&&(e&&null!==y.alternate&&m.delete(null===y.key?g:y.key),a=o(y,a,g),null===c?l=y:c.sibling=y,c=y);return e&&m.forEach(function(e){return t(i,e)}),l}return function(e,r,o,s){"object"==typeof o&&null!==o&&o.type===tt&&null===o.key&&(o=o.props.children);var u="object"==typeof o&&null!==o;if(u)switch(o.$$typeof){case Ze:e:{var l=o.key;for(u=r;null!==u;){if(u.key===l){if(10===u.tag?o.type===tt:u.type===o.type){n(e,u.sibling),(r=i(u,o.type===tt?o.props.children:o.props,s)).ref=dr(e,u,o),r.return=e,e=r;break e}n(e,u);break}t(e,u),u=u.sibling}o.type===tt?((r=Yn(o.props.children,e.mode,s,o.key)).return=e,e=r):((s=$n(o,e.mode,s)).ref=dr(e,r,o),s.return=e,e=s)}return a(e);case et:e:{for(u=o.key;null!==r;){if(r.key===u){if(4===r.tag&&r.stateNode.containerInfo===o.containerInfo&&r.stateNode.implementation===o.implementation){n(e,r.sibling),(r=i(r,o.children||[],s)).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Qn(o,e.mode,s)).return=e,e=r}return a(e)}if("string"==typeof o||"number"==typeof o)return o=""+o,null!==r&&6===r.tag?(n(e,r.sibling),(r=i(r,o,s)).return=e,e=r):(n(e,r),(r=Zn(o,e.mode,s)).return=e,e=r),a(e);if(fr(o))return m(e,r,o,s);if(ut(o))return g(e,r,o,s);if(u&&mr(e,o),void 0===o)switch(e.tag){case 2:case 1:p("152",(s=e.type).displayName||s.name||"Component")}return n(e,r)}}var vr=gr(!0),yr=gr(!1);function br(e,t,n,r,i,o,s){function u(e,t,n){c(e,t,n,t.expirationTime)}function c(e,t,n,r){t.child=null===e?yr(t,null,n,r):vr(t,e.child,n,r)}function f(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function d(e,t,n,r,i,o){if(f(e,t),!n&&!i)return r&&O(t,!1),v(e,t);n=t.stateNode,$e.current=t;var a=i?null:n.render();return t.effectTag|=1,i&&(c(e,t,null,o),t.child=null),c(e,t,a,o),t.memoizedState=n.state,t.memoizedProps=n.props,r&&O(t,!0),t.child}function m(e){var t=e.stateNode;t.pendingContext?C(e,t.pendingContext,t.pendingContext!==t.context):t.context&&C(e,t.context,!1),_(e,t.containerInfo)}function g(e,t,n,r){var i=e.child;for(null!==i&&(i.return=e);null!==i;){switch(i.tag){case 12:var o=0|i.stateNode;if(i.type===t&&0!=(o&n)){for(o=i;null!==o;){var a=o.alternate;if(0===o.expirationTime||o.expirationTime>r)o.expirationTime=r,null!==a&&(0===a.expirationTime||a.expirationTime>r)&&(a.expirationTime=r);else{if(null===a||!(0===a.expirationTime||a.expirationTime>r))break;a.expirationTime=r}o=o.return}o=null}else o=i.child;break;case 13:o=i.type===e.type?null:i.child;break;default:o=i.child}if(null!==o)o.return=i;else for(o=i;null!==o;){if(o===e){o=null;break}if(null!==(i=o.sibling)){o=i;break}o=o.return}i=o}}function v(e,t){if(null!==e&&t.child!==e.child&&p("153"),null!==t.child){var n=qn(e=t.child,e.pendingProps,e.expirationTime);for(t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=qn(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}var y=e.shouldSetTextContent,b=e.shouldDeprioritizeSubtree,x=t.pushHostContext,_=t.pushHostContainer,E=r.pushProvider,w=n.getMaskedContext,S=n.getUnmaskedContext,T=n.hasContextChanged,k=n.pushContextProvider,C=n.pushTopLevelContextObject,O=n.invalidateContextProvider,A=i.enterHydrationState,P=i.resetHydrationState,I=i.tryToClaimNextHydratableInstance,N=(e=function(e,t,n,r,i){function o(e,t,n,r,i,o){if(null===t||null!==e.updateQueue&&e.updateQueue.hasForceUpdate)return!0;var a=e.stateNode;return e=e.type,"function"==typeof a.shouldComponentUpdate?a.shouldComponentUpdate(n,i,o):!(e.prototype&&e.prototype.isPureReactComponent&&l(t,n)&&l(r,i))}function s(e,t){t.updater=v,e.stateNode=t,t._reactInternalFiber=e}function u(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&v.enqueueReplaceState(t,t.state,null)}function c(e,t,n,r){if("function"==typeof(e=e.type).getDerivedStateFromProps)return e.getDerivedStateFromProps.call(null,n,r)}var p=e.cacheContext,f=e.getMaskedContext,d=e.getUnmaskedContext,m=e.isContextConsumer,g=e.hasContextChanged,v={isMounted:$t,enqueueSetState:function(e,r,i){e=e._reactInternalFiber,i=void 0===i?null:i;var o=n(e);lr(e,{expirationTime:o,partialState:r,callback:i,isReplace:!1,isForced:!1,capturedValue:null,next:null}),t(e,o)},enqueueReplaceState:function(e,r,i){e=e._reactInternalFiber,i=void 0===i?null:i;var o=n(e);lr(e,{expirationTime:o,partialState:r,callback:i,isReplace:!0,isForced:!1,capturedValue:null,next:null}),t(e,o)},enqueueForceUpdate:function(e,r){e=e._reactInternalFiber,r=void 0===r?null:r;var i=n(e);lr(e,{expirationTime:i,partialState:null,callback:r,isReplace:!1,isForced:!0,capturedValue:null,next:null}),t(e,i)}};return{adoptClassInstance:s,callGetDerivedStateFromProps:c,constructClassInstance:function(e,t){var n=e.type,r=d(e),i=m(e),o=i?f(e,r):h,u=null!==(n=new n(t,o)).state&&void 0!==n.state?n.state:null;return s(e,n),e.memoizedState=u,null!=(t=c(e,0,t,u))&&(e.memoizedState=a({},e.memoizedState,t)),i&&p(e,r,o),n},mountClassInstance:function(e,t){var n=e.type,r=e.alternate,i=e.stateNode,o=e.pendingProps,a=d(e);i.props=o,i.state=e.memoizedState,i.refs=h,i.context=f(e,a),"function"==typeof n.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(n=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),n!==i.state&&v.enqueueReplaceState(i,i.state,null),null!==(n=e.updateQueue)&&(i.state=hr(r,e,n,i,o,t))),"function"==typeof i.componentDidMount&&(e.effectTag|=4)},resumeMountClassInstance:function(e,t){var n=e.type,s=e.stateNode;s.props=e.memoizedProps,s.state=e.memoizedState;var l=e.memoizedProps,h=e.pendingProps,p=s.context,m=d(e);m=f(e,m),(n="function"==typeof n.getDerivedStateFromProps||"function"==typeof s.getSnapshotBeforeUpdate)||"function"!=typeof s.UNSAFE_componentWillReceiveProps&&"function"!=typeof s.componentWillReceiveProps||(l!==h||p!==m)&&u(e,s,h,m),p=e.memoizedState,t=null!==e.updateQueue?hr(null,e,e.updateQueue,s,h,t):p;var v=void 0;if(l!==h&&(v=c(e,0,h,t)),null!=v){t=null==t?v:a({},t,v);var y=e.updateQueue;null!==y&&(y.baseState=a({},y.baseState,v))}return l!==h||p!==t||g()||null!==e.updateQueue&&e.updateQueue.hasForceUpdate?((l=o(e,l,h,p,t,m))?(n||"function"!=typeof s.UNSAFE_componentWillMount&&"function"!=typeof s.componentWillMount||("function"==typeof s.componentWillMount&&s.componentWillMount(),"function"==typeof s.UNSAFE_componentWillMount&&s.UNSAFE_componentWillMount()),"function"==typeof s.componentDidMount&&(e.effectTag|=4)):("function"==typeof s.componentDidMount&&(e.effectTag|=4),r(e,h),i(e,t)),s.props=h,s.state=t,s.context=m,l):("function"==typeof s.componentDidMount&&(e.effectTag|=4),!1)},updateClassInstance:function(e,t,n){var s=t.type,l=t.stateNode;l.props=t.memoizedProps,l.state=t.memoizedState;var h=t.memoizedProps,p=t.pendingProps,m=l.context,v=d(t);v=f(t,v),(s="function"==typeof s.getDerivedStateFromProps||"function"==typeof l.getSnapshotBeforeUpdate)||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(h!==p||m!==v)&&u(t,l,p,v),m=t.memoizedState,n=null!==t.updateQueue?hr(e,t,t.updateQueue,l,p,n):m;var y=void 0;if(h!==p&&(y=c(t,0,p,n)),null!=y){n=null==n?y:a({},n,y);var b=t.updateQueue;null!==b&&(b.baseState=a({},b.baseState,y))}return h!==p||m!==n||g()||null!==t.updateQueue&&t.updateQueue.hasForceUpdate?((y=o(t,h,p,m,n,v))?(s||"function"!=typeof l.UNSAFE_componentWillUpdate&&"function"!=typeof l.componentWillUpdate||("function"==typeof l.componentWillUpdate&&l.componentWillUpdate(p,n,v),"function"==typeof l.UNSAFE_componentWillUpdate&&l.UNSAFE_componentWillUpdate(p,n,v)),"function"==typeof l.componentDidUpdate&&(t.effectTag|=4),"function"==typeof l.getSnapshotBeforeUpdate&&(t.effectTag|=2048)):("function"!=typeof l.componentDidUpdate||h===e.memoizedProps&&m===e.memoizedState||(t.effectTag|=4),"function"!=typeof l.getSnapshotBeforeUpdate||h===e.memoizedProps&&m===e.memoizedState||(t.effectTag|=2048),r(t,p),i(t,n)),l.props=p,l.state=n,l.context=v,y):("function"!=typeof l.componentDidUpdate||h===e.memoizedProps&&m===e.memoizedState||(t.effectTag|=4),"function"!=typeof l.getSnapshotBeforeUpdate||h===e.memoizedProps&&m===e.memoizedState||(t.effectTag|=2048),!1)}}}(n,o,s,function(e,t){e.memoizedProps=t},function(e,t){e.memoizedState=t})).adoptClassInstance,R=e.callGetDerivedStateFromProps,D=e.constructClassInstance,L=e.mountClassInstance,F=e.resumeMountClassInstance,M=e.updateClassInstance;return{beginWork:function(e,t,n){if(0===t.expirationTime||t.expirationTime>n){switch(t.tag){case 3:m(t);break;case 2:k(t);break;case 4:_(t,t.stateNode.containerInfo);break;case 13:E(t)}return null}switch(t.tag){case 0:null!==e&&p("155");var r=t.type,i=t.pendingProps,o=S(t);return r=r(i,o=w(t,o)),t.effectTag|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render&&void 0===r.$$typeof?(o=t.type,t.tag=2,t.memoizedState=null!==r.state&&void 0!==r.state?r.state:null,"function"==typeof o.getDerivedStateFromProps&&(null!=(i=R(t,r,i,t.memoizedState))&&(t.memoizedState=a({},t.memoizedState,i))),i=k(t),N(t,r),L(t,n),e=d(e,t,!0,i,!1,n)):(t.tag=1,u(e,t,r),t.memoizedProps=i,e=t.child),e;case 1:return i=t.type,n=t.pendingProps,T()||t.memoizedProps!==n?(r=S(t),i=i(n,r=w(t,r)),t.effectTag|=1,u(e,t,i),t.memoizedProps=n,e=t.child):e=v(e,t),e;case 2:i=k(t),null===e?null===t.stateNode?(D(t,t.pendingProps),L(t,n),r=!0):r=F(t,n):r=M(e,t,n),o=!1;var s=t.updateQueue;return null!==s&&null!==s.capturedValues&&(o=r=!0),d(e,t,r,i,o,n);case 3:e:if(m(t),r=t.updateQueue,null!==r){if(o=t.memoizedState,i=hr(e,t,r,null,null,n),t.memoizedState=i,null!==(r=t.updateQueue)&&null!==r.capturedValues)r=null;else{if(o===i){P(),e=v(e,t);break e}r=i.element}o=t.stateNode,(null===e||null===e.child)&&o.hydrate&&A(t)?(t.effectTag|=2,t.child=yr(t,null,r,n)):(P(),u(e,t,r)),t.memoizedState=i,e=t.child}else P(),e=v(e,t);return e;case 5:return x(t),null===e&&I(t),i=t.type,s=t.memoizedProps,r=t.pendingProps,o=null!==e?e.memoizedProps:null,T()||s!==r||((s=1&t.mode&&b(i,r))&&(t.expirationTime=1073741823),s&&1073741823===n)?(s=r.children,y(i,r)?s=null:o&&y(i,o)&&(t.effectTag|=16),f(e,t),1073741823!==n&&1&t.mode&&b(i,r)?(t.expirationTime=1073741823,t.memoizedProps=r,e=null):(u(e,t,s),t.memoizedProps=r,e=t.child)):e=v(e,t),e;case 6:return null===e&&I(t),t.memoizedProps=t.pendingProps,null;case 8:t.tag=7;case 7:return i=t.pendingProps,T()||t.memoizedProps!==i||(i=t.memoizedProps),r=i.children,t.stateNode=null===e?yr(t,t.stateNode,r,n):vr(t,e.stateNode,r,n),t.memoizedProps=i,t.stateNode;case 9:return null;case 4:return _(t,t.stateNode.containerInfo),i=t.pendingProps,T()||t.memoizedProps!==i?(null===e?t.child=vr(t,null,i,n):u(e,t,i),t.memoizedProps=i,e=t.child):e=v(e,t),e;case 14:return u(e,t,n=(n=t.type.render)(t.pendingProps,t.ref)),t.memoizedProps=n,t.child;case 10:return n=t.pendingProps,T()||t.memoizedProps!==n?(u(e,t,n),t.memoizedProps=n,e=t.child):e=v(e,t),e;case 11:return n=t.pendingProps.children,T()||null!==n&&t.memoizedProps!==n?(u(e,t,n),t.memoizedProps=n,e=t.child):e=v(e,t),e;case 13:return function(e,t,n){var r=t.type._context,i=t.pendingProps,o=t.memoizedProps;if(!T()&&o===i)return t.stateNode=0,E(t),v(e,t);var a=i.value;if(t.memoizedProps=i,null===o)a=1073741823;else if(o.value===i.value){if(o.children===i.children)return t.stateNode=0,E(t),v(e,t);a=0}else{var s=o.value;if(s===a&&(0!==s||1/s==1/a)||s!=s&&a!=a){if(o.children===i.children)return t.stateNode=0,E(t),v(e,t);a=0}else if(a="function"==typeof r._calculateChangedBits?r._calculateChangedBits(s,a):1073741823,0==(a|=0)){if(o.children===i.children)return t.stateNode=0,E(t),v(e,t)}else g(t,r,a,n)}return t.stateNode=a,E(t),u(e,t,i.children),t.child}(e,t,n);case 12:e:{r=t.type,o=t.pendingProps,s=t.memoizedProps,i=r._currentValue;var l=r._changedBits;if(T()||0!==l||s!==o){t.memoizedProps=o;var c=o.unstable_observedBits;if(null==c&&(c=1073741823),t.stateNode=c,0!=(l&c))g(t,r,l,n);else if(s===o){e=v(e,t);break e}u(e,t,n=(n=o.children)(i)),e=t.child}else e=v(e,t)}return e;default:p("156")}}}}function xr(e,t){var n=t.source;null===t.stack&&ct(n),null!==n&&lt(n),t=t.value,null!==e&&2===e.tag&&lt(e);try{t&&t.suppressReactErrorLogging||console.error(t)}catch(e){e&&e.suppressReactErrorLogging||console.error(e)}}var _r={};function Er(e){function t(){if(null!==ee)for(var e=ee.return;null!==e;)D(e),e=e.return;te=null,ne=0,ee=null,oe=!1}function n(e){return null!==ae&&ae.has(e)}function r(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(512&e.effectTag)){t=I(t,e,ne);var i=e;if(1073741823===ne||1073741823!==i.expirationTime){e:switch(i.tag){case 3:case 2:var o=i.updateQueue;o=null===o?0:o.expirationTime;break e;default:o=0}for(var a=i.child;null!==a;)0!==a.expirationTime&&(0===o||o>a.expirationTime)&&(o=a.expirationTime),a=a.sibling;i.expirationTime=o}if(null!==t)return t;if(null!==n&&0==(512&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e)),null!==r)return r;if(null===n){oe=!0;break}e=n}else{if(null!==(e=R(e)))return e.effectTag&=2559,e;if(null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=512),null!==r)return r;if(null===n)break;e=n}}return null}function i(e){var t=P(e.alternate,e,ne);return null===t&&(t=r(e)),$e.current=null,t}function o(e,n,o){J&&p("243"),J=!0,n===ne&&e===te&&null!==ee||(t(),ne=n,ee=qn((te=e).current,null,ne),e.pendingCommitExpirationTime=0);for(var a=!1;;){try{if(o)for(;null!==ee&&!S();)ee=i(ee);else for(;null!==ee;)ee=i(ee)}catch(e){if(null===ee){a=!0,T(e);break}var s=(o=ee).return;if(null===s){a=!0,T(e);break}N(s,o,e),ee=r(o)}break}return J=!1,a||null!==ee?null:oe?(e.pendingCommitExpirationTime=n,e.current.alternate):void p("262")}function s(e,t,n,r){lr(t,{expirationTime:r,partialState:null,callback:null,isReplace:!1,isForced:!1,capturedValue:e={value:n,source:e,stack:ct(e)},next:null}),c(t,r)}function u(e,t){e:{J&&!ie&&p("263");for(var r=e.return;null!==r;){switch(r.tag){case 2:var i=r.stateNode;if("function"==typeof r.type.getDerivedStateFromCatch||"function"==typeof i.componentDidCatch&&!n(i)){s(e,r,t,1),e=void 0;break e}break;case 3:s(e,r,t,1),e=void 0;break e}r=r.return}3===e.tag&&s(e,e,t,1),e=void 0}return e}function l(e){return e=0!==Q?Q:J?ie?1:ne:1&e.mode?_e?10*(1+((f()+15)/10|0)):25*(1+((f()+500)/25|0)):1,_e&&(0===de||e>de)&&(de=e),e}function c(e,n){e:{for(;null!==e;){if((0===e.expirationTime||e.expirationTime>n)&&(e.expirationTime=n),null!==e.alternate&&(0===e.alternate.expirationTime||e.alternate.expirationTime>n)&&(e.alternate.expirationTime=n),null===e.return){if(3!==e.tag){n=void 0;break e}var r=e.stateNode;!J&&0!==ne&&n<ne&&t(),J&&!ie&&te===r||g(r,n),Se>we&&p("185")}e=e.return}n=void 0}return n}function f(){return Y=K()-$,2+(Y/10|0)}function d(e,t,n,r,i){var o=Q;Q=1;try{return e(t,n,r,i)}finally{Q=o}}function m(e){if(0!==le){if(e>le)return;H(ce)}var t=K()-$;le=e,ce=W(y,{timeout:10*(e-2)-t})}function g(e,t){if(null===e.nextScheduledRoot)e.remainingExpirationTime=t,null===ue?(se=ue=e,e.nextScheduledRoot=e):(ue=ue.nextScheduledRoot=e).nextScheduledRoot=se;else{var n=e.remainingExpirationTime;(0===n||t<n)&&(e.remainingExpirationTime=t)}he||(be?xe&&(pe=e,fe=1,E(e,1,!1)):1===t?b():m(t))}function v(){var e=0,t=null;if(null!==ue)for(var n=ue,r=se;null!==r;){var i=r.remainingExpirationTime;if(0===i){if((null===n||null===ue)&&p("244"),r===r.nextScheduledRoot){se=ue=r.nextScheduledRoot=null;break}if(r===se)se=i=r.nextScheduledRoot,ue.nextScheduledRoot=i,r.nextScheduledRoot=null;else{if(r===ue){(ue=n).nextScheduledRoot=se,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if((0===e||i<e)&&(e=i,t=r),r===ue)break;n=r,r=r.nextScheduledRoot}}null!==(n=pe)&&n===t&&1===e?Se++:Se=0,pe=t,fe=e}function y(e){x(0,!0,e)}function b(){x(1,!1,null)}function x(e,t,n){if(ye=n,v(),t)for(;null!==pe&&0!==fe&&(0===e||e>=fe)&&(!me||f()>=fe);)E(pe,fe,!me),v();else for(;null!==pe&&0!==fe&&(0===e||e>=fe);)E(pe,fe,!1),v();null!==ye&&(le=0,ce=-1),0!==fe&&m(fe),ye=null,me=!1,_()}function _(){if(Se=0,null!==Ee){var e=Ee;Ee=null;for(var t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){ge||(ge=!0,ve=e)}}}if(ge)throw e=ve,ve=null,ge=!1,e}function E(e,t,n){he&&p("245"),he=!0,n?null!==(n=e.finishedWork)?w(e,n,t):(e.finishedWork=null,null!==(n=o(e,t,!0))&&(S()?e.finishedWork=n:w(e,n,t))):null!==(n=e.finishedWork)?w(e,n,t):(e.finishedWork=null,null!==(n=o(e,t,!1))&&w(e,n,t)),he=!1}function w(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime<=n&&(null===Ee?Ee=[r]:Ee.push(r),r._defer))return e.finishedWork=t,void(e.remainingExpirationTime=0);e.finishedWork=null,ie=J=!0,(n=t.stateNode).current===t&&p("177"),0===(r=n.pendingCommitExpirationTime)&&p("261"),n.pendingCommitExpirationTime=0;var i=f();if($e.current=null,1<t.effectTag)if(null!==t.lastEffect){t.lastEffect.nextEffect=t;var o=t.firstEffect}else o=t;else o=t.firstEffect;for(X(n.containerInfo),re=o;null!==re;){var a=!1,s=void 0;try{for(;null!==re;)2048&re.effectTag&&L(re.alternate,re),re=re.nextEffect}catch(e){a=!0,s=e}a&&(null===re&&p("178"),u(re,s),null!==re&&(re=re.nextEffect))}for(re=o;null!==re;){a=!1,s=void 0;try{for(;null!==re;){var l=re.effectTag;if(16&l&&F(re),128&l){var c=re.alternate;null!==c&&z(c)}switch(14&l){case 2:M(re),re.effectTag&=-3;break;case 6:M(re),re.effectTag&=-3,B(re.alternate,re);break;case 4:B(re.alternate,re);break;case 8:U(re)}re=re.nextEffect}}catch(e){a=!0,s=e}a&&(null===re&&p("178"),u(re,s),null!==re&&(re=re.nextEffect))}for(q(n.containerInfo),n.current=t,re=o;null!==re;){l=!1,c=void 0;try{for(o=n,a=i,s=r;null!==re;){var h=re.effectTag;36&h&&j(o,re.alternate,re,a,s),256&h&&G(re,T),128&h&&V(re);var d=re.nextEffect;re.nextEffect=null,re=d}}catch(e){l=!0,c=e}l&&(null===re&&p("178"),u(re,c),null!==re&&(re=re.nextEffect))}J=ie=!1,nr(t.stateNode),0===(t=n.current.expirationTime)&&(ae=null),e.remainingExpirationTime=t}function S(){return!(null===ye||ye.timeRemaining()>Te)&&(me=!0)}function T(e){null===pe&&p("246"),pe.remainingExpirationTime=0,ge||(ge=!0,ve=e)}var k=function(){var e=[],t=-1;return{createCursor:function(e){return{current:e}},isEmpty:function(){return-1===t},pop:function(n){0>t||(n.current=e[t],e[t]=null,t--)},push:function(n,r){e[++t]=n.current,n.current=r},checkThatStackIsEmpty:function(){},resetStackAfterFatalErrorInDev:function(){}}}(),C=function(e,t){function n(e){return e===_r&&p("174"),e}var r=e.getChildHostContext,i=e.getRootHostContext;e=t.createCursor;var o=t.push,a=t.pop,s=e(_r),u=e(_r),l=e(_r);return{getHostContext:function(){return n(s.current)},getRootHostContainer:function(){return n(l.current)},popHostContainer:function(e){a(s,e),a(u,e),a(l,e)},popHostContext:function(e){u.current===e&&(a(s,e),a(u,e))},pushHostContainer:function(e,t){o(l,t,e),o(u,e,e),o(s,_r,e),t=i(t),a(s,e),o(s,t,e)},pushHostContext:function(e){var t=n(l.current),i=n(s.current);i!==(t=r(i,e.type,t))&&(o(u,e,e),o(s,t,e))}}}(e,k),O=function(e){function t(e,t,n){(e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=n}function n(e){return 2===e.tag&&null!=e.type.childContextTypes}function r(e,t){var n=e.stateNode,r=e.type.childContextTypes;if("function"!=typeof n.getChildContext)return t;for(var i in n=n.getChildContext())i in r||p("108",lt(e)||"Unknown",i);return a({},t,n)}var i=e.createCursor,o=e.push,s=e.pop,u=i(h),l=i(!1),c=h;return{getUnmaskedContext:function(e){return n(e)?c:u.current},cacheContext:t,getMaskedContext:function(e,n){var r=e.type.contextTypes;if(!r)return h;var i=e.stateNode;if(i&&i.__reactInternalMemoizedUnmaskedChildContext===n)return i.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in r)a[o]=n[o];return i&&t(e,n,a),a},hasContextChanged:function(){return l.current},isContextConsumer:function(e){return 2===e.tag&&null!=e.type.contextTypes},isContextProvider:n,popContextProvider:function(e){n(e)&&(s(l,e),s(u,e))},popTopLevelContextObject:function(e){s(l,e),s(u,e)},pushTopLevelContextObject:function(e,t,n){null!=u.cursor&&p("168"),o(u,t,e),o(l,n,e)},processChildContext:r,pushContextProvider:function(e){if(!n(e))return!1;var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||h,c=u.current,o(u,t,e),o(l,l.current,e),!0},invalidateContextProvider:function(e,t){var n=e.stateNode;if(n||p("169"),t){var i=r(e,c);n.__reactInternalMemoizedMergedChildContext=i,s(l,e),s(u,e),o(u,i,e)}else s(l,e);o(l,t,e)},findCurrentUnmaskedContext:function(e){for((2!==qt(e)||2!==e.tag)&&p("170");3!==e.tag;){if(n(e))return e.stateNode.__reactInternalMemoizedMergedChildContext;(e=e.return)||p("171")}return e.stateNode.context}}}(k);k=function(e){var t=e.createCursor,n=e.push,r=e.pop,i=t(null),o=t(null),a=t(0);return{pushProvider:function(e){var t=e.type._context;n(a,t._changedBits,e),n(o,t._currentValue,e),n(i,e,e),t._currentValue=e.pendingProps.value,t._changedBits=e.stateNode},popProvider:function(e){var t=a.current,n=o.current;r(i,e),r(o,e),r(a,e),(e=e.type._context)._currentValue=n,e._changedBits=t}}}(k);var A=function(e){function t(e,t){var n=new Xn(5,null,null,0);n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function n(e,t){switch(e.tag){case 5:return null!==(t=o(t,e.type,e.pendingProps))&&(e.stateNode=t,!0);case 6:return null!==(t=a(t,e.pendingProps))&&(e.stateNode=t,!0);default:return!1}}function r(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;h=e}var i=e.shouldSetTextContent;if(!(e=e.hydration))return{enterHydrationState:function(){return!1},resetHydrationState:function(){},tryToClaimNextHydratableInstance:function(){},prepareToHydrateHostInstance:function(){p("175")},prepareToHydrateHostTextInstance:function(){p("176")},popHydrationState:function(){return!1}};var o=e.canHydrateInstance,a=e.canHydrateTextInstance,s=e.getNextHydratableSibling,u=e.getFirstHydratableChild,l=e.hydrateInstance,c=e.hydrateTextInstance,h=null,f=null,d=!1;return{enterHydrationState:function(e){return f=u(e.stateNode.containerInfo),h=e,d=!0},resetHydrationState:function(){f=h=null,d=!1},tryToClaimNextHydratableInstance:function(e){if(d){var r=f;if(r){if(!n(e,r)){if(!(r=s(r))||!n(e,r))return e.effectTag|=2,d=!1,void(h=e);t(h,f)}h=e,f=u(r)}else e.effectTag|=2,d=!1,h=e}},prepareToHydrateHostInstance:function(e,t,n){return t=l(e.stateNode,e.type,e.memoizedProps,t,n,e),e.updateQueue=t,null!==t},prepareToHydrateHostTextInstance:function(e){return c(e.stateNode,e.memoizedProps,e)},popHydrationState:function(e){if(e!==h)return!1;if(!d)return r(e),d=!0,!1;var n=e.type;if(5!==e.tag||"head"!==n&&"body"!==n&&!i(n,e.memoizedProps))for(n=f;n;)t(e,n),n=s(n);return r(e),f=h?s(e.stateNode):null,!0}}}(e),P=br(e,C,O,k,A,c,l).beginWork,I=function(e,t,n,r,i){function o(e){e.effectTag|=4}var a=e.createInstance,s=e.createTextInstance,u=e.appendInitialChild,l=e.finalizeInitialChildren,c=e.prepareUpdate,h=e.persistence,f=t.getRootHostContainer,d=t.popHostContext,m=t.getHostContext,g=t.popHostContainer,v=n.popContextProvider,y=n.popTopLevelContextObject,b=r.popProvider,x=i.prepareToHydrateHostInstance,_=i.prepareToHydrateHostTextInstance,E=i.popHydrationState,w=void 0,S=void 0,T=void 0;return e.mutation?(w=function(){},S=function(e,t,n){(t.updateQueue=n)&&o(t)},T=function(e,t,n,r){n!==r&&o(t)}):p(h?"235":"236"),{completeWork:function(e,t,n){var r=t.pendingProps;switch(t.tag){case 1:return null;case 2:return v(t),e=t.stateNode,null!==(r=t.updateQueue)&&null!==r.capturedValues&&(t.effectTag&=-65,"function"==typeof e.componentDidCatch?t.effectTag|=256:r.capturedValues=null),null;case 3:return g(t),y(t),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(E(t),t.effectTag&=-3),w(t),null!==(e=t.updateQueue)&&null!==e.capturedValues&&(t.effectTag|=256),null;case 5:d(t),n=f();var i=t.type;if(null!==e&&null!=t.stateNode){var h=e.memoizedProps,k=t.stateNode,C=m();k=c(k,i,h,r,n,C),S(e,t,k,i,h,r,n,C),e.ref!==t.ref&&(t.effectTag|=128)}else{if(!r)return null===t.stateNode&&p("166"),null;if(e=m(),E(t))x(t,n,e)&&o(t);else{h=a(i,r,n,e,t);e:for(C=t.child;null!==C;){if(5===C.tag||6===C.tag)u(h,C.stateNode);else if(4!==C.tag&&null!==C.child){C.child.return=C,C=C.child;continue}if(C===t)break;for(;null===C.sibling;){if(null===C.return||C.return===t)break e;C=C.return}C.sibling.return=C.return,C=C.sibling}l(h,i,r,n,e)&&o(t),t.stateNode=h}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)T(e,t,e.memoizedProps,r);else{if("string"!=typeof r)return null===t.stateNode&&p("166"),null;e=f(),n=m(),E(t)?_(t)&&o(t):t.stateNode=s(r,e,n,t)}return null;case 7:(r=t.memoizedProps)||p("165"),t.tag=8,i=[];e:for((h=t.stateNode)&&(h.return=t);null!==h;){if(5===h.tag||6===h.tag||4===h.tag)p("247");else if(9===h.tag)i.push(h.pendingProps.value);else if(null!==h.child){h.child.return=h,h=h.child;continue}for(;null===h.sibling;){if(null===h.return||h.return===t)break e;h=h.return}h.sibling.return=h.return,h=h.sibling}return r=(h=r.handler)(r.props,i),t.child=vr(t,null!==e?e.child:null,r,n),t.child;case 8:return t.tag=7,null;case 9:case 14:case 10:case 11:return null;case 4:return g(t),w(t),null;case 13:return b(t),null;case 12:return null;case 0:p("167");default:p("156")}}}}(e,C,O,k,A).completeWork,N=(C=function(e,t,n,r,i){var o=e.popHostContainer,a=e.popHostContext,s=t.popContextProvider,u=t.popTopLevelContextObject,l=n.popProvider;return{throwException:function(e,t,n){t.effectTag|=512,t.firstEffect=t.lastEffect=null,t={value:n,source:t,stack:ct(t)};do{switch(e.tag){case 3:return ur(e),e.updateQueue.capturedValues=[t],void(e.effectTag|=1024);case 2:if(n=e.stateNode,0==(64&e.effectTag)&&null!==n&&"function"==typeof n.componentDidCatch&&!i(n)){ur(e);var r=(n=e.updateQueue).capturedValues;return null===r?n.capturedValues=[t]:r.push(t),void(e.effectTag|=1024)}}e=e.return}while(null!==e)},unwindWork:function(e){switch(e.tag){case 2:s(e);var t=e.effectTag;return 1024&t?(e.effectTag=-1025&t|64,e):null;case 3:return o(e),u(e),1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 5:return a(e),null;case 4:return o(e),null;case 13:return l(e),null;default:return null}},unwindInterruptedWork:function(e){switch(e.tag){case 2:s(e);break;case 3:o(e),u(e);break;case 5:a(e);break;case 4:o(e);break;case 13:l(e)}}}}(C,O,k,0,n)).throwException,R=C.unwindWork,D=C.unwindInterruptedWork,L=(C=function(e,t,n,r,i){function o(e){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){t(e,n)}else n.current=null}function a(e){switch(rr(e),e.tag){case 2:o(e);var n=e.stateNode;if("function"==typeof n.componentWillUnmount)try{n.props=e.memoizedProps,n.state=e.memoizedState,n.componentWillUnmount()}catch(n){t(e,n)}break;case 5:o(e);break;case 7:s(e.stateNode);break;case 4:h&&l(e)}}function s(e){for(var t=e;;)if(a(t),null===t.child||h&&4===t.tag){if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;t=t.return}t.sibling.return=t.return,t=t.sibling}else t.child.return=t,t=t.child}function u(e){return 5===e.tag||3===e.tag||4===e.tag}function l(e){for(var t=e,n=!1,r=void 0,i=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&p("160"),n.tag){case 5:r=n.stateNode,i=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,i=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag)s(t),i?E(r,t.stateNode):_(r,t.stateNode);else if(4===t.tag?r=t.stateNode.containerInfo:a(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}var c=e.getPublicInstance,h=e.mutation;e=e.persistence,h||p(e?"235":"236");var f=h.commitMount,d=h.commitUpdate,m=h.resetTextContent,g=h.commitTextUpdate,v=h.appendChild,y=h.appendChildToContainer,b=h.insertBefore,x=h.insertInContainerBefore,_=h.removeChild,E=h.removeChildFromContainer;return{commitBeforeMutationLifeCycles:function(e,t){switch(t.tag){case 2:if(2048&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;(e=t.stateNode).props=t.memoizedProps,e.state=t.memoizedState,t=e.getSnapshotBeforeUpdate(n,r),e.__reactInternalSnapshotBeforeUpdate=t}break;case 3:case 5:case 6:case 4:break;default:p("163")}},commitResetTextContent:function(e){m(e.stateNode)},commitPlacement:function(e){e:{for(var t=e.return;null!==t;){if(u(t)){var n=t;break e}t=t.return}p("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:p("161")}16&n.effectTag&&(m(t),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||u(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var i=e;;){if(5===i.tag||6===i.tag)n?r?x(t,i.stateNode,n):b(t,i.stateNode,n):r?y(t,i.stateNode):v(t,i.stateNode);else if(4!==i.tag&&null!==i.child){i.child.return=i,i=i.child;continue}if(i===e)break;for(;null===i.sibling;){if(null===i.return||i.return===e)return;i=i.return}i.sibling.return=i.return,i=i.sibling}},commitDeletion:function(e){l(e),e.return=null,e.child=null,e.alternate&&(e.alternate.child=null,e.alternate.return=null)},commitWork:function(e,t){switch(t.tag){case 2:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var i=t.type,o=t.updateQueue;t.updateQueue=null,null!==o&&d(n,o,i,e,r,t)}break;case 6:null===t.stateNode&&p("162"),n=t.memoizedProps,g(t.stateNode,null!==e?e.memoizedProps:n,n);break;case 3:break;default:p("163")}},commitLifeCycles:function(e,t,n){switch(n.tag){case 2:if(e=n.stateNode,4&n.effectTag)if(null===t)e.props=n.memoizedProps,e.state=n.memoizedState,e.componentDidMount();else{var r=t.memoizedProps;t=t.memoizedState,e.props=n.memoizedProps,e.state=n.memoizedState,e.componentDidUpdate(r,t,e.__reactInternalSnapshotBeforeUpdate)}null!==(n=n.updateQueue)&&pr(n,e);break;case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=c(n.child.stateNode);break;case 2:e=n.child.stateNode}pr(t,e)}break;case 5:e=n.stateNode,null===t&&4&n.effectTag&&f(e,n.type,n.memoizedProps,n);break;case 6:case 4:break;default:p("163")}},commitErrorLogging:function(e,t){switch(e.tag){case 2:var n=e.type;t=e.stateNode;var r=e.updateQueue;(null===r||null===r.capturedValues)&&p("264");var o=r.capturedValues;for(r.capturedValues=null,"function"!=typeof n.getDerivedStateFromCatch&&i(t),t.props=e.memoizedProps,t.state=e.memoizedState,n=0;n<o.length;n++){var a=(r=o[n]).value,s=r.stack;xr(e,r),t.componentDidCatch(a,{componentStack:null!==s?s:""})}break;case 3:for((null===(n=e.updateQueue)||null===n.capturedValues)&&p("264"),o=n.capturedValues,n.capturedValues=null,n=0;n<o.length;n++)xr(e,r=o[n]),t(r.value);break;default:p("265")}},commitAttachRef:function(e){var t=e.ref;if(null!==t){var n=e.stateNode;switch(e.tag){case 5:e=c(n);break;default:e=n}"function"==typeof t?t(e):t.current=e}},commitDetachRef:function(e){null!==(e=e.ref)&&("function"==typeof e?e(null):e.current=null)}}}(e,u,0,0,function(e){null===ae?ae=new Set([e]):ae.add(e)})).commitBeforeMutationLifeCycles,F=C.commitResetTextContent,M=C.commitPlacement,U=C.commitDeletion,B=C.commitWork,j=C.commitLifeCycles,G=C.commitErrorLogging,V=C.commitAttachRef,z=C.commitDetachRef,K=e.now,W=e.scheduleDeferredCallback,H=e.cancelDeferredCallback,X=e.prepareForCommit,q=e.resetAfterCommit,$=K(),Y=$,Z=0,Q=0,J=!1,ee=null,te=null,ne=0,re=null,ie=!1,oe=!1,ae=null,se=null,ue=null,le=0,ce=-1,he=!1,pe=null,fe=0,de=0,me=!1,ge=!1,ve=null,ye=null,be=!1,xe=!1,_e=!1,Ee=null,we=1e3,Se=0,Te=1;return{recalculateCurrentTime:f,computeExpirationForFiber:l,scheduleWork:c,requestWork:g,flushRoot:function(e,t){he&&p("253"),pe=e,fe=t,E(e,t,!1),b(),_()},batchedUpdates:function(e,t){var n=be;be=!0;try{return e(t)}finally{(be=n)||he||b()}},unbatchedUpdates:function(e,t){if(be&&!xe){xe=!0;try{return e(t)}finally{xe=!1}}return e(t)},flushSync:function(e,t){he&&p("187");var n=be;be=!0;try{return d(e,t)}finally{be=n,b()}},flushControlled:function(e){var t=be;be=!0;try{d(e)}finally{(be=t)||he||x(1,!1,null)}},deferredUpdates:function(e){var t=Q;Q=25*(1+((f()+500)/25|0));try{return e()}finally{Q=t}},syncUpdates:d,interactiveUpdates:function(e,t,n){if(_e)return e(t,n);be||he||0===de||(x(de,!1,null),de=0);var r=_e,i=be;be=_e=!0;try{return e(t,n)}finally{_e=r,(be=i)||he||b()}},flushInteractiveUpdates:function(){he||0===de||(x(de,!1,null),de=0)},computeUniqueAsyncExpiration:function(){var e=25*(1+((f()+500)/25|0));return e<=Z&&(e=Z+1),Z=e},legacyContext:O}}function wr(e){function t(e,t,n,r,i,a){if(r=t.current,n){n=n._reactInternalFiber;var s=u(n);n=l(n)?c(n,s):s}else n=h;return null===t.context?t.context=n:t.pendingContext=n,lr(r,{expirationTime:i,partialState:{element:e},callback:void 0===(t=a)?null:t,isReplace:!1,isForced:!1,capturedValue:null,next:null}),o(r,i),i}var n=e.getPublicInstance,r=(e=Er(e)).recalculateCurrentTime,i=e.computeExpirationForFiber,o=e.scheduleWork,s=e.legacyContext,u=s.findCurrentUnmaskedContext,l=s.isContextProvider,c=s.processChildContext;return{createContainer:function(e,t,n){return e={current:t=new Xn(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,pendingCommitExpirationTime:0,finishedWork:null,context:null,pendingContext:null,hydrate:n,remainingExpirationTime:0,firstBatch:null,nextScheduledRoot:null},t.stateNode=e},updateContainer:function(e,n,o,a){var s=n.current;return t(e,n,o,r(),s=i(s),a)},updateContainerAtExpirationTime:function(e,n,i,o,a){return t(e,n,i,r(),o,a)},flushRoot:e.flushRoot,requestWork:e.requestWork,computeUniqueAsyncExpiration:e.computeUniqueAsyncExpiration,batchedUpdates:e.batchedUpdates,unbatchedUpdates:e.unbatchedUpdates,deferredUpdates:e.deferredUpdates,syncUpdates:e.syncUpdates,interactiveUpdates:e.interactiveUpdates,flushInteractiveUpdates:e.flushInteractiveUpdates,flushControlled:e.flushControlled,flushSync:e.flushSync,getPublicRootInstance:function(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:return n(e.child.stateNode);default:return e.child.stateNode}},findHostInstance:function(e){var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?p("188"):p("268",Object.keys(e))),null===(e=Qt(t))?null:e.stateNode},findHostInstanceWithNoPortals:function(e){return null===(e=function(e){if(!(e=Zt(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child&&4!==t.tag)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}(e))?null:e.stateNode},injectIntoDevTools:function(e){var t=e.findFiberByHostInstance;return function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Jn=tr(function(e){return t.onCommitFiberRoot(n,e)}),er=tr(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}return!0}(a({},e,{findHostInstanceByFiber:function(e){return null===(e=Qt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}}}var Sr=Object.freeze({default:wr}),Tr=Sr&&wr||Sr,kr=Tr.default?Tr.default:Tr;var Cr="object"==typeof performance&&"function"==typeof performance.now,Or=void 0;Or=Cr?function(){return performance.now()}:function(){return Date.now()};var Ar=void 0,Pr=void 0;if(o.canUseDOM)if("function"!=typeof requestIdleCallback||"function"!=typeof cancelIdleCallback){var Ir=null,Nr=!1,Rr=-1,Dr=!1,Lr=0,Fr=33,Mr=33,Ur=void 0;Ur=Cr?{didTimeout:!1,timeRemaining:function(){var e=Lr-performance.now();return 0<e?e:0}}:{didTimeout:!1,timeRemaining:function(){var e=Lr-Date.now();return 0<e?e:0}};var Br="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(e){if(e.source===window&&e.data===Br){if(Nr=!1,e=Or(),0>=Lr-e){if(!(-1!==Rr&&Rr<=e))return void(Dr||(Dr=!0,requestAnimationFrame(jr)));Ur.didTimeout=!0}else Ur.didTimeout=!1;Rr=-1,e=Ir,Ir=null,null!==e&&e(Ur)}},!1);var jr=function(e){Dr=!1;var t=e-Lr+Mr;t<Mr&&Fr<Mr?(8>t&&(t=8),Mr=t<Fr?Fr:t):Fr=t,Lr=e+Mr,Nr||(Nr=!0,window.postMessage(Br,"*"))};Ar=function(e,t){return Ir=e,null!=t&&"number"==typeof t.timeout&&(Rr=Or()+t.timeout),Dr||(Dr=!0,requestAnimationFrame(jr)),0},Pr=function(){Ir=null,Nr=!1,Rr=-1}}else Ar=window.requestIdleCallback,Pr=window.cancelIdleCallback;else Ar=function(e){return setTimeout(function(){e({timeRemaining:function(){return 1/0},didTimeout:!1})})},Pr=function(e){clearTimeout(e)};function Gr(e,t){return e=a({children:void 0},t),(t=function(e){var t="";return i.Children.forEach(e,function(e){null==e||"string"!=typeof e&&"number"!=typeof e||(t+=e)}),t}(t.children))&&(e.children=t),e}function Vr(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+n,t=null,i=0;i<e.length;i++){if(e[i].value===n)return e[i].selected=!0,void(r&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function zr(e,t){var n=t.value;e._wrapperState={initialValue:null!=n?n:t.defaultValue,wasMultiple:!!t.multiple}}function Kr(e,t){return null!=t.dangerouslySetInnerHTML&&p("91"),a({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Wr(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&p("92"),Array.isArray(t)&&(1>=t.length||p("93"),t=t[0]),n=""+t),null==n&&(n="")),e._wrapperState={initialValue:""+n}}function Hr(e,t){var n=t.value;null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&(e.defaultValue=n)),null!=t.defaultValue&&(e.defaultValue=t.defaultValue)}function Xr(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}var qr={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function $r(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Yr(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?$r(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Zr,Qr=void 0,Jr=(Zr=function(e,t){if(e.namespaceURI!==qr.svg||"innerHTML"in e)e.innerHTML=t;else{for((Qr=Qr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=Qr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction(function(){return Zr(e,t)})}:Zr);function ei(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ti={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ni=["Webkit","ms","Moz","O"];function ri(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),i=n,o=t[n];i=null==o||"boolean"==typeof o||""===o?"":r||"number"!=typeof o||0===o||ti.hasOwnProperty(i)&&ti[i]?(""+o).trim():o+"px","float"===n&&(n="cssFloat"),r?e.setProperty(n,i):e[n]=i}}Object.keys(ti).forEach(function(e){ni.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ti[t]=ti[e]})});var ii=a({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function oi(e,t,n){t&&(ii[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&p("137",e,n()),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&p("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||p("61")),null!=t.style&&"object"!=typeof t.style&&p("62",n()))}function ai(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var si=s.thatReturns("");function ui(e,t){var n=Ln(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=_[t];for(var r=0;r<t.length;r++){var i=t[r];n.hasOwnProperty(i)&&n[i]||("topScroll"===i?_n("topScroll","scroll",e):"topFocus"===i||"topBlur"===i?(_n("topFocus","focus",e),_n("topBlur","blur",e),n.topBlur=!0,n.topFocus=!0):"topCancel"===i?(We("cancel",!0)&&_n("topCancel","cancel",e),n.topCancel=!0):"topClose"===i?(We("close",!0)&&_n("topClose","close",e),n.topClose=!0):Pn.hasOwnProperty(i)&&xn(i,Pn[i],e),n[i]=!0)}}function li(e,t,n,r){return n=9===n.nodeType?n:n.ownerDocument,r===qr.html&&(r=$r(e)),r===qr.html?"script"===e?((e=n.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):e="string"==typeof t.is?n.createElement(e,{is:t.is}):n.createElement(e):e=n.createElementNS(r,e),e}function ci(e,t){return(9===t.nodeType?t:t.ownerDocument).createTextNode(e)}function hi(e,t,n,r){var i=ai(t,n);switch(t){case"iframe":case"object":xn("topLoad","load",e);var o=n;break;case"video":case"audio":for(o in In)In.hasOwnProperty(o)&&xn(o,In[o],e);o=n;break;case"source":xn("topError","error",e),o=n;break;case"img":case"image":case"link":xn("topError","error",e),xn("topLoad","load",e),o=n;break;case"form":xn("topReset","reset",e),xn("topSubmit","submit",e),o=n;break;case"details":xn("topToggle","toggle",e),o=n;break;case"input":xt(e,n),o=bt(e,n),xn("topInvalid","invalid",e),ui(r,"onChange");break;case"option":o=Gr(e,n);break;case"select":zr(e,n),o=a({},n,{value:void 0}),xn("topInvalid","invalid",e),ui(r,"onChange");break;case"textarea":Wr(e,n),o=Kr(e,n),xn("topInvalid","invalid",e),ui(r,"onChange");break;default:o=n}oi(t,o,si);var u,l=o;for(u in l)if(l.hasOwnProperty(u)){var c=l[u];"style"===u?ri(e,c):"dangerouslySetInnerHTML"===u?null!=(c=c?c.__html:void 0)&&Jr(e,c):"children"===u?"string"==typeof c?("textarea"!==t||""!==c)&&ei(e,c):"number"==typeof c&&ei(e,""+c):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(x.hasOwnProperty(u)?null!=c&&ui(r,u):null!=c&&yt(e,u,c,i))}switch(t){case"input":Xe(e),wt(e,n);break;case"textarea":Xe(e),Xr(e);break;case"option":null!=n.value&&e.setAttribute("value",n.value);break;case"select":e.multiple=!!n.multiple,null!=(t=n.value)?Vr(e,!!n.multiple,t,!1):null!=n.defaultValue&&Vr(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=s)}}function pi(e,t,n,r,i){var o=null;switch(t){case"input":n=bt(e,n),r=bt(e,r),o=[];break;case"option":n=Gr(e,n),r=Gr(e,r),o=[];break;case"select":n=a({},n,{value:void 0}),r=a({},r,{value:void 0}),o=[];break;case"textarea":n=Kr(e,n),r=Kr(e,r),o=[];break;default:"function"!=typeof n.onClick&&"function"==typeof r.onClick&&(e.onclick=s)}oi(t,r,si),t=e=void 0;var u=null;for(e in n)if(!r.hasOwnProperty(e)&&n.hasOwnProperty(e)&&null!=n[e])if("style"===e){var l=n[e];for(t in l)l.hasOwnProperty(t)&&(u||(u={}),u[t]="")}else"dangerouslySetInnerHTML"!==e&&"children"!==e&&"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&"autoFocus"!==e&&(x.hasOwnProperty(e)?o||(o=[]):(o=o||[]).push(e,null));for(e in r){var c=r[e];if(l=null!=n?n[e]:void 0,r.hasOwnProperty(e)&&c!==l&&(null!=c||null!=l))if("style"===e)if(l){for(t in l)!l.hasOwnProperty(t)||c&&c.hasOwnProperty(t)||(u||(u={}),u[t]="");for(t in c)c.hasOwnProperty(t)&&l[t]!==c[t]&&(u||(u={}),u[t]=c[t])}else u||(o||(o=[]),o.push(e,u)),u=c;else"dangerouslySetInnerHTML"===e?(c=c?c.__html:void 0,l=l?l.__html:void 0,null!=c&&l!==c&&(o=o||[]).push(e,""+c)):"children"===e?l===c||"string"!=typeof c&&"number"!=typeof c||(o=o||[]).push(e,""+c):"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&(x.hasOwnProperty(e)?(null!=c&&ui(i,e),o||l===c||(o=[])):(o=o||[]).push(e,c))}return u&&(o=o||[]).push("style",u),o}function fi(e,t,n,r,i){"input"===n&&"radio"===i.type&&null!=i.name&&_t(e,i),ai(n,r),r=ai(n,i);for(var o=0;o<t.length;o+=2){var a=t[o],s=t[o+1];"style"===a?ri(e,s):"dangerouslySetInnerHTML"===a?Jr(e,s):"children"===a?ei(e,s):yt(e,a,s,r)}switch(n){case"input":Et(e,i);break;case"textarea":Hr(e,i);break;case"select":e._wrapperState.initialValue=void 0,t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!i.multiple,null!=(n=i.value)?Vr(e,!!i.multiple,n,!1):t!==!!i.multiple&&(null!=i.defaultValue?Vr(e,!!i.multiple,i.defaultValue,!0):Vr(e,!!i.multiple,i.multiple?[]:"",!1))}}function di(e,t,n,r,i){switch(t){case"iframe":case"object":xn("topLoad","load",e);break;case"video":case"audio":for(var o in In)In.hasOwnProperty(o)&&xn(o,In[o],e);break;case"source":xn("topError","error",e);break;case"img":case"image":case"link":xn("topError","error",e),xn("topLoad","load",e);break;case"form":xn("topReset","reset",e),xn("topSubmit","submit",e);break;case"details":xn("topToggle","toggle",e);break;case"input":xt(e,n),xn("topInvalid","invalid",e),ui(i,"onChange");break;case"select":zr(e,n),xn("topInvalid","invalid",e),ui(i,"onChange");break;case"textarea":Wr(e,n),xn("topInvalid","invalid",e),ui(i,"onChange")}for(var a in oi(t,n,si),r=null,n)n.hasOwnProperty(a)&&(o=n[a],"children"===a?"string"==typeof o?e.textContent!==o&&(r=["children",o]):"number"==typeof o&&e.textContent!==""+o&&(r=["children",""+o]):x.hasOwnProperty(a)&&null!=o&&ui(i,a));switch(t){case"input":Xe(e),wt(e,n);break;case"textarea":Xe(e),Xr(e);break;case"select":case"option":break;default:"function"==typeof n.onClick&&(e.onclick=s)}return r}function mi(e,t){return e.nodeValue!==t}var gi=Object.freeze({createElement:li,createTextNode:ci,setInitialProperties:hi,diffProperties:pi,updateProperties:fi,diffHydratedProperties:di,diffHydratedText:mi,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(e,t,n){switch(t){case"input":if(Et(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=W(r);i||p("90"),qe(r),Et(r,i)}}}break;case"textarea":Hr(e,n);break;case"select":null!=(t=n.value)&&Vr(e,!!n.multiple,t,!1)}}});Ae.injectFiberControlledHostComponent(gi);var vi=null,yi=null;function bi(e){this._expirationTime=Si.computeUniqueAsyncExpiration(),this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function xi(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function _i(e,t,n){this._internalRoot=Si.createContainer(e,t,n)}function Ei(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function wi(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}bi.prototype.render=function(e){this._defer||p("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new xi;return Si.updateContainerAtExpirationTime(e,t,null,n,r._onCommit),r},bi.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},bi.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||p("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,i=t;i!==this;)r=i,i=i._next;null===r&&p("251"),r._next=i._next,this._next=t,e.firstBatch=this}this._defer=!1,Si.flushRoot(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},bi.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},xi.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},xi.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&p("191",n),n()}}},_i.prototype.render=function(e,t){var n=this._internalRoot,r=new xi;return null!==(t=void 0===t?null:t)&&r.then(t),Si.updateContainer(e,n,null,r._onCommit),r},_i.prototype.unmount=function(e){var t=this._internalRoot,n=new xi;return null!==(e=void 0===e?null:e)&&n.then(e),Si.updateContainer(null,t,null,n._onCommit),n},_i.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,i=new xi;return null!==(n=void 0===n?null:n)&&i.then(n),Si.updateContainer(t,r,e,i._onCommit),i},_i.prototype.createBatch=function(){var e=new bi(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime<=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e};var Si=kr({getRootHostContext:function(e){var t=e.nodeType;switch(t){case 9:case 11:e=(e=e.documentElement)?e.namespaceURI:Yr(null,"");break;default:e=Yr(e=(t=8===t?e.parentNode:e).namespaceURI||null,t=t.tagName)}return e},getChildHostContext:function(e,t){return Yr(e,t)},getPublicInstance:function(e){return e},prepareForCommit:function(){vi=yn;var e=u();if(Un(e)){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var n=window.getSelection&&window.getSelection();if(n&&0!==n.rangeCount){t=n.anchorNode;var r=n.anchorOffset,i=n.focusNode;n=n.focusOffset;try{t.nodeType,i.nodeType}catch(e){t=null;break e}var o=0,a=-1,s=-1,l=0,c=0,h=e,p=null;t:for(;;){for(var f;h!==t||0!==r&&3!==h.nodeType||(a=o+r),h!==i||0!==n&&3!==h.nodeType||(s=o+n),3===h.nodeType&&(o+=h.nodeValue.length),null!==(f=h.firstChild);)p=h,h=f;for(;;){if(h===e)break t;if(p===t&&++l===r&&(a=o),p===i&&++c===n&&(s=o),null!==(f=h.nextSibling))break;p=(h=p).parentNode}h=f}t=-1===a||-1===s?null:{start:a,end:s}}else t=null}t=t||{start:0,end:0}}else t=null;yi={focusedElem:e,selectionRange:t},bn(!1)},resetAfterCommit:function(){var e=yi,t=u(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&c(document.documentElement,n)){if(Un(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if(window.getSelection){t=window.getSelection();var i=n[ie()].length;e=Math.min(r.start,i),r=void 0===r.end?e:Math.min(r.end,i),!t.extend&&e>r&&(i=r,r=e,e=i),i=Mn(n,e);var o=Mn(n,r);if(i&&o&&(1!==t.rangeCount||t.anchorNode!==i.node||t.anchorOffset!==i.offset||t.focusNode!==o.node||t.focusOffset!==o.offset)){var a=document.createRange();a.setStart(i.node,i.offset),t.removeAllRanges(),e>r?(t.addRange(a),t.extend(o.node,o.offset)):(a.setEnd(o.node,o.offset),t.addRange(a))}}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}yi=null,bn(vi),vi=null},createInstance:function(e,t,n,r,i){return(e=li(e,t,n,r))[G]=i,e[V]=t,e},appendInitialChild:function(e,t){e.appendChild(t)},finalizeInitialChildren:function(e,t,n,r){return hi(e,t,n,r),wi(t,n)},prepareUpdate:function(e,t,n,r,i){return pi(e,t,n,r,i)},shouldSetTextContent:function(e,t){return"textarea"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&"string"==typeof t.dangerouslySetInnerHTML.__html},shouldDeprioritizeSubtree:function(e,t){return!!t.hidden},createTextInstance:function(e,t,n,r){return(e=ci(e,t))[G]=r,e},now:Or,mutation:{commitMount:function(e,t,n){wi(t,n)&&e.focus()},commitUpdate:function(e,t,n,r,i){e[V]=i,fi(e,t,n,r,i)},resetTextContent:function(e){ei(e,"")},commitTextUpdate:function(e,t,n){e.nodeValue=n},appendChild:function(e,t){e.appendChild(t)},appendChildToContainer:function(e,t){8===e.nodeType?e.parentNode.insertBefore(t,e):e.appendChild(t)},insertBefore:function(e,t,n){e.insertBefore(t,n)},insertInContainerBefore:function(e,t,n){8===e.nodeType?e.parentNode.insertBefore(t,n):e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},removeChildFromContainer:function(e,t){8===e.nodeType?e.parentNode.removeChild(t):e.removeChild(t)}},hydration:{canHydrateInstance:function(e,t){return 1!==e.nodeType||t.toLowerCase()!==e.nodeName.toLowerCase()?null:e},canHydrateTextInstance:function(e,t){return""===t||3!==e.nodeType?null:e},getNextHydratableSibling:function(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},getFirstHydratableChild:function(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},hydrateInstance:function(e,t,n,r,i,o){return e[G]=o,e[V]=n,di(e,t,n,i,r)},hydrateTextInstance:function(e,t,n){return e[G]=n,mi(e,t)},didNotMatchHydratedContainerTextInstance:function(){},didNotMatchHydratedTextInstance:function(){},didNotHydrateContainerInstance:function(){},didNotHydrateInstance:function(){},didNotFindHydratableContainerInstance:function(){},didNotFindHydratableContainerTextInstance:function(){},didNotFindHydratableInstance:function(){},didNotFindHydratableTextInstance:function(){}},scheduleDeferredCallback:Ar,cancelDeferredCallback:Pr}),Ti=Si;function ki(e,t,n,r,i){Ei(n)||p("200");var o=n._reactRootContainer;if(o){if("function"==typeof i){var a=i;i=function(){var e=Si.getPublicRootInstance(o._internalRoot);a.call(e)}}null!=e?o.legacy_renderSubtreeIntoContainer(e,t,i):o.render(t,i)}else{if(o=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new _i(e,!1,t)}(n,r),"function"==typeof i){var s=i;i=function(){var e=Si.getPublicRootInstance(o._internalRoot);s.call(e)}}Si.unbatchedUpdates(function(){null!=e?o.legacy_renderSubtreeIntoContainer(e,t,i):o.render(t,i)})}return Si.getPublicRootInstance(o._internalRoot)}function Ci(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return Ei(t)||p("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:et,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Me=Ti.batchedUpdates,Ue=Ti.interactiveUpdates,Be=Ti.flushInteractiveUpdates;var Oi={createPortal:Ci,findDOMNode:function(e){return null==e?null:1===e.nodeType?e:Si.findHostInstance(e)},hydrate:function(e,t,n){return ki(null,e,t,!0,n)},render:function(e,t,n){return ki(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return(null==e||void 0===e._reactInternalFiber)&&p("38"),ki(e,t,n,!1,r)},unmountComponentAtNode:function(e){return Ei(e)||p("40"),!!e._reactRootContainer&&(Si.unbatchedUpdates(function(){ki(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return Ci.apply(void 0,arguments)},unstable_batchedUpdates:Si.batchedUpdates,unstable_deferredUpdates:Si.deferredUpdates,flushSync:Si.flushSync,unstable_flushControlled:Si.flushControlled,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:B,EventPluginRegistry:S,EventPropagators:ne,ReactControlledComponent:Fe,ReactDOMComponentTree:H,ReactDOMEventListener:Sn},unstable_createRoot:function(e,t){return new _i(e,!0,null!=t&&!0===t.hydrate)}};Si.injectIntoDevTools({findFiberByHostInstance:z,bundleType:0,version:"16.3.2",rendererPackageName:"react-dom"});var Ai=Object.freeze({default:Oi}),Pi=Ai&&Oi||Ai;e.exports=Pi.default?Pi.default:Pi},function(e,t,n){"use strict";
/** @license React v16.3.2
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(6),i=n(16),o=n(31),a=n(15),s="function"==typeof Symbol&&Symbol.for,u=s?Symbol.for("react.element"):60103,l=s?Symbol.for("react.portal"):60106,c=s?Symbol.for("react.fragment"):60107,h=s?Symbol.for("react.strict_mode"):60108,p=s?Symbol.for("react.provider"):60109,f=s?Symbol.for("react.context"):60110,d=s?Symbol.for("react.async_mode"):60111,m=s?Symbol.for("react.forward_ref"):60112,g="function"==typeof Symbol&&Symbol.iterator;function v(e){for(var t=arguments.length-1,n="http://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);i(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var y={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function b(e,t,n){this.props=e,this.context=t,this.refs=o,this.updater=n||y}function x(){}function _(e,t,n){this.props=e,this.context=t,this.refs=o,this.updater=n||y}b.prototype.isReactComponent={},b.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&v("85"),this.updater.enqueueSetState(this,e,t,"setState")},b.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},x.prototype=b.prototype;var E=_.prototype=new x;E.constructor=_,r(E,b.prototype),E.isPureReactComponent=!0;var w={current:null},S=Object.prototype.hasOwnProperty,T={key:!0,ref:!0,__self:!0,__source:!0};function k(e,t,n){var r=void 0,i={},o=null,a=null;if(null!=t)for(r in void 0!==t.ref&&(a=t.ref),void 0!==t.key&&(o=""+t.key),t)S.call(t,r)&&!T.hasOwnProperty(r)&&(i[r]=t[r]);var s=arguments.length-2;if(1===s)i.children=n;else if(1<s){for(var l=Array(s),c=0;c<s;c++)l[c]=arguments[c+2];i.children=l}if(e&&e.defaultProps)for(r in s=e.defaultProps)void 0===i[r]&&(i[r]=s[r]);return{$$typeof:u,type:e,key:o,ref:a,props:i,_owner:w.current}}function C(e){return"object"==typeof e&&null!==e&&e.$$typeof===u}var O=/\/+/g,A=[];function P(e,t,n,r){if(A.length){var i=A.pop();return i.result=e,i.keyPrefix=t,i.func=n,i.context=r,i.count=0,i}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function I(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>A.length&&A.push(e)}function N(e,t,n,r){var i=typeof e;"undefined"!==i&&"boolean"!==i||(e=null);var o=!1;if(null===e)o=!0;else switch(i){case"string":case"number":o=!0;break;case"object":switch(e.$$typeof){case u:case l:o=!0}}if(o)return n(r,e,""===t?"."+R(e,0):t),1;if(o=0,t=""===t?".":t+":",Array.isArray(e))for(var a=0;a<e.length;a++){var s=t+R(i=e[a],a);o+=N(i,s,n,r)}else if(null==e?s=null:s="function"==typeof(s=g&&e[g]||e["@@iterator"])?s:null,"function"==typeof s)for(e=s.call(e),a=0;!(i=e.next()).done;)o+=N(i=i.value,s=t+R(i,a++),n,r);else"object"===i&&v("31","[object Object]"===(n=""+e)?"object with keys {"+Object.keys(e).join(", ")+"}":n,"");return o}function R(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function D(e,t){e.func.call(e.context,t,e.count++)}function L(e,t,n){var r=e.result,i=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?F(e,r,n,a.thatReturnsArgument):null!=e&&(C(e)&&(t=i+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(O,"$&/")+"/")+n,e={$$typeof:u,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}),r.push(e))}function F(e,t,n,r,i){var o="";null!=n&&(o=(""+n).replace(O,"$&/")+"/"),t=P(t,o,r,i),null==e||N(e,"",L,t),I(t)}var M={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return F(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;t=P(null,null,t,n),null==e||N(e,"",D,t),I(t)},count:function(e){return null==e?0:N(e,"",a.thatReturnsNull,null)},toArray:function(e){var t=[];return F(e,t,null,a.thatReturnsArgument),t},only:function(e){return C(e)||v("143"),e}},createRef:function(){return{current:null}},Component:b,PureComponent:_,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_defaultValue:e,_currentValue:e,_changedBits:0,Provider:null,Consumer:null}).Provider={$$typeof:p,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:m,render:e}},Fragment:c,StrictMode:h,unstable_AsyncMode:d,createElement:k,cloneElement:function(e,t,n){null==e&&v("267",e);var i=void 0,o=r({},e.props),a=e.key,s=e.ref,l=e._owner;if(null!=t){void 0!==t.ref&&(s=t.ref,l=w.current),void 0!==t.key&&(a=""+t.key);var c=void 0;for(i in e.type&&e.type.defaultProps&&(c=e.type.defaultProps),t)S.call(t,i)&&!T.hasOwnProperty(i)&&(o[i]=void 0===t[i]&&void 0!==c?c[i]:t[i])}if(1===(i=arguments.length-2))o.children=n;else if(1<i){c=Array(i);for(var h=0;h<i;h++)c[h]=arguments[h+2];o.children=c}return{$$typeof:u,type:e.type,key:a,ref:s,props:o,_owner:l}},createFactory:function(e){var t=k.bind(null,e);return t.type=e,t},isValidElement:C,version:"16.3.2",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:w,assign:r}},U=Object.freeze({default:M}),B=U&&M||U;e.exports=B.default?B.default:B},function(e,t){var n,r,i=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var u,l=[],c=!1,h=-1;function p(){c&&u&&(c=!1,u.length?l=u.concat(l):h=-1,l.length&&f())}function f(){if(!c){var e=s(p);c=!0;for(var t=l.length;t;){for(u=l,l=[];++h<t;)u&&u[h].run();h=-1,t=l.length}u=null,c=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function d(e,t){this.fun=e,this.array=t}function m(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new d(e,t)),1!==l.length||c||s(f)},d.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=m,i.addListener=m,i.once=m,i.off=m,i.removeListener=m,i.removeAllListeners=m,i.emit=m,i.prependListener=m,i.prependOnceListener=m,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t,n){"use strict";var r=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e};Object.defineProperty(t,"__esModule",{value:!0});var i=n(2),o=n(5),a=n(0),s=n(4),u=n(63),l=n(53),c=n(52);i.configure({enforceActions:!0});var h={imageStore:c.default,appStore:l.default};s.render(a.createElement(o.Provider,r({},h),a.createElement(u.default,null)),document.getElementById("root"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,